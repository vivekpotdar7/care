<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
  <Rule created="1603302491734" id="0a111e58754c15ea81754c4686560117" language="beanshell" modified="1604263669854" name="No Correlator" type="Correlation"/>
  <Rule created="1603302491809" id="0a111e58754c15ea81754c4686a10118" language="beanshell" modified="1604263669941" name="Clear CustomGlobal">
    <Source>
      
        import sailpoint.object.CustomGlobal;

        List results = new ArrayList();
        results.add("CustomGlobal BEFORE clear had ["+
                    CustomGlobal.size() + "] keys.");
        CustomGlobal.clear();
        results.add("CustomGlobal AFTER clear has [" +
                   CustomGlobal.size()+"] keys.");

        return results;
      
    </Source>
  </Rule>
  <Rule created="1603302492124" id="0a111e58754c15ea81754c4687dc013f" language="beanshell" modified="1604263670054" name="IdentityNowSAML" type="SAMLCorrelation">
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
                    Logger to take care of logging.
                </Description>
        </Argument>
        <Argument name="context">
          <Description>
                    SailPointContext
                </Description>
        </Argument>
        <Argument name="assertionAttributes">
          <Description>
                    Map of attributes taken from the SAML assertion
                </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="ident">
          <Description>
                    Matching identity based on the nameId taken from assertionAttributes
                </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
        
            // Imports
            import sailpoint.object.Identity;

            // Making a BIG assumption here that the nameid-format is unspecified/persitent

            // Get the nameId from the assertionAttributes
            String nameId = (String)assertionAttributes.get("nameId");

            Identity ident;

            if(nameId != null) {
                // Lookup the identity based on nameId
                ident = context.getObject(Identity.class, nameId);
            }

            return ident;

        
    </Source>
  </Rule>
  <Rule created="1603302492400" id="0a111e58754c15ea81754c4688ef0167" language="beanshell" modified="1604263670167" name="Workflow Library">
    <Source>
    
      import sailpoint.object.Filter;
      import sailpoint.object.Identity;
      import sailpoint.object.ProvisioningPlan;
      import sailpoint.object.ProvisioningPlan.AccountRequest;
      import sailpoint.object.ProvisioningPlan.AttributeRequest;
      import sailpoint.object.QueryOptions;
      import sailpoint.tools.GeneralException;
      import sailpoint.tools.Util;

      boolean otob(Object o) { return Util.otob(o); }
      boolean isTrue(Object o) {otob(o); } 
      boolean isFalse(Object o) {!otob(o); }
      boolean isNull(Object o) {o == null; } 
      int size(Collection o) { return Util.size(o); }
      String toString(Object o) {(o == null) ? "*null*" : o.toString(); }
      void println(Object o) {System.out.println(o); }
      void print(String str) { System.out.print(str); }
      void printval(String n, Object o) {println(n + " = " + toString(o)); }


      public List csvToList(String csv) {
        return Util.csvToList(csv);
      }

      /** 
       * resolve displayName by doing a projection query.
       */ 
      public String resolveDisplayName(String identityName) {
          String displayName = getIdentityProperty(identityName, "displayName"); 
          if ( displayName == null ) {
              displayName = identityName;
          }
          return displayName;
      }
      
      /** 
       * If the identityDisplayName is null resolve it by doing
       * a projection query.
       */ 
      public String resolveDisplayName(String identityName, String currentDisplayName) {
          // allow it to be passed in to avoid the query
          String displayName = null;
          if ( currentDisplayName != void ) {
              displayName = currentDisplayName;
          }
          if ( displayName == null ) {
              displayName = resolveDisplayName(identityName);
          }
          return displayName;
      }

      /**
       * Given an Identity's name, return the email address.
       */
      public String getEmail(String name) {
          return getIdentityProperty(name, "email");
      }

      /**
       * Given an Identity's name and a ProvisioningPlan, return the email address.
       * This can be used for user notifications when a request to create an
       * identity was rejected.  In this case there will not be an identity in
       * the database, so we will try to extract the email address from the plan.
       */
      public String getUserEmail(String name, ProvisioningPlan plan) {
          String email = getEmail(name);

          if (null == email) {
              email = getIIQCreateRequestValue(plan, "email");
          }

          return email;
      }

      /**
       * Given an Identity's name, return the manager's email address.
       */
      public String getManagersEmail(String name) {
          return getIdentityProperty(name, "manager.email"); 
      }

      /**
       * Given an Identity's name, return the manager's email address.
       * This can be used for user notifications when a request to create an
       * identity was rejected.  In this case there will not be an identity in
       * the database, so we will try to extract the manager from the plan to
       * lookup the email address.
       */
      public String getManagersEmail(String name, ProvisioningPlan plan) {
          String email = getManagersEmail(name);

          if (null == email) {
              String manager = getIIQCreateRequestValue(plan, "manager");
              if (null != manager) {
                  Identity identity = context.getObject(Identity.class, manager);
                  if (null != identity) {
                      email = identity.getEmail();
                  }
              }
          }

          return email;
      }

      /**
       * Return the value for the requested attribute from the ProvisioningPlan
       * if this is an identity creation request.
       */
      private String getIIQCreateRequestValue(ProvisioningPlan plan, String attr) {
          String value = null;

          if (null != plan) {
              AccountRequest acctReq = plan.getIIQAccountRequest();
              if ((null != acctReq) &amp;&amp;
                  AccountRequest.Operation.Create.equals(acctReq.getOperation())) {
                  AttributeRequest attrReq = acctReq.getAttributeRequest(attr);
                  if (null != attrReq) {
                      value = (String) attrReq.getValue();
                  }
              }
          }

          return value;
      }

      /** 
       * Return a single string property value from an identity.
       */
      public String getIdentityProperty(String identity, String property) {
          QueryOptions ops = new QueryOptions();
          Filter nameFilter = Filter.eq("name", identity);
          ops.add(new Filter[]{nameFilter});

          String val = null; 
          Iterator it = context.search(Identity.class, ops, property);
          while ( it.hasNext() ) {
              Object[] row = (Object[])it.next();
              val = (String)row[0];
              if ( it.hasNext() ) {
                  // shouldn't happen but guard
                  throw new GeneralException("More then one ["+property+"] value returned for ["+identity+"]");
              }
          } 
          return val;
      }

      /**
       * Return the value of a system configuration property.
       * The value is always returned as a string.
       */
      public String getConfiguration(String name) {
          return context.getConfiguration().getString(name);
      }

    
  </Source>
  </Rule>
  <Rule created="1603302492476" id="0a111e58754c15ea81754c46893c0168" language="beanshell" modified="1616963732065" name="Approval Library">
    <Source>
    

    import sailpoint.api.ManagedAttributer;
    import sailpoint.object.Application;
    import sailpoint.object.ApprovalSet;
    import sailpoint.object.ApprovalItem;
    import sailpoint.object.AttributeDefinition;
    import sailpoint.object.Attributes;
    import sailpoint.object.Bundle;
    import sailpoint.object.Identity;
    import sailpoint.object.ManagedAttribute;
    import sailpoint.object.ProvisioningPlan;
    import sailpoint.object.ProvisioningPlan.AccountRequest;
    import sailpoint.object.ProvisioningPlan.AttributeRequest;
    import sailpoint.object.ProvisioningPlan.PermissionRequest;
    import sailpoint.object.ProvisioningPlan.GenericRequest;
    import sailpoint.object.ProvisioningProject;
    import sailpoint.object.Scope;
    import sailpoint.object.WorkItem;
    import sailpoint.object.Workflow;
    import sailpoint.object.Workflow.Approval;
    import sailpoint.tools.Util;
    import sailpoint.tools.xml.XMLObjectFactory;
    
    /** 
    * Take a list of AttributeRequests and return a List of Attributes
    * to store on the approval item so that we can get at the attributes of
    * each attribute request in case we need information about that attribute request
    */
    public Attributes getAttributeRequestArguments(List attributeRequests) {
      Attributes attributes = new Attributes();
      for(AttributeRequest attr : attributeRequests) {
        String key = attr.getName()+":"+attr.getValue();
        Attributes arguments = attr.getArguments();
        attributes.put(key, arguments);
      }
      return attributes;
    }

    /**
     * Turn a list of AttributeRequests into simple
     * name = 'value' format. Represent this as a list
     * so we can display it neatly in the ui tier and
     * still not mess with dn strings.
     *
     * A general utility method used both by rules and workflow
     * scripts.  
     */
    public List flattenAttributeRequests(List attributeRequests) {
        List flat = new ArrayList();
        flattenAttributeRequests(attributeRequests, flat);
        return flat;
    }
    
    /**
    *  Bug 15833, ensure requester comments make it into manual actions
    */
    public String getRequesterComments(List requests) {
        String comment = "";
        if(requests != null) {
            for(GenericRequest request : requests) {
                String innerComment = request.getComments();
                if ( Util.getString(innerComment) != null ) {
                    comment += innerComment;
                }
            }
        }
        return comment;
    }
        
    public void flattenAttributeRequests(List attributeRequests, List flat) {
        if ( Util.size(attributeRequests) > 0 ) {
            for (AttributeRequest attr : attributeRequests ) {
                if( !attr.getName().equals(ProvisioningPlan.ATT_IIQ_PASSWORD) &amp;&amp;
                    !attr.getBoolean(ProvisioningPlan.ARG_SECRET) &amp;&amp;
                    !attr.getName().equals(Identity.PRF_USE_BY_DATE)) {
                    if (attr.getDisplayValue() == null) {
                        String displayName = attr.getName();
                        List val = Util.asList(attr.getValue());
                        if ( val != null ) {
                            if ( attr.getName().equals("manager") ) { 
                                String managerName = null;
                                if ( Util.size(val) == 1 ) {
                                    // For manager convert the name into a displayName so it looks 
                                    // reasonable in the ui
                                    managerName = (String)val.get(0);
                                    if ( manager != null ) {
                                        String displayName = getIdentityProperty(managerName, "displayName");
                                        if ( displayName != null ) {
                                            val = Util.csvToList(displayName);
                                        }
                                    }
                                }
                            }
                            
                            String type = (String)attr.get(ProvisioningPlan.ARG_TYPE);
                            if (type!=null &amp;&amp; type.equals(ProvisioningPlan.ARG_TYPE_DATE)) {
                              Object obj = val.get(0);
                              
                              Date date = null;
                              
                              if(obj instanceof java.util.Date) {
                                date = obj;
                              } else {
                                date = new Date((Long)obj);
                              }
                              val = new ArrayList();                         
                              val.add(Util.dateToString(date, "M/d/y"));
                            } else if (AttributeDefinition.TYPE_SCOPE.equals(type)) {
                              val = getScopeNames(val);  
                            }
                            
                        }
                        if ( Util.size(val) > 0 ) 
                            flat.add(displayName+ " = '"+Util.listToCsv(val)+"'");
                    } else {
                        flat.add(attr.getDisplayValue());
                    }
                }
            }
        }
    }
    
    /*
     * Given a list of scope ids it will return a list of 
     * scope names.
     *
     */
    public List getScopeNames(List val) {
        
        if (val == null) {
            return null;
        }

        List scopeNames = new ArrayList();
        for (int i=0; i&lt;val.size(); ++i) {
            scopeNames.add(fetchScopeName((String) val.get(i)));
        }
        
        return scopeNames;
    }

    /**
     * Fetches a scope name from scope id
     *
     */    
    private String fetchScopeName(String id) {
        
        Scope scope =  context.getObjectById(Scope.class, id);
        
        if (scope == null) {
            return null;
        }
        
        return scope.getDisplayableName();
    }

    /**
     * Convert a List&lt;PermissionRequests> into a List&lt;String>
     * with each string formatted as "target='right,right,right'"
     * This is similar to flattenAttributeRequests above but 
     * kept distinct in case we need to change the rendering of permissions.
     * Currently it's ambiguous whether this is an attribute or a permission
     */
    public void flattenPermissionRequests(List permRequests, List flat) {

        if (permRequests != null) {
            for (PermissionRequest perm : permRequests ) {

              // we dont' have display names for targets, do we?
              flat.add(perm.getTarget() + " = '" + perm.getRights() + "'");
            }
        }
    }

    /**
     * Convert a Map&lt;String,ApprovalSet> into Approval objects. 
     * One Approval object for each of the keys in the map.
     *
     * Used only by rules that calculate approval structures such
     * as LCM Build Owner Approvals.
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    public List buildApprovalsFromMap(Map ownerToSet, String identityName, String launcher) {
        List approvals = new ArrayList();
        if ( ownerToSet == null ) 
            return null;

        Iterator keys = null;
        Set keySet = ownerToSet.keySet();
        if ( keySet != null )  
            keys = keySet.iterator();

        if ( keys != null ) {
            while ( keys.hasNext() ) {
                String key = (String)keys.next();
                if ( key == null ) continue;
                ApprovalSet set = ownerToSet.get(key);
                if ( set != null ) {
                    if ( log.isDebugEnabled() ) {
                        log.debug("Owner["+key+"] " + set.toXml());
                    }
                    // djs: check here to make sure this isn't an auto-approved 
                    // item because the approver is the launcher
                    if ( !sailpoint.workflow.IdentityLibrary.isElectronicSignatureEnabled(wfcontext) &amp;&amp; 
                         key.compareTo(launcher) == 0 &amp;&amp; 
                         set.isAllApproved() ) {
                        // self approved continue;
                        continue;
                    } else {
                        Approval newApproval = new Approval();
                        newApproval.setOwner("\"" + key + "\"");  // quote the owner in case the user name has a comma
                        newApproval.setApprovalSet(set);
                        newApproval.addArg(Workflow.ARG_WORK_ITEM_TARGET_CLASS, "sailpoint.object.Identity");
                        newApproval.addArg(Workflow.ARG_WORK_ITEM_TARGET_NAME, identityName);
                        approvals.add(newApproval);
                    } 
                }
            }
        }
        if ( log.isDebugEnabled() ) {
            if ( approvals != null )
                log.debug("Approvals: " + XMLObjectFactory.getInstance().toXml(approvals));
            else
                log.debug("Approvals EMPTY.");
        }
        return approvals;
    }

    /**
     * Build a Map&lt;String,ApprovalSet> each key representing a unique owner.
     * Use a Map here to allow us to easily merge any items for the same owner.
     *
     * Used by rules to build approval structures, normally followed by
     * a call to buildApprovalsFromMap.
     * 
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    public Map buildOwnerMap(String scheme, ApprovalSet approvalSet, 
                             ProvisioningPlan plan, String fallbackApprover, 
                             String identity, boolean autoApprove) {

        // djs: use a LinkedHashMap here to perserve the order of the
        // approvers in the list.  This is important for manager transfer
        // approvals.
        Map ownerToSet = new LinkedHashMap();
        List items = approvalSet.getItems();
        for ( ApprovalItem item : items ) {
            List approvers = getApproverNames(scheme, item, plan, identity);
            if ( approvers != null &amp;&amp; approvers.size() == 0 &amp;&amp; fallbackApprover != null ) {
                if ( log.isDebugEnabled() ) {
                    log.debug("Approver could not be resolved using fallbackApprover '"+fallbackApprover+"'.");
                }
                approvers.add(fallbackApprover);
            }
            //
            // Build an approval set or add an ApprovalItem 
            // to an existing set
            //
            if ( Util.size(approvers) > 0 ) {
                for ( String approver : approvers ) {
                    ApprovalSet set = (ApprovalSet)ownerToSet.get(approver);
                    if ( set == null ) {
                        set = new ApprovalSet();
                    }

                    // Make a copy of the item here so they are independent of the the
                    // cart's item.  
                    ApprovalItem itemCopy = XMLObjectFactory.getInstance().clone(item, context);
                    set.add(itemCopy);
                    ownerToSet.put(approver, set);
                    if ( autoApprove ) {
                        // djs: when we come across the launcher who is also the approver
                        // auto approve the item, this will allow us to audit/report on
                        // the request but not force an approval.  We won't create an 
                        // Approval object if all of the items are acccepted
                        if ( approver.equals(launcher) ) {
                            itemCopy.setState(WorkItem.State.Finished);
                            if ( log.isDebugEnabled() ) {
                                log.debug("Launcher was also approver and was removed.");
                            }
                            // If there is just one approver AND we are marking this 
                            // Auto-Approved also mark the master approvalSets item 
                            // finished
                            if ( approvers.size() == 1 ) {
                                item.setState(WorkItem.State.Finished);
                            }
                        }
                    }
                }
                //
                // Update the "cart" representation
                //
                // set the item's owner so we have an update
                // version in the "registry"
                // Should we store a csv Multiple approvers ?
                item.setOwner(approvers.get(0));
            }
        }
        if ( log.isDebugEnabled() ) {
            if ( ownerToSet != null )
                log.debug("OwnerSetMap: " + XMLObjectFactory.getInstance().toXml(ownerToSet));
            else
                log.debug("OwnerSetMap EMPTY.");
        }
        return ownerToSet;
    }

    /**
     * Return a list of names that represent the names of the Identities that should
     * approve the item.  We need the Plan during manager transfers when we need to figure
     * out what the new value is for the manager attribute.
     *
     * Only time the returned list is null is when we have "none"
     * approval scheme.
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    public List getApproverNames(String scheme, ApprovalItem item, ProvisioningPlan plan, String identity) {
        return getApproverNames(scheme, item, plan, identity, null);
    }

    /**
     * Return a list of names that represent the names of the Identities that should
     * approve the item.  We need the Plan during manager transfers when we need to figure
     * out what the new value is for the manager attribute.
     *
     * Only time the returned list is null is when we have "none"
     * approval scheme.
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    public List getApproverNames(String scheme, ApprovalItem item, ProvisioningPlan plan,
                                 String identity, String securityOfficerName) { 

        List owners = new ArrayList();
        String schemeToUse = scheme;
        if ( schemeToUse == null ) {
            schemeToUse = "manager";
            log.warn("Approval Scheme was not defined defaulting to manager.");
        }
        List schemes = Util.csvToList(schemeToUse);

        // None will short-circuit and cause no approvals.
        if ( schemes.contains("none") ) {
            return null;
        } 

        if ( ( schemes.contains("manager") ) || ( schemes.contains("newManager") ) ) {
            List managers = getManagers(schemes, plan, identity);
            if ( null != managers ) { 
                owners.addAll(managers);
            } 
        }

        if ( schemes.contains("owner") ) {
            String app = item.getApplication(); 
            String op = item.getOperation();
            if ( ProvisioningPlan.APP_IIQ.compareTo(app) == 0 ) { 
                if ( ( ProvisioningPlan.Operation.Add.toString().equals(op) ) || 
                     ( ProvisioningPlan.Operation.Remove.toString().equals(op) ) ) {
                    // this is a role requst, entitlement request or identity update
                    if ( ( ProvisioningPlan.ATT_IIQ_DETECTED_ROLES.equals(item.getName()) ) ||
                         ( ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES.equals(item.getName()) ) ) {
                        String owner = resolveRoleOwner(item);
                        if ( owner != null ) owners.add(owner);
                    } 
                }
           } else {
               String owner = resolveAppRequestOwner(item);
               if ( owner != null ) 
                  owners.add(owner);
           }
        }

        if ( schemes.contains("securityOfficer") ) {
            if (null == securityOfficerName) {
                log.warn("Security officer approval is configured but securityOfficerName is not defined.");
            }
            else {
                // Only use the security officer if it is a real identity.
                Identity officer = context.getObjectByName(Identity.class, securityOfficerName);
                if (null == officer) {
                    log.warn("Could not find securityOfficer: " + securityOfficerName);
                }
                else {
                    owners.add(securityOfficerName);
                }
            }
        }

        return owners;
    }

    /**
     * Helper for getApproverNames.
     * From the item figure out the owner that should be assigned
     * to this application request.
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    private String resolveAppRequestOwner(ApprovalItem item) {
        String approverName = null;

        String appName = item.getApplication();
        if ( appName == null ) return null;

        Application application = context.getObjectByName(Application.class, appName);
        if ( application == null ) 
            throw new Exception("Couldn't find application ["+appName+"]");

        Identity owner = application.getOwner();
        if ( owner != null ) {
            approverName = owner.getName();
        } else {
            // unable to find owner for application foo...
            log.debug("Unable to find owner for application ["+appName+"]");
        }

        // Check the attributeName and value and check to see if we are dealing with 
        // a ManagedAttribute 
        String attrName = item.getName();
        List vals = item.getValueList();
        if ( ( attrName != null ) &amp;&amp; ( Util.size(vals) > 0 ) ) {
            // there should just be one value in each record... 
            // log something
            String val = (String)vals.get(0);
            String maOwner = getManagedAttributeOwner(application, attrName, val);
            if ( maOwner == null) {
                log.debug("Managed Attribute owner not found.. falling back to app owner.");
            } else {
                approverName = maOwner;
            }
        }
        return approverName;
    }

    /**
     * Helper for resolveAppRequestOwner.
     * Use the ManagedAttributer to find the managed attribute and get the
     * owner from the ManagedAttribute.
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    private String getManagedAttributeOwner(Application app, String name, String value ) {
        String owner = null;
        ManagedAttribute ma = ManagedAttributer.get(context, app.getId(), name, value);
        if ( ma != null ) {
            Identity maOwner = ma.getOwner();
            if ( maOwner != null ) 
                owner = maOwner.getName();
        }
        return owner;
    }

    /**
     * Helper for getApproverNames.
     * If its a role request look up the role by name and get the owner
     * from the Role object.  
     *
     * TODO: should I walk up the hierarchy here if ther isn't 
     * one on the Bundle?
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    private String resolveRoleOwner(ApprovalItem item) {
        String approverName = null;
        List values = item.getValueList();
        if ( Util.size(values) > 0 ) {
            if ( Util.size(values) != 1 ) 
                throw new Exception("More then one value found in an approval item");

            String roleName = (String)values.get(0);
            if ( roleName != null ) {
                Bundle b = context.getObjectByName(Bundle.class, roleName);
                if ( b != null ) {
                    Identity id = b.getOwner();
                    if ( id != null ) {
                        approverName = id.getName();
                    }
                }
            }
        }
        return approverName;
    }

    /**
     * Helper for getApproverNames.
     * Get the value for manager or other by resolving the identity
     * and computing the manager, or validating the value
     * in the approvalScheme variable;
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    private List getManagers(List schemes, ProvisioningPlan plan, String identity) {
        //  
        //  During Identity Creates the Identity object does not exist
        //    In this case we have to look at the plan and see if one is assigned
        //    if not assigned default to the fallbackApprover
        // 
        //  During Updates there could be one or two managers in play
        //    1) Newly assigned manager (which is still in the plan)
        //    2) Currently assigned manager ( assigned to the identity )
        //    
        List approverNames = new ArrayList();

        String currentManager = null;
        // Use the identities manager to resolve the approval
        Identity identityObject = context.getObject(Identity.class, identity);
        if ( identityObject != null ) {
            Identity manager = identityObject.getManager();
            if ( manager != null ) {
                currentManager = manager.getName();
            } else {
                log.debug("Manager not found for ["+identityObject.getName()+"] while computing approval");
            }
        }

        String planManager = resolveManagerFromPlan(plan);
        if ( ( currentManager == null ) &amp;&amp; ( planManager != null ) ) {
            // likely Identity Create case
            approverNames.add(planManager);
        } else
            if ( ( currentManager != null ) &amp;&amp; ( planManager == null ) ) {
                // normal case
                approverNames.add(currentManager);
            } else
                if ( ( currentManager != null ) &amp;&amp; ( planManager != null ) ) {
                    // Manager Transfer
                    if ( schemes.contains("manager") ){
                        approverNames.add(currentManager);
                    }
                    if ( schemes.contains("newManager") ){
                        approverNames.add(planManager);
                    } 
                }
        return ( approverNames.size() > 0 ) ? approverNames : null;
    }

    /**
     * Helper for getManagers.
     * Dig into the plan and find the manager attribute for the IIQ
     * app if present. This is used during manager transfers
     * where we need to know the new manager so they can be 
     * part of the approval process.
     *
     * NOTE:
     * As of 6.2 this rule has been deprecated and replaced with
     * IdentityLibrary.buildXYZApproval methods.  Most of the
     * logic here has been moved to 
     * sailpoint.workflow.IdentityApprovalGenerator.
     */
    private String resolveManagerFromPlan(ProvisioningPlan plan )  {
        String managerName = null;
        if ( plan != null ) {
            AccountRequest iiq = plan.getAccountRequest(ProvisioningPlan.APP_IIQ);
            if ( iiq != null ) {
                AttributeRequest manager = iiq.getAttributeRequest("manager");
                if ( manager != null ) {
                    Object obj = manager.getValue();
                    if ( obj != null ) {
                        managerName = Util.getString(obj.toString());
                    }
                }
            }
        }
        return managerName;
    }

    
  </Source>
  </Rule>
  <Rule created="1603302492553" id="0a111e58754c15ea81754c4689890169" language="beanshell" modified="1604263670644" name="Build Manual Action Approvals">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e58754c15ea81754c46893c0168" name="Approval Library"/>
    </ReferencedRules>
    <Source>
    
       import sailpoint.object.ApprovalSet;
       import sailpoint.object.ApprovalItem;
       import sailpoint.object.ProvisioningPlan;
       import sailpoint.object.ProvisioningPlan.AccountRequest;
       import sailpoint.service.ProvisioningTransactionService;
       import sailpoint.service.ProvisioningTransactionService.TransactionDetails;
       import sailpoint.workflow.IdentityLibrary;

       //
       // Attributes needed in the rule context: 
       //
       // project - Provisioning Project
       //
       // fallbackApprover - String representing who gets the approval
       //                    if we can't resolve one.  
       //
       // identityName - name of the identity being operated on
       //

       List approvals = null;
       ProvisioningPlan unmanaged = project.getUnmanagedPlan();
       if ( unmanaged != null ) {
           // 
           // Build an ApprovalSet from each of the things in the plan 
           // 
           Identity id = context.getObject(Identity.class, identityName);
           ApprovalSet set = new ApprovalSet();
           for ( AccountRequest acctReq : unmanaged.getAccountRequests() ) {
               ProvisioningTransactionService transService = new ProvisioningTransactionService(context);

               AccountRequest account = new AccountRequest(acctReq.toMap());
               if ( AccountRequest.Operation.Create.equals(account.getOperation()) ) {
                   ApprovalItem item = new ApprovalItem();
                   // need to deal with this 
                   item.setApplication(account.getApplication());
                   item.setInstance(account.getInstance());
                   item.setNativeIdentity(account.getNativeIdentity());
                   AccountRequest.Operation op = account.getOperation();
                   if (op == null) {
                       // shouldn't be here but assume modify
                       op = AccountRequest.Operation.Modify;
                   }
                   item.setOperation(op.toString());
                   
                   //MEH 15833, get those comments transferred to the new approval item!
                   String requesterComments = null;
                   String attrComments = getRequesterComments(account.getAttributeRequests());
                   String permComments = getRequesterComments(account.getPermissionRequests());
                   
                   //only one of these should be set... ideally
                   if(attrComments.length() > 0) {
                      requesterComments = attrComments;
                   }
                   
                   if(permComments.length() > 0) {
                      requesterComments = permComments;
                   }

                   if(requesterComments == null) {
                      if(account.getComments() != null) {
                         requesterComments = account.getComments();
                      }
                   }

                   item.setRequesterComments(requesterComments);

                   List reqs = new ArrayList();
                   
                   flattenAttributeRequests(account.getAttributeRequests(), reqs);
                   flattenPermissionRequests(account.getPermissionRequests(), reqs);

                   item.setValue(reqs);
                   set.add(item);
               } else {
                   // The default ApprovalSet builder creates an ApprovalItem for
                   // every attribute/permission request
                   IdentityLibrary.addApprovalItems(id, account, set);
               }

               TransactionDetails details = new TransactionDetails();
               details.setIdentityName(identityName);
               details.setProject(project);
               details.setRequest(account);
               details.setPartitionedPlan(unmanaged);
               details.setManual(true);

               if (project.getMasterPlan() != null) {
                   details.setSource(project.getMasterPlan().getSource());
               }

               transService.logTransaction(details);
           }
           // 
           // Build a map of owner to ApprovalSet from each of the items
           // in the unmanaged plan 
           // 
           // Default to the owner scheme, but we might need an option 
           // 
           Map ownerMap = buildOwnerMap("owner", set, unmanaged, fallbackApprover, identityName, false);
           if ( ownerMap != null ) {
               approvals = buildApprovalsFromMap(ownerMap, identityName, launcher);
           }
       }
       return approvals;
    
  </Source>
  </Rule>
  <Rule created="1603302492920" id="0a111e58754c15ea81754c468af8017b" language="beanshell" modified="1617905406487" name="LCM Workflow Library">
    <Source>
    
      import sailpoint.api.Provisioner;
      import sailpoint.api.SailPointFactory;
      import sailpoint.api.SailPointContext;
      import sailpoint.object.ApprovalSet;
      import sailpoint.object.ApprovalItem;
      import sailpoint.object.AuditEvent;
      import sailpoint.object.Comment;
      import sailpoint.object.Field;
      import sailpoint.object.Form;
      import sailpoint.object.Filter;
      import sailpoint.object.Identity;
      import sailpoint.object.ProvisioningPlan;
      import sailpoint.object.ProvisioningPlan.AccountRequest;
      import sailpoint.object.ProvisioningPlan.AttributeRequest;
      import sailpoint.object.ProvisioningProject;
      import sailpoint.object.QueryOptions;
      import sailpoint.object.SignOffHistory;
      import sailpoint.object.Source;
      import sailpoint.object.Workflow;
      import sailpoint.object.Workflow.Approval;
      import sailpoint.object.WorkItem;
      import sailpoint.object.WorkItem.OwnerHistory;
      import sailpoint.server.Auditor;
      import sailpoint.tools.Util;
      import sailpoint.workflow.IdentityLibrary;
      import sailpoint.workflow.WorkflowContext;

      /**
       * Build an event per forward so there is a record 
       * that the owner changed from the original 
       * owner.
       */
      public void auditWorkItemOwnerHistory(WorkItem item) {
          List ownerHistories = item.getOwnerHistory();
          if ( Util.size(ownerHistories) > 0 ) {
              String action = "Forward";
              if ( Auditor.isEnabled(action) ) {
                  for ( OwnerHistory history : ownerHistories ) {
                      AuditEvent event = new AuditEvent();
                      event.setTrackingId(wfcontext.getWorkflow().getProcessLogId());
                      event.setAction(action);
                      event.setTarget(item.getTargetName());
                      event.setAttribute("workitem", item.getName());
                      String oldOwner = history.getOldOwner();
                      if ( oldOwner != null ) 
                          event.setAttribute("oldOwner", oldOwner);
                      String source = history.getEffectiveSource();
                      event.setSource(source);
                      String comment = history.getComment();
                      if ( comment != null ) 
                          event.setAttribute("comment", comment);
                      String newOwner = history.getNewOwner();
                      if ( newOwner != null ) 
                          event.setAttribute("newOwner", newOwner);

                      // djs: for now set this in both places to avoid needing
                      // to upgrade.  Once we have ui support for "interface"
                      // we can remove the map version
                      event.setAttribute("interface", Source.LCM.toString());
                      event.setInterface(Source.LCM.toString());

                      Auditor.log(event);
                  }
              }
          }
      }

      /**
       * Build a single "comment" event for all of the comments
       * that were entered during a workitems lifecycle.
       */
      public void auditWorkItemComments(WorkItem item) {
          List comments = item.getComments();
          if ( Util.size(comments) > 0 ) {
              String action = "Comment";
              if ( Auditor.isEnabled(action) ) {
                  AuditEvent event = new AuditEvent();
                  event.setTrackingId(wfcontext.getWorkflow().getProcessLogId());
                  event.setAction(action);
                  event.setTarget(item.getTargetName());
                  event.setAttribute("workitem", item.getName());

                  List commentStrings = new ArrayList();
                  for ( Comment comment : comments ) {
                      commentStrings.add(comment.toString());
                  }
                  event.setAttribute("comments", commentStrings);
                  // djs: for now set this in both places to avoid needing
                  // to upgrade.  Once we have ui support for "interface"
                  // we can remove the map version
                  event.setAttribute("interface", Source.LCM.toString());
                  event.setInterface(Source.LCM.toString());
                  Auditor.log(event);
              }
          }
      }

      /**
       * Determine the name to use as the "source" of an LCM work item
       * completion audit.  This should be the name of the identity that
       * closed the item.  This will be different than the item owner if the
       * owner is a work group.
       */
     public String getAuditSource(WorkItem item) {

         String actor = context.getUserName();
         Identity ident = context.getObjectByName(Identity.class, actor);
         if (ident != null)
             actor = ident.getDisplayName();
         else {
             // must be in the background with a pseudo system name
             // fall back to item owner
             ident = item.getOwner();
             if (ident != null)
                 actor = ident.getDisplayName();
             else 
                 actor = launcher;
         }

         return actor;
     }

      public void auditDecisions(WorkItem item) {
          if ( item == null )  return; 

          // there is only one Signoff, duplicated for each approval item
          SignOffHistory signoff = null;
          List signoffs = item.getSignOffs();
          if (signoffs != null &amp;&amp; signoffs.size() > 0)
              signoff = (SignOffHistory)signoffs.get(0);

          ApprovalSet approvalSet = (ApprovalSet)item.get("approvalSet");
          if ( ( approvalSet != null ) &amp;&amp; ( !approvalSet.isEmpty() ) ) {
              for ( ApprovalItem it : approvalSet.getItems() ) {

                  /** Assimilate the form field changes back into the attribute requests before
                  * creating the audit event so that the correct data is stored in the audit event. **/
                  List attrs = it.getIIQAttributes();
                  Form form = (Form)item.get("workItemForm");
                  if(attrs!=null &amp;&amp; form!=null) {
                    for(AttributeRequest attr : attrs) {
                      
                      Field field = form.getField(it.getApplication()+":"+attr.getName());
                      if(field!=null) {
                        attr.setValue(field.getValue());
                      }
                    }
                    it.setValue(flattenAttributeRequests(attrs));                 
                  }
                                    
                  AuditEvent event = new AuditEvent();
                  event.setAction(AuditEvent.ActionApproveLineItem);
                  event.setSource(getAuditSource(item));
                  event.setTarget(identityName);

                  event.setApplication(it.getApplication());
                  event.setAccountName(it.getNativeIdentity());
                  event.setInstance(it.getInstance());
                  event.setAttributeName(it.getName());
                  event.setAttributeValue(it.getCsv());                  
                  
                  // electronic signature
                  if (signoff != null) {
                     String meaning = signoff.getText();
                     if (meaning != null) {
                         event.setAttribute("esignatureSigner", 
                                            signoff.getSignerDisplayableName());
                         event.setAttribute("esignatureText", meaning);
                         // what else, date?
                     }
                 }

                  Date start = it.getStartDate();
                  if ( start != null ) 
                      event.setAttribute("startDate", start);
                  Date end = it.getEndDate();
                  if ( end != null ) 
                      event.setAttribute("endDate", end);

                  event.setAttribute("currentStep", wfcontext.getStep().getName());

                  // group them by a generatedId
                  event.setTrackingId(wfcontext.getWorkflow().getProcessLogId());
                  String interfaceName = wfcontext.getString("interface");
                  if ( interfaceName == null)
                      interfaceName = Source.LCM.toString();

                  // djs: for now set this in both places to avoid needing
                  // to upgrade.  Once we have ui support for "interface"
                  // we can remove the map version
                  event.setAttribute("interface", interfaceName);
                  event.setInterface(interfaceName);

                  event.setAttribute("operation", it.getOperation());
                  event.setAttribute("requester", launcher);

                  List comments = it.getComments();
                  if ( Util.size(comments) > 0 ) {
                      event.setAttribute("completionComments", comments);
                  }

                  String requesterComments = it.getRequesterComments();
                  if ( Util.getString(requesterComments) != null )
                      event.setAttribute("requesterComments", requesterComments);

                  String taskResultId = wfcontext.getString(Workflow.VAR_TASK_RESULT);
                  if ( taskResultId != null ) {
                      event.setAttribute(Workflow.VAR_TASK_RESULT, taskResultId);
                  }

                  if ( !it.isApproved() ) {
                      event.setAction(AuditEvent.ActionRejectLineItem);
                  }

                  if ( Auditor.isEnabled(event.getAction()) ) {
                      Auditor.log(event);
                      wfcontext.getSailPointContext().commitTransaction();
                  }
              }
          }
      }

      public void auditManualAction(WorkItem item) {
          if ( Auditor.isEnabled(AuditEvent.ManualChange) ) {
              ApprovalSet set = (ApprovalSet)item.get("approvalSet");
              if ( set != null ) {
                  List items = set.getItems();
                  if ( Util.size(items) > 0 ) {
                      int num = 0 ;
                      for ( ApprovalItem it : items  ) { 
                          num++;
                          AuditEvent event = IdentityLibrary.buildBaseEvent(wfcontext, it);
                          event.setSource(getAuditSource(item));
                          event.setAction(AuditEvent.ManualChange);
                          event.setAttribute("requester", wfcontext.getString("launcher"));
                          event.setAttribute("op", it.getOperation());
                          List comments = it.getComments();
                          if ( Util.size(comments) > 0 ) {
                              event.setAttribute("completionComments", comments);
                          }
                          Auditor.log(event);
                      }
                      if ( num > 0 ) 
                          wfcontext.getSailPointContext().commitTransaction();
                  }
              } else {
                  throw new GeneralException("ApprovalSet not found in the afterscript.");
              }
          } 
      }

      /**
       * After an approval has been made apply the changes from the workitem back into the
       * cart. (approvalSet)
       */
      public void assimilateWorkItemApprovalSet(WorkflowContext wfcontext, WorkItem item, ApprovalSet approvalSet) {
         if (item == null) {
              // must not be a leaf approval...
              return;
          }
          // Assimilate all of the approvalItem changes into our gloval
          // approval set
          // 
          // Also audit the comments and forwarding thats happend
          ApprovalSet set = (ApprovalSet)item.get("approvalSet");
          if ( set != null ) {
              // Global completion comments will apply to each of the items
              // If there are completion comments append them
              // to any other completion comments, but typically its 
              // one or the other
              String completionComments = item.getCompletionComments();
              String ownerName = null;
              Identity id = item.getOwner();
              if ( id != null ) {
                  ownerName = id.getName();
              }
              approvalSet.assimilate(set, ownerName, completionComments, true);
          } else {
              throw new GeneralException("ApprovalSet not found in the afterscript.");
          }
          auditWorkItemOwnerHistory(item);
          auditWorkItemComments(item);
          wfcontext.getSailPointContext().commitTransaction();
      }

      /**
       * Convert the approvalScheme to csv and check for the approvalType.
       */
      public boolean isApprovalEnabled(String approvalScheme, String approvalType) {
          if ( approvalScheme != null )  {
              List schemes = Util.csvToList(approvalScheme);
              if ( Util.size(schemes) > 0 ) {
                  if ( schemes.contains(approvalType) ) {
                      return true;
                  }
              }
          }
          return false;
      }

      public String getManagerName(String identityName, String launcher, String fallbackApprover) {
          String managerName = getIdentityProperty(identityName, "manager.name");
          if ( managerName != null ) {
              if ( managerName.compareTo(launcher) == 0 ) {
                  managerName = null;
              } 
          } else {
             managerName = fallbackApprover;
          }
          return managerName;
      }

      /**
       * Take an ApprovalSet and allow filtering of rejected items and 
       * allow clearing decisions. If includeRejected is false, only non rejected 
       * items will be copied into the new approvalSet.   If forceDecision is
       * true all of the previous decisions will be cleared forcing the new
       * approver to make a decision on all items.
       */
      public ApprovalSet filterApprovalSet(ApprovalSet masterSet, String includeRejected, 
                                           boolean forceDecision) {
          ApprovalSet filtered = new ApprovalSet();
          if ( masterSet != null ) {
              List items = masterSet.getItems();
              if ( !Util.otob(includeRejected) ) {
                  items = new ArrayList();
                  for ( ApprovalItem item : masterSet.getItems() ) {
                      if ( !item.isRejected() ) {
                          items.add(item);
                      }
                  }
              }
 
              if ( Util.size(items) > 0 )  {
                  for ( ApprovalItem item : items ) {
                      if ( forceDecision ) { 
                          item.setState(null);
                      }
                      filtered.add(item); 
                  } 
              } 
          }
          return filtered;
      }

      //Filter items from the currentSet that are rejected in the masterSet
      public void filterRejectsFromApprovalSet(ApprovalSet masterSet, ApprovalSet currentSet) {
        if (currentSet != null &amp;&amp; !Util.isEmpty(currentSet.getItems())) {
            Iterator it = currentSet.getItems().iterator();
            while(it.hasNext()) {
                ApprovalItem currentItem = (ApprovalItem)it.next();
                //Find the item in the global ApprovalSet
                ApprovalItem globalItem = masterSet.find(currentItem);
                if (globalItem != null &amp;&amp; globalItem.isRejected()) {
                    //remove from the current approval
                    it.remove();
                }
            }
        }

      }

      //Set decisions on the currentSet to those in the masterSet
      public void setPreviousDecisionsOnApprovalSet(ApprovalSet masterSet, ApprovalSet currentSet) {
        if (currentSet != null &amp;&amp; !Util.isEmpty(currentSet.getItems())) {
            Iterator it = currentSet.getItems().iterator();
            while(it.hasNext()) {
                ApprovalItem currentItem = (ApprovalItem)it.next();
                //Find the item in the global ApprovalSet
                ApprovalItem globalItem = masterSet.find(currentItem);
                if (globalItem != null) {
                    currentItem.setState(globalItem.getState());
                }
            }
        }
      }

    
  </Source>
  </Rule>
  <Rule created="1603302493344" id="0a111e58754c15ea81754c468ca00189" language="beanshell" modified="1604263671057" name="Check Password Policy" type="FieldValue">
    <Source>
    
       import sailpoint.api.PasswordPolice;
       import sailpoint.object.Application;
       import sailpoint.object.Identity;
       import java.util.List;
       import java.util.ArrayList;
       import sailpoint.api.PasswordPolicyException;
       import sailpoint.tools.Util;
       import sailpoint.tools.Message;
       import sailpoint.tools.GeneralException;

       List msgs = new ArrayList();

       String passVal = (String)value;

       try {
           String appname = field.getApplication();
           if (appname == null) {
              // temporary support old WorkItems
              String fname = field.getName();
              int colon = fname.indexOf(":");
              if (colon > 0)
                 appname = fname.substring(0, colon);
              else
                 log.error("Unable to determine application name from field");
           }
           Application app = context.getObjectByName(Application.class, appname);
          
           PasswordPolice police = new PasswordPolice(context);
           police.checkPassword(app, identity, passVal);
       }
       catch (PasswordPolicyException pe) {
           List messages = pe.getAllMessages();
           for (Message msg : messages) {
               msgs.add(msg.getMessage());
           }
       }
       catch (GeneralException ge) {
           msgs.add(ge.getMessage());
       }

       return ( Util.size(msgs) > 0 ) ? msgs: null;
    
  </Source>
  </Rule>
  <Rule created="1603302493447" id="0a111e58754c15ea81754c468d07018a" language="beanshell" modified="1604263671204" name="LCM Build Owner Approvals">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e58754c15ea81754c46893c0168" name="Approval Library"/>
    </ReferencedRules>
    <Source>
    
       import sailpoint.object.ApprovalSet;
       import sailpoint.object.ProvisioningPlan;
       import sailpoint.workflow.IdentityLibrary;

       //
       // Attributes needed in the rule context: 
       //
       // plan - ProvisioningPlan object 
       //
       // approvalSet - An ApprovalSet representing the "cart"
       // 
       // fallbackApprover - String representing who gets the approval
       //                    if we can't resolve one.  
       //
       // identityName - name of the identity being operated on
       //
       //
       List approvals = new ArrayList();
       if ( approvalSet != null ) {
           // 
           // Build a map of owner to ApprovalSet from each of the things in the plan 
           // 
           Map ownerMap = buildOwnerMap("owner", approvalSet, plan, fallbackApprover, identityName, !IdentityLibrary.isElectronicSignatureEnabled(wfcontext));
           if ( ownerMap != null) {
               approvals = buildApprovalsFromMap(ownerMap, identityName, launcher);
           } 
       }
       return ( Util.size(approvals) > 0 ) ? approvals : null;
    
  </Source>
  </Rule>
  <Rule created="1603302493539" id="0a111e58754c15ea81754c468d63018b" language="beanshell" modified="1604263671329" name="LCM Build Identity Approvers">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e58754c15ea81754c46893c0168" name="Approval Library"/>
    </ReferencedRules>
    <Source>
    
       import sailpoint.object.ApprovalSet;
       import sailpoint.object.ProvisioningPlan;
       import sailpoint.object.WorkItem.State;
       import sailpoint.workflow.IdentityLibrary;
       import sailpoint.tools.Util;

       //
       // Attributes needed in the rule context: 
       //
       // plan - ProvisioningPlan object 
       //
       // approvalScheme - String indicating how approvals should be generated
       //   none - disabled
       //   manager - the current manager gets the approval
       //   newManager - the current manager if the manager changd
       //   securityOfficer - the configured security officer
       // 
       // approvalSet - An ApprovalSet representing the "cart"
       //
       // fallbackApprover - String representing who gets the approval
       //                    if we can't resolve one.  
       //
       // identityName - name of the identity being operated on
       //
       // launcher - name of the identity that launched the request
       //
       // securityOfficerName - The name of the securityOfficer to be used
       //                       for approvals.
       //

       // Not all callers pass in securityOfficerName.  If not defined, just set
       // it to null so we don't run into an error when we try to reference it.
       if (void == securityOfficerName) {
           securityOfficerName = null;
       }

       List approvers = new ArrayList();
       if ( approvalSet != null ) {
           List items = approvalSet.getItems();
           // By default there is one item for all of the edits
           ApprovalItem item = null;
           if ( Util.size(items) > 0 ) 
               item = items.get(0); 

           if ( item != null ) {
               approvers = getApproverNames(approvalScheme, item, plan, identityName, securityOfficerName);
               if ( approvers != null &amp;&amp; approvers.size() == 0 &amp;&amp; fallbackApprover != null ) {
                   if ( log.isDebugEnabled() ) { 
                       log.debug("Approver could not be resolved using fallbackApprover '"+fallbackApprover+"'.");
                   }
                   approvers.add(fallbackApprover);
               } 
               // If the launcher is an approver remove them from the list
               if ( approvers != null &amp;&amp; approvers.contains(launcher) ) {
                   Map args = wfcontext.getArguments();
                   String esig = null;
                   if ( args != null ) 
                       esig = (String)args.get("approverElectronicSignature");
 
                   if ( !IdentityLibrary.isElectronicSignatureEnabled(wfcontext) &amp;&amp; Util.isNullOrEmpty(esig) ) {
                       approvers.remove(launcher);
                       // If this is the only approver automaticaly
                       // mark the item approved.
                       if ( Util.size(approvers) == 0 ) {
                           item.setState(WorkItem.State.Finished);
                           item.setOwner(launcher);
                       }
                   }
               }
           }
       }
       return approvers;
    
  </Source>
  </Rule>
  <Rule created="1603302493653" id="0a111e58754c15ea81754c468dd5018c" language="beanshell" modified="1604263671437" name="LCM Validate Identity Name" type="Validation">
    <Source>
    
      import sailpoint.api.*;
      import sailpoint.object.*;
      import sailpoint.tools.*;
      import sailpoint.api.*;
      import sailpoint.web.messages.MessageKeys;

      List messages = new ArrayList();
      QueryOptions qo = new QueryOptions();
      String trimValue = (value != null) ? ((String)value).trim() : null;
      if (trimValue == null || "".equals(trimValue)) {
          Message msg = new Message();
          msg.setKey(MessageKeys.LCM_CREATE_IDENTITY_NO_NAME_ERROR);
          messages.add(msg);
      } else {
          Filter filter  = Filter.or(Filter.eq("id", trimValue), Filter.ignoreCase(Filter.eq("name", trimValue)));
          qo.add(new Filter[]{filter});
          qo.addFilter(ObjectUtil.buildWorkgroupInclusiveIdentityFilter());
          int count = SailPointFactory.getCurrentContext().countObjects(Identity.class,qo);
          if (count>0) {
              Message msg = new Message();
              msg.setKey(MessageKeys.LCM_CREATE_IDENTITY_NAME_ERROR);
              messages.add(msg);
          }
      }
      return messages;
    
  </Source>
  </Rule>
  <Rule created="1603302493768" id="0a111e58754c15ea81754c468e48018d" language="beanshell" modified="1604263671559" name="LCM Validate Password" type="Validation">
    <Source>
    
      import java.util.*;
      import sailpoint.api.PasswordPolice;
      import sailpoint.api.PasswordPolicyException; 
      
      List errors = null;
      
      try {
          PasswordPolice pp = new PasswordPolice(context);
          pp.checkPassword(null, value, false);
      }
      catch (PasswordPolicyException ppe) {
          errors = new ArrayList();
          errors.addAll(ppe.getAllMessages());
      }
      
      return errors;
    
  </Source>
  </Rule>
  <Rule created="1603302494177" id="0a111e58754c15ea81754c468fe1018e" language="beanshell" modified="1604263671681" name="LCM Build Identity ApprovalSet">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e58754c15ea81754c46893c0168" name="Approval Library"/>
    </ReferencedRules>
    <Source>
    
      import sailpoint.object.ProvisioningPlan;
      import sailpoint.object.ProvisioningPlan.AttributeRequest;
      import sailpoint.object.ProvisioningPlan.AccountRequest;
      import sailpoint.object.ApprovalSet;
      import sailpoint.object.ApprovalItem;
      import sailpoint.object.Attributes;
      import sailpoint.tools.Util;

      ApprovalSet set = new ApprovalSet();
      if ( plan != null ) {
          List accountRequests = plan.getAccountRequests();
          for ( AccountRequest request : accountRequests ) {
              ApprovalItem item = new ApprovalItem();
              item.setApplication(request.getApplication());
              item.setInstance(request.getInstance());
              item.setNativeIdentity(request.getNativeIdentity());
              item.setOperation(request.getOperation().toString());
              List attrRequestFlat = flattenAttributeRequests(request.getAttributeRequests());
              if ( attrRequestFlat != null ) {
                  item.setValue(attrRequestFlat);
              } 
              Attributes attributes = getAttributeRequestArguments(request.getAttributeRequests());
              item.setAttributes(attributes);
              
              // for these requests comments come in on the plan
              String comments = plan.getComments();
              if ( Util.getString(comments) != null ) {
                  item.setRequesterComments(comments);
              }
              set.add(item);
          }

          // while we are here lets annotate the plan with previousValues
          if ( flow.equals("IdentityEditRequest") ) {
              AccountRequest iiqRequest = plan.getAccountRequest("IIQ");    
              if ( iiqRequest != null ) {
                  List attributeRequests = iiqRequest.getAttributeRequests();
                  if ( Util.size(attributeRequests) > 0 ) {
                      Identity id = context.getObject(Identity.class, identityName);
                      if ( id != null )  {
                          for ( AttributeRequest req : attributeRequests ) {
                              String name = req.getName();
                              if ( name != null ) {
                                  // We have to be carefull here, if we see manager display
                                  // the displayName
                                  Object prevValue = id.getAttribute(name);
                                  if ( prevValue != null ) {
                                      if (name.equals("manager") ) {
                                          String displayName = getIdentityProperty((String)prevValue, "displayName");
                                          if ( displayName != null ) {
                                              prevValue = displayName;
                                          }
                                      }
                                      else if (prevValue instanceof Identity) {
                                          prevValue = (String)prevValue.getDisplayableName();
                                      }
                                      else  if(prevValue instanceof List) {
                                          /* Thanks to type erasure there is no way for us to write something like
                                           * prevValue instanceof List&lt;Identity> so break it into steps.  Check if
                                           * prevValue is a List.  If it has any elements get the first one. If that
                                           * is an instance of Identity then assume the rest of the elements are too
                                           * and then build a List of displayable names, because that is what we do
                                           * with Identitys. */
                                          List prevValueList = (List) prevValue;
                                          if(prevValueList.size() > 0) {
                                              if(prevValueList.get(0) instanceof Identity) {
                                                  List identityIds = new ArrayList(prevValueList.size());
                                                  for (Object value : prevValueList) {
                                                      Identity identity = (Identity) value;
                                                      identityIds.add(identity.getDisplayableName());
                                                  }
                                                  prevValue = identityIds;
                                              }
                                          }
                                      }
                                      req.put(ProvisioningPlan.ARG_PREVIOUS_VALUE, prevValue);
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      return set;
    
  </Source>
  </Rule>
  <Rule created="1603302494347" id="0a111e58754c15ea81754c46908b018f" language="beanshell" modified="1604263671792" name="Objects in Requestor&apos;s Authorized Scopes" type="RequestObjectSelector">
    <Description>This rule returns either a Filter object that will be used to search for objects in the requestor's authorized scopes, the boolean value 'true' to indicate that everything should be returned (i.e. no restrictions) 
or the boolean value 'false' to indicate that no objects are available for this user</Description>
    <Signature returnType="sailpoint.object.QueryInfo"/>
    <Source>import sailpoint.api.ScopeService;
      

      ScopeService scopeService = new ScopeService(context);
      return scopeService.getControlledScopesQueryInfo(requestor);</Source>
  </Rule>
  <Rule created="1603302494479" id="0a111e58754c15ea81754c46910f0190" language="beanshell" modified="1604263671905" name="Objects in Requestee&apos;s Assigned Scope" type="RequestObjectSelector">
    <Description>This rule returns a Filter that restricts objects to those in the requestee's assigned scope</Description>
    <Signature returnType="sailpoint.object.QueryInfo"/>
    <Source>import sailpoint.api.ScopeService;
      import sailpoint.object.Identity;
      import sailpoint.object.Scope;
      import sailpoint.object.QueryOptions;
      import sailpoint.object.QueryInfo;

      ScopeService scopeService = new ScopeService(context);
      QueryInfo scopeQueryInfo;
      if (requestee == null) {
          scopeQueryInfo = new QueryInfo(new QueryOptions());
      } else {
          scopeQueryInfo = scopeService.getAssignedScopeQueryInfo(requestee);
      }



      
      return scopeQueryInfo;</Source>
  </Rule>
  <Rule created="1603302494643" id="0a111e58754c15ea81754c4691b30191" language="beanshell" modified="1604263672021" name="Objects in Requestor&apos;s Authorized Scopes or Requestee&apos;s Assigned Scope" type="RequestObjectSelector">
    <Description>This rule returns a Filter that restricts roles to those in the requestor's authorized scopes or the requestee's assigned scope</Description>
    <Signature returnType="sailpoint.object.QueryInfo">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="requestor" type="sailpoint.object.Identity">
          <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
        </Argument>
        <Argument name="requestee" type="sailpoint.object.Identity">
          <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="filter">
          <Description>
          A Filter object that will be used to search for accessible objects.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
    
        import sailpoint.api.ScopeService;
        import sailpoint.object.Filter;
        import sailpoint.object.Identity;
        import sailpoint.object.QueryInfo;
        import sailpoint.object.QueryOptions;        

        ScopeService scopeService = new ScopeService(context);
        QueryInfo requestorQueryInfo =  scopeService.getControlledScopesQueryInfo(requestor);
        QueryInfo requesteeQueryInfo;
        if (requestee == null) {
            requesteeQueryInfo = null;
        } else {
            requesteeQueryInfo =  scopeService.getAssignedScopeQueryInfo(requestee);
        }

        QueryInfo scopeQueryInfo;
        if (requesteeQueryInfo == null || requesteeQueryInfo.isReturnNone()) {
            // Either no requestee was available or the requestee doesn't have anything in scope.  
            // Only apply the requestor QueryInfo in either case.
            scopeQueryInfo = requestorQueryInfo;
        } else if (requestorQueryInfo != null &amp;&amp; !requestorQueryInfo.isReturnNone()) {
            if (requestorQueryInfo.isReturnAll() || requesteeQueryInfo.isReturnAll()) {
                // If either the requestor or requestee has access to everything create a QueryInfo that grants
                // access to everything
                scopeQueryInfo = new QueryInfo(new QueryOptions());
            } else {
                // Both requestee and requestor filters exist so 'or' them
                scopeQueryInfo = new QueryInfo(Filter.or(requestorQueryInfo.getFilter(), requesteeQueryInfo.getFilter()), false);
            }
        } else {
            // The requestor doesn't have access to anything so only return whatever the requestee has access to
            scopeQueryInfo = requesteeQueryInfo;
        }

        return scopeQueryInfo;
    
  </Source>
  </Rule>
  <Rule created="1603302494755" id="0a111e58754c15ea81754c4692230192" language="beanshell" modified="1604263672155" name="Objects Owned by the Requestor" type="RequestObjectSelector">
    <Description>This rule returns a Filter that restricts objects to those that the requestor or one of their workgroups owns</Description>
    <Signature returnType="sailpoint.object.QueryInfo">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="requestor" type="sailpoint.object.Identity">
          <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
        </Argument>
        <Argument name="requestee" type="sailpoint.object.Identity">
          <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the objects that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected object.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="filter">
          <Description>
          A Filter object that will be used to search for accessible Objects.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
    
      import sailpoint.object.Filter;
      import sailpoint.object.Identity;
      import sailpoint.object.QueryOptions;
      import sailpoint.object.QueryInfo; 
      return new QueryInfo(QueryOptions.getOwnerScopeFilter(requestor, "owner"), false);
    
  </Source>
  </Rule>
  <Rule created="1603302494834" id="0a111e58754c15ea81754c4692720193" language="beanshell" modified="1604263672279" name="All Objects" type="RequestObjectSelector">
    <Description>Allows all objects to be selected (no filtering)</Description>
    <Signature returnType="sailpoint.object.Filter">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="requestor" type="sailpoint.object.Identity">
          <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
        </Argument>
        <Argument name="requestee" type="sailpoint.object.Identity">
          <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="filter">
          <Description>
          A Filter object that will be used to search for accessible request objects.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.QueryInfo;

return new QueryInfo(null, false);</Source>
  </Rule>
  <Rule created="1603302497028" id="0a111e58754c15ea81754c469b0401e5" language="beanshell" modified="1604263672398" name="Identity Report Form Customizer" type="ReportCustomizer">
    <Description>
    This rule populates a form with fields for the standard and extended identity attributes.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="locale">
          <Description>
          The current user's locale
        </Description>
        </Argument>
        <Argument name="report">
          <Description>
          The base report
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
       
        import sailpoint.object.*;
        import sailpoint.reporting.ReportingLibrary;

        ObjectConfig identityConfig = ObjectConfig.getObjectConfig(Identity.class);
        List standardAttributes = new ArrayList();
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("firstname"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("lastname"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("displayName"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("email"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("manager"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("inactive"));

        ReportingLibrary.addAttributes(context, report, Identity.class, standardAttributes, null,
          "Identity Attributes", locale, "id");

        List extendedAttrs = new ArrayList();
        for(ObjectAttribute att : identityConfig.getSearchableAttributes()){
          if (!att.isStandard())
            extendedAttrs.add(att);
        }

        for(ObjectAttribute att : identityConfig.getMultiAttributeList()){
            extendedAttrs.add(att);
        }

        ReportingLibrary.addAttributes(context, report, Identity.class, extendedAttrs, null,
          "Identity Extended Attributes", locale, "id");


       
</Source>
  </Rule>
  <Rule created="1603302497185" id="0a111e58754c15ea81754c469ba101e8" language="beanshell" modified="1604263672515" name="Identity Entitlement Identity Report Form Customizer" type="ReportCustomizer">
    <Description>
    This rule populates a form with fields for the standard and extended identity attributes accessed through an identity entitlement.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="locale">
          <Description>
          The current user's locale
        </Description>
        </Argument>
        <Argument name="report">
          <Description>
          The base report
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
       
        import sailpoint.object.*;
        import sailpoint.reporting.ReportingLibrary;

        ObjectConfig identityConfig = ObjectConfig.getObjectConfig(Identity.class);
        List standardAttributes = new ArrayList();
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("firstname"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("lastname"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("displayName"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("email"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("manager"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("inactive"));

        ReportingLibrary.addAttributes(context, report, IdentityEntitlement.class, standardAttributes, "identity",
          "Identity Attributes", locale, "id");


        List extendedAttrs = new ArrayList();
        for(ObjectAttribute att : identityConfig.getSearchableAttributes()){
          if (!att.isStandard())
            extendedAttrs.add(att);
        }

        for(ObjectAttribute att : identityConfig.getMultiAttributeList()){
            extendedAttrs.add(att);
        }

        ReportingLibrary.addAttributes(context, report, IdentityEntitlement.class, extendedAttrs, "identity",
          "Identity Extended Attributes", locale, "id");


       
</Source>
  </Rule>
  <Rule created="1603302497308" id="0a111e58754c15ea81754c469c1c01ea" language="beanshell" modified="1604263672627" name="Account Report Form Customizer" type="ReportCustomizer">
    <Description>
    This rule populates a form with fields for all searchable account fields.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="locale">
          <Description>
          The current user's locale
        </Description>
        </Argument>
        <Argument name="report">
          <Description>
          The base report
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
       
        import sailpoint.object.*;
        import sailpoint.reporting.ReportingLibrary;

        ObjectConfig linkConfig = ObjectConfig.getObjectConfig(Link.class);
        ReportingLibrary.addAttributes(context, report, Link.class, linkConfig.getSearchableAttributes(), null,
          "Account Properties", locale);
       
</Source>
  </Rule>
  <Rule created="1603302497711" id="0a111e58754c15ea81754c469daf0204" language="beanshell" modified="1604263672751" name="Certification Report Customizer" type="ReportCustomizer">
    <Source>
       
        import sailpoint.object.*;
        import sailpoint.tools.Util;
        import sailpoint.web.messages.MessageKeys;
        if (Util.otob(taskDefinition.getArgument("exclusions"))){
          report.setDisablePreview(true);
          report.setDisablePreviewMessage(MessageKeys.REPT_CERT_PREVIEW_DISABLED_EXCLUSIONS);
        } else {
          report.setDisablePreview(false);
          report.setDisablePreviewMessage(null);
        }

       
</Source>
  </Rule>
  <Rule created="1603302498148" id="0a111e58754c15ea81754c469f64021c" language="beanshell" modified="1604263672863" name="Privileged Access Report Customizer" type="ReportCustomizer">
    <Description>
    This rule populates a form with fields for the standard and extended identity attributes as well as
    a form for defining the 'privileged' identity attribute.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="locale">
          <Description>
          The current user's locale
        </Description>
        </Argument>
        <Argument name="report">
          <Description>
          The base report
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
       
        import sailpoint.object.*;
        import sailpoint.reporting.ReportingLibrary;

        ObjectConfig linkConfig = ObjectConfig.getObjectConfig(Link.class);
        ReportingLibrary.addAttributes(context, report, Link.class, linkConfig.getSearchableAttributes(), null,
          "Privileged Account Attributes", locale, "id");


        ObjectConfig identityConfig = ObjectConfig.getObjectConfig(Identity.class);
        List standardAttributes = new ArrayList();
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("firstname"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("lastname"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("displayName"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("email"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("manager"));
        standardAttributes.add(identityConfig.getObjectAttributeMap().get("inactive"));

        ReportingLibrary.addAttributes(context, report, Identity.class, standardAttributes, "identity",
          "Identity Properties", locale, "id");

        List extendedAttrs = new ArrayList();
        for(ObjectAttribute att : identityConfig.getSearchableAttributes()){
          if (!att.isStandard())
            extendedAttrs.add(att);
        }

        for(ObjectAttribute att : identityConfig.getMultiAttributeList()){
            extendedAttrs.add(att);
        }

        ReportingLibrary.addAttributes(context, report, Identity.class, extendedAttrs, "identity",
          "Identity Extended Properties", locale, "id");
       
</Source>
  </Rule>
  <Rule created="1603302498209" id="0a111e58754c15ea81754c469fa0021d" language="beanshell" modified="1604263672975" name="Privileged Access Report Validation Rule" type="ReportValidator">
    <Description>
      This rule validates the Privileged Access Report Form
    </Description>
    <Signature returnType="java.util.List">
      <Inputs>
        <Argument name="context">
          <Description>
            A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
          </Description>
        </Argument>
        <Argument name="report">
          <Description>
            The report object
          </Description>
        </Argument>
        <Argument name="form">
          <Description>
            The submitted sailpoint Form object.
          </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="messages">
          <Description>
            A list of error messages.
          </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
      
       import java.util.*;
       import sailpoint.object.*;
       import sailpoint.tools.Message;
       List messages = new ArrayList();

       Form.Section section = form.getSection("Privileged Account Attributes");
       if (section != null) {
         boolean found = false;
         for(FormItem item : section.getItems()){
           Field field = (Field)item;
           if(field.getValue() != null &amp;&amp; !field.getValue().equals("") &amp;&amp; !field.getValue().equals("null")) {
             found = true;
           }
         }

         if (!found) {
           messages.add(Message.localize("rept_priv_access_err_no_attr"));
         }
       } else {
         messages.add(Message.localize("rept_priv_attr_setup_needed"));
       }

       return messages;
      
  </Source>
  </Rule>
  <Rule created="1603302504622" id="0a111e58754c15ea81754c46b8ae0299" language="beanshell" modified="1604263673154" name="WindowsActivityRuleLibrary">
    <Source>
    
      import java.util.HashMap;
      import java.util.ArrayList;
      import java.util.List;
      import sailpoint.object.ApplicationActivity;
      import sailpoint.object.ApplicationActivity.Action;
      import sailpoint.tools.xml.*;

      public static String ACCESSES = "Accesses";
      public static String PRIVS = "Privileges";

      /**
       * Build a name,value Map pairing of the data found
       * in the Message field of the windows event.
       * Most of the low-level data is usually stored 
       * there using a "name : value \n" format, so parse
       * out those values so we can use them when 
       * building our activity.
       */
      public HashMap buildMapFromMessage(String message) {
  
          HashMap attributeMap = new HashMap();
          if ( message == null ) return attributeMap;

          StringTokenizer st = new StringTokenizer(message, "\n");
          int tokenNum = 0;
          while ( st.hasMoreTokens() ) {
              tokenNum++;
              String token = st.nextToken();
//System.out.println("token :" + token);
              String[] values = token.split(":");
              if ( values == null ) continue;
              if ( values.length == 2 ) {
                  String name = values[0];
                  String value = values[1];
                  if ( ( name != null ) &amp;&amp; ( value != null ) ) {
//System.out.println("name: " + name.trim() + " value: " + value.trim());
                      attributeMap.put(name.trim(), value.trim());
                  }
              } else 
              if ( (values.length == 1) &amp;&amp; (tokenNum == 1) ) {
                  String name = values[0];
                  attributeMap.put("action", name.trim());
              }
          }
          // Parse out privs 
          addPrivileges(attributeMap, message); 

          return attributeMap;
      }

      /** 
       * Some events, mostly Object Access events contain
       * Accesses, Privleges that need to be parsed further.
       * This is called, when we build a Map if the Message.
       */
      public void addPrivileges(HashMap extraInfo, String message) {

          if ( message== null ) return;
          int i = message.indexOf(ACCESSES);
          if ( i == -1 ) {
//System.out.println(ACCESSES + " not found");
              return;
          }
          int j = message.indexOf(PRIVS);
          if ( j == -1 ) {
//System.out.println(PRIVS + " not found");
              return;
          }

          List accesses = new ArrayList();
          String lastBlock = message.substring(i+ACCESSES.length(), j-1);
          if ( lastBlock != null ) {
//System.out.println("***lastBlock: " + lastBlock);
              StringTokenizer st = new StringTokenizer(lastBlock, "\n");
              while ( st.hasMoreTokens() ) {
                  String access = st.nextToken();
                  if ( access != null ) {
                      String trimed = access.trim();
                      if ( trimed.length() > 0 ) {
//System.out.println("access: '" + trimed + "'");
                          accesses.add(trimed);
                      }
                  }
              }
          }

          if ( accesses.size() > 0 ) {
              extraInfo.put(ACCESSES, accesses);
          }
      }

      /**
       * Given the eventCode from the native windows event
       * map it to our Action.
       */
      public Action resolveAction(Integer eventCode, HashMap extraInfo) {
          Action action = null;

          if ( eventCode == null ) {
              return;
          }

          try {
              switch(eventCode) {
                  case 538:
                      // logout
                      action = Action.Logout;
                      break;
                  case 528:
                  case 540:
                      // login
                      action = Action.Login;
                      break;
                  case 564:
                      // object delted
                      action = Action.Delete;
                      break;
                  case 560:
                      // object open
                      // Very generic must dig in an check permissions
                      if (containsAccess("WriteAttributes", extraInfo))
                          action = Action.Update;
                      else
                      if ( containsAccess("DELETE", extraInfo) ) 
                          action = Action.Delete;
                      else 
                          action = Action.Read;
                      break;
                  default: 
                      // not sure we should even have a default case?
                      action = Action.Read;
                      break;
              }
          } catch(Exception e) {
              action = null;
          }
          return action;
      }

      /** 
       * Using the resolved action, use the data in the extraInfo
       * map to come up with a target. ( the thing that was acted upon)
       */
      public String resolveTarget(Action action, HashMap extraInfo) {

          String target = null;    
          if ( ( action == null ) || ( extraInfo == null )  ) {
              return target;
          }

          if ( ( action.equals(Action.Login) ) ||
               ( action.equals(Action.Logout) ) ) {
              target = (String)extraInfo.get("Domain");
          } else {
              target = (String)extraInfo.get("Object Name");
          }

          if ( target == null ) target = "unResolved";
          return target;
      }


      /** 
       * Dig into the extra info and see if the event has referece to 
       * the past in access. 
       */
      private boolean containsAccess(String access, HashMap extraInfo) {

          boolean contains = false;
          if ( extraInfo == null ) return contains;

          ArrayList accesses = (ArrayList)extraInfo.get(ACCESSES); 
          if ( accesses != null ) {
              for ( String access: accesses ) {
                  if ( access != null ) {
                      if ( access.compareTo(access) == 0 ) {
                          return true;
                      }
                  }
              }        
          }
          return contains;
      }
    
  </Source>
  </Rule>
  <Rule created="1603302504959" id="0a111e58754c15ea81754c46b9ff02a0" language="beanshell" modified="1604263673535" name="System Configured Locale Rule" type="FieldValue">
    <Description>
    This rule returns the locales configured in the System Configuration.
  </Description>
    <Signature returnType="java.util.List">
      <Inputs>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="locales">
          <Description>
          A list containing the locales found in the System Configuration.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
      import java.util.*;
     Map sysConfig = context.getConfiguration().getAttributes();
     List locales = sysConfig.get("supportedLanguages");
     return locales;
</Source>
  </Rule>
  <Rule created="1603302505049" id="0a111e58754c15ea81754c46ba5902a1" language="beanshell" modified="1604263673704" name="Report Completion Notification" type="TaskEventRule">
    <Description>
    This rule sends a notification email when a report is completed.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="taskResult">
          <Description>
          The TaskResult object
        </Description>
        </Argument>
        <Argument name="event">
          <Description>
          The TaskEvent object
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="taskResult">
          <Description>The resulting task result object, or null if no update is required.</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
      
        import sailpoint.object.*;
        import java.util.*;

        String identity = (String)event.getAttribute(TaskEvent.ATTR_EMAIL_RECIP);

        if (identity != null){

          Identity identity = context.getObjectByName(Identity.class, identity);
          if (identity == null)
            return result;

          List emailAddresses = new ArrayList();
          emailAddresses.add(identity.getEmail());
          EmailOptions options = new EmailOptions(emailAddresses, null);
          options.setSendImmediate(true);

          Map emailVars = new HashMap();
          emailVars.put("reportName", taskResult.getName());
          options.setVariables(emailVars);

          String templateName = (String)context.getConfiguration().get(Configuration.REPORT_COMPLETION_EMAIL_TEMPLATE);
          EmailTemplate et = context.getObjectByName(EmailTemplate.class, templateName);

          context.sendEmailNotification(et, options);
        }

        return null;
      
</Source>
  </Rule>
  <Rule created="1603302505457" id="0a111e58754c15ea81754c46bbf102a2" language="beanshell" modified="1604263673826" name="Report Scorecard Value Renderer">
    <Description>
      This rule renders report columns which pull values from a Scorecard object.
    </Description>
    <Source>
      
       import java.util.*;
       import sailpoint.object.*;

       Integer score = null;
       if(value!=null) {
					score = value.getScore(column.getField());
			 }

       return score != null ? score.toString() : null;
      
  </Source>
  </Rule>
  <Rule created="1603302505629" id="0a111e58754c15ea81754c46bc9d02a4" language="beanshell" modified="1604263673940" name="Task Completion Email Rule" type="TaskCompletion">
    <Description>
      Example rule to perform Post Action after Task Completion
    </Description>
    <Signature>
      <Inputs>
        <Argument name="context">
          <Description>
            A sailpoint.api.SailPointContext object 
          </Description>
        </Argument>
        <Argument name="log">
          <Description>
            The log object associated with the SailPointContext.
          </Description>
        </Argument>
        <Argument name="result">
          <Description>
            result of task.
          </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
      
          import java.util.*;
          import sailpoint.tools.Util;
          import sailpoint.tools.GeneralException;
          import sailpoint.object.Configuration;
          import sailpoint.object.EmailOptions;
          import sailpoint.object.EmailTemplate;
          import sailpoint.object.TaskResult;
          import sailpoint.object.Identity;
          import sailpoint.object.TaskDefinition;
          import sailpoint.api.MessageRepository;
          import sailpoint.api.Emailer;
          import sailpoint.api.BasicMessageRepository;
          import sailpoint.api.ObjectUtil;
          import sailpoint.api.SailPointContext;

          MessageRepository _errorHandler;

          /**
           * Method to send email
          */
          private void sendEmailOnTaskCompletion(String emailTemplate, ArrayList recipients, TaskResult result, SailPointContext context) {
              String message = "";
              String status = "";
              TaskDefinition def;
              Configuration sysConfig;

              def = result.getDefinition();
              EmailTemplate notifyEmail =  context.getObjectByName(EmailTemplate.class, emailTemplate);
              if (null == notifyEmail) {
                  log.error ("From Task Completion Email Rule: ERROR: could not find email template [ " + emailTemplate + "]");
                  return;
              }
              notifyEmail = (EmailTemplate) notifyEmail.deepCopy(context);
              if (null == notifyEmail) {
                  log.error ("From Task Completion Email Rule: ERROR: failed to deepCopy template [ " + emailTemplate + "]");
                  return;
              }
              // For now, we'll just use a map with a few pre-selected properties.
              Map mArgs = new HashMap();
 
              mArgs.put("taskResult", result);
              mArgs.put("taskName", def.getName());
              mArgs.put("taskDesc", def.getDescription());
              if (result.isError()) {
                  status = "Error";
              }
              else  if (result.isWarning()) {
                  status = "Warning";
              }
              else if (result.isSuccess()) {
                  status = "Success";
              }
 
              mArgs.put("taskStartTime", result.getLaunched() );
              mArgs.put("taskEndTime", result.getCompleted() );
              mArgs.put("status", status);
              if (result.getMessages() != null) {
                  mArgs.put("message", result.getMessages());
              }
              mArgs.put ("resultId", result.getId());

              EmailOptions ops = new EmailOptions(recipients, mArgs);
              new Emailer(context, _errorHandler).sendEmailNotification(notifyEmail , ops);
          }

          private boolean isEmailNotificationEnabled(TaskResult result, Configuration sysConfig) {
              boolean sendEmail = false;
              String notifyStr = null;

              TaskDefinition def = result.getDefinition();
              notifyStr = (String) def.getString(Configuration.TASK_COMPLETION_EMAIL_NOTIFY);

              if (notifyStr == null || notifyStr.equals("Disabled")) {
                  // if Disabled in TaskDef, defer to System Config
                  notifyStr = sysConfig.getString(Configuration.TASK_COMPLETION_EMAIL_NOTIFY);
              }

              if (notifyStr != null) {
                  if (notifyStr.equals("Always") ||
                      ((notifyStr.equals("Failure")) &amp;&amp; result.isError()) || 
                      ((notifyStr.equals("Warning")) &amp;&amp;
                       (result.isWarning() || result.isError()))) {
                      sendEmail = true;
                  }
              }
                      
              return sendEmail;
          }

          private Object getIdentityNames(TaskResult result, Configuration sysConfig) {
              
              TaskDefinition def = result.getDefinition();
              Object identityNames = def.getArgument(Configuration.TASK_COMPLETION_RECIPIENTS);
              if (identityNames == null) {
                  identityNames = sysConfig.get(Configuration.TASK_COMPLETION_RECIPIENTS);
              }
              return identityNames;
          }

          private String getEmailTemplate(TaskResult result, Configuration sysConfig) {
              TaskDefinition def = result.getDefinition();
              String emailTemplate = def.getString(Configuration.TASK_COMPLETION_EMAIL_TEMPLATE);
              if (emailTemplate == null) {
                  emailTemplate = sysConfig.getString(Configuration.TASK_COMPLETION_EMAIL_TEMPLATE);
                  if (emailTemplate == null)
                      emailTemplate = Configuration.DEFAULT_TASK_COMPLETION_EMAIL_TEMPLATE;
              }
              return emailTemplate;
          }

          private List getEmailAddress (String identityName, SailPointContext context) {
              Identity identity = context.getObjectByName(Identity.class, identityName);
              if (identity != null) 
              {
                  List addresses = ObjectUtil.getEffectiveEmails(context, identity);
                  if (!Util.isEmpty(addresses)) {
                      return(addresses);
                  }
                  else
                  {
                     if(log.isWarnEnabled()) {
                         log.warn("From Task Completion Email Rule: Missing Email Address for Email Recipient: " + identityName );
                     }
                  }
              }
              return (null);
          }

          private ArrayList getEmailRecipient (Object identityNames, SailPointContext context) {
              List recipients;
              String val = null;
              StringTokenizer st = null;
              if (identityNames != null) {
                  recipients = new ArrayList ();
                  // From Task definition, single identity
                  if (identityNames instanceof String  &amp;&amp; !identityNames.contains(",")) {
                      List addresses = getEmailAddress (identityNames.toString(), context);
                      if (addresses != null) {
                         recipients.addAll (addresses);
                      }
                  }
                  // From Task definition, multiple identities
                  else if (identityNames instanceof String  &amp;&amp; identityNames.contains(",") == true) {
                      List nameList = Util.csvToList(identityNames);
                      for (String identityName : nameList) {
                          List addresses = getEmailAddress (identityName, context);
                          if (addresses != null) {
                              recipients.addAll (addresses);
                          }
                      }  
                  } 
                  // From system configuration single or multiple identities it comes as list
                  else if (identityNames instanceof List) {
                      for (String identityName : identityNames) {
                          List addresses = getEmailAddress (identityName, context);
                          if (addresses != null) {
                              recipients.addAll(getEmailAddress (identityName, context));
                          }
                      }
                  }
              }
              return (recipients);
          }

          // Main
          Configuration sysConfig = context.getConfiguration();
          boolean sendEmailNotify = isEmailNotificationEnabled(result, sysConfig);
    
          if (sendEmailNotify) {
              // jsl - why consturct this here, just make it in
              // sendEmailOnTaskCompletion where it is used?
              // why do this at all since no one consumes it?
              _errorHandler = new BasicMessageRepository();

              Object identityNames = getIdentityNames(result, sysConfig);
              String emailTemplate = getEmailTemplate(result, sysConfig);
              List recipients = getEmailRecipient(identityNames, context);

              if (recipients != null &amp;&amp; !Util.isEmpty(recipients)) {
                    // Send Email
                   sendEmailOnTaskCompletion(emailTemplate, recipients, result, context);
              }
              else {
                  if(log.isWarnEnabled()) {
                      log.warn("From Task Completion Email Rule: Cannot send task completion email Notification. Reason : Missing Email Address for Email Recipients");
                  }
              }
          }
    
    </Source>
  </Rule>
  <Rule created="1387809647533" id="0a111e58754c15ea81754c46bceb02a5" language="beanshell" modified="1604263674053" name="CEFTransformRule" type="ActivityTransformer">
    <Description>ActivityTransformation Rules are used by the LogFileCollector to transform fields parsed from a text file into our ApplicationActivity model.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="action">
          <Description>
          The field named action, which is the raw parsed.
          action field.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="mappedAction">
          <Description>
          A normalized ApplicationActivity.Action object.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.ApplicationActivity.Action;
import sailpoint.object.ApplicationActivity.Result;
import java.text.SimpleDateFormat;
import java.io;
import sailpoint.object.Configuration;
import java.util.List;

activity.setAction(Action.Grant);
activity.setResult(Result.Success);

//Dump out all params from CEF log entry to console
//System.out.println("CEFTransformRule: In rule");        
//System.out.println("CEFTransformRule: Timestamp=" +cef_timestamp);
//System.out.println("CEFTransformRule: Host=" +cef_host);
//System.out.println("CEFTransformRule: CEFVersion=" + cef_cefversion);
//System.out.println("CEFTransformRule: Vendor=" + cef_vendor);
//System.out.println("CEFTransformRule: Product=" + cef_product);
//System.out.println("CEFTransformRule: Version=" + cef_version);
//System.out.println("CEFTransformRule: Signature=" + cef_signature);
//System.out.println("CEFTransformRule: Name=" + cef_name);
//System.out.println("CEFTransformRule: Severity=" + cef_severity);
//System.out.println("CEFTransformRule: Explanation=" + cef_explanation);

//Find the user parameter in CEF Explanation field
//System.out.println("CEFTransformRule: Breaking down the parameter list.....:");

Object o= Configuration.getSystemConfig().getList(Configuration.ATT_CEF_USER_NAME);
List cefUserNames = null;
if (o instanceof List) {
            cefUserNames = (List)o;
}

for (String paramPair: cef_explanation.split("\\s(?=\\S*(?&lt;!\\\\)=)", 0)){
//	System.out.println("CEFTransformRule: Parameter pair found " + paramPair);
    for(String cefUser: cefUserNames){
        String cefUserParam = cefUser.concat("=.*");
        if (paramPair.matches(cefUserParam)) {
            cef_user = paramPair.split("=",2)[1];
//            System.out.println("CEFTransformRule: duser parameter found! " + cef_user);
        }
    }   
}

// Set activity values
activity.setUser(cef_user);
activity.setAction(Action.Login);
activity.setResult(Result.Success);
activity.setInfo("vendor=" + cef_vendor + " host=" + cef_host + " " + cef_explanation + " severity=" + cef_severity + " product=" + cef_product);
activity.setTarget(cef_name);

// Set timestamp from CEF header, but add current year as this is not supplied
SimpleDateFormat f = new SimpleDateFormat("MMM dd hh:mm:ss yyyy");
defaultYear = Calendar.getInstance().get(Calendar.YEAR);
Date date = date = f.parse(cef_timestamp + " " + defaultYear);
activity.setTimeStamp(date);

return activity;</Source>
  </Rule>
  <Rule created="1388673847625" id="0a111e58754c15ea81754c46bd2d02a6" language="beanshell" modified="1604263674168" name="CEFActivityCorrelation" type="ActivityCorrelation">
    <Description>Rule to show how an CEF activity might be correlated back to an identity. In most cases, this rule will be providing enought information to the correlator so that it can find the Application link. In some cases, it might also be desireable to return something that points back to an Identity, which is also supported.</Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application where the activity was generated.
          An application may have more then one data source.
        </Description>
        </Argument>
        <Argument name="datasource">
          <Description>
          The data source that returned the activity.
        </Description>
        </Argument>
        <Argument name="activity">
          <Description>
          The activity object that was normalized by
          the data source and that we are trying to
          correlate back to one of our Identities.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="linkIdentity">
          <Description>
          A string that represents the link's identity attribute.
        </Description>
        </Argument>
        <Argument name="linkName">
          <Description>
          A string that represents the link's displayName attribute.
        </Description>
        </Argument>
        <Argument name="linkAttributeName">
          <Description>
          A string that represents the NAME of an attribute that
          can be used to find the Link that maps back to this
          activity.  This attribute must also be supplied
          with the linkAttributeValue variable.
        </Description>
        </Argument>
        <Argument name="linkAttributeValue">
          <Description>
          A string that represents the VALUE of an attribute that
          can be used to find the Link that maps back to this
          activity. This attribute must also be supplied
          with the linkAttributeName variable.
        </Description>
        </Argument>
        <Argument name="identityName">
          <Description>
          The name of an Identity object.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
          A fully resolved Identity object in case the rule wants
          to do its own queries to locate the identity.
        </Description>
        </Argument>
        <Argument name="identityAttributeName">
          <Description>
          The name of the extended attribute that can be used
          to locate an existing identity.
        </Description>
        </Argument>
        <Argument name="identityAttributeValue">
          <Description>
          The value of the named extended attribute that can be used
          to locate an existing identity. This attribute is used
          together with the identityAttributeName argument.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.ApplicationActivity;
  import sailpoint.object.Configuration;
	
//  System.out.println("CEFActivityCorrelation: In Correlation Rule");

    Map returnMap = new HashMap();
    String user = activity.getUser();
	String cefLinkAttributeName = Configuration.getSystemConfig().getString(Configuration.ATT_CEF_LINK_ATTRIBUTE_NAME);
	
    if ( user != null ) {
//		System.out.println("CEFActivityCorrelation: Matching for user " + user);
        returnMap.put("linkAttributeName", cefLinkAttributeName);
        returnMap.put("linkAttributeValue", user);
//        System.out.println("returnMap " + returnMap);
    }

    return returnMap;</Source>
  </Rule>
  <Rule created="1603302505852" id="0a111e58754c15ea81754c46bd7c02a7" language="beanshell" modified="1604263674292" name="Application Builder">
    <Description>
    A rule to build and manipulate IdentityIQ application in a bulk.
    All duties are mentioned below.
    1. When create mode is selected, then it creates multiple application in a bulk by parsing csv file.
    2. When update mode is selected, then it updates the attribute map of existing application by parsing input csv file.
    3. When read mode is selected, then it reads all existing IdentityIQ application and export them to csv file.
       Exports considers only attributes of the application.
  </Description>
    <Signature returnType="TaskResult">
      <Inputs>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to
          query the database to save application object and task definitions.
        </Description>
        </Argument>
        <Argument name="log">
          <Description>
          The log object for logging.
        </Description>
        </Argument>
        <Argument name="inputParams">
          <Description>
          The input params object is map of attributes received from Task UI.
        </Description>
        </Argument>
        <Argument name="taskResult">
          <Description>
          The task result object required for updating the result.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
    
      import java.io.BufferedReader;
      import java.io.FileNotFoundException;
      import java.io.FileReader;
      import java.io.FileWriter;
      import java.io.IOException;
      import java.util.ArrayList;
      import java.util.Date;
      import java.util.HashMap;
      import java.util.LinkedHashMap;
      import java.util.List;
      import java.util.Map;
      import java.util.Set;
      import java.util.Iterator;
      import java.util.LinkedHashMap;
      import java.util.LinkedHashSet;
      import sailpoint.api.SailPointContext;
      import sailpoint.api.TaskManager;
      import sailpoint.connector.Connector;
      import sailpoint.connector.ConnectorFactory;
      import sailpoint.connector.DefaultApplicationFactory;
      import sailpoint.object.Application;
      import sailpoint.object.Attributes;
      import sailpoint.object.Identity;
      import sailpoint.object.Rule;
      import sailpoint.object.TaskDefinition;
      import sailpoint.object.TaskItemDefinition;
      import sailpoint.object.TaskSchedule;
      import sailpoint.object.TaskResult;
      import sailpoint.object.Filter;
      import sailpoint.object.QueryOptions;
      import sailpoint.object.Attributes;
      import sailpoint.object.AttributeDefinition;
      import sailpoint.object.Attributes;
      import sailpoint.object.Field;
      import sailpoint.object.Form;
      import sailpoint.object.Form.Section;
      import sailpoint.object.FormItem;
      import sailpoint.object.Schema;
      import sailpoint.tools.GeneralException;
      import sailpoint.tools.Message;
      import sailpoint.tools.Util;
      import sailpoint.tools.RFC4180LineIterator;
      import sailpoint.tools.RFC4180LineParser;
      import sailpoint.tools.Rfc4180CsvBuilder;
      import sailpoint.tools.Util;
      import sailpoint.tools.xml.XMLObjectFactory;

      // Private member variables
      private int applicationsCreated = 0;
      private int applicationsUpdated = 0;
      private int applicationsScanned = 0;
      private List applicationsExists = new ArrayList();
      private List applicationsNotFound = new ArrayList();
      private List applicationsFailed = new ArrayList();
      private List applicationObjects = new ArrayList();
      Map applicationMap = new LinkedHashMap();
      Set uniqueHeaders = new LinkedHashSet();

      // Private Input parameters
      private String filePath;
      private String applicationType;
      private String operation;
      private boolean triggerAccountAggregation;
      private boolean triggerGroupAggregation;
      private boolean skipTestConnection;
      private String launcher;
      private int applicationsPerAggregation = 10;

      // Public member variables
      /**
      * List of secret attributes used in different connector's application attribute.
      */
      Set secreteAttributes = new LinkedHashSet();
      String rowSeparator = "\n";
      private String docTypeHeader = "&lt;?xml version='1.0' encoding='UTF-8'?>" +
                             "\n&lt;!DOCTYPE Application PUBLIC \"sailpoint.dtd\" \"sailpoint.dtd\">" +
                             "\n&lt;Application>\n";
      private String docTypeFooter = "\n&lt;/Application>";
      private String schemasHeader = "Schemas";
      private String provisioningFormsHeader = "ProvisioningForms";
      private String create = "create";
      private String update = "update";
      private String read = "read";

      /////////// public methods for processing IdentityIQ applications. ///////////
      //////////////////////////////////////////////////////////////////////////////

      /**
       * Parse the input CSV file based on fix format.
       * and convert it to the attribute map for further processing.
       */
      public void parseInputFile() {
          log.debug("Entering parseInputFile()...");

          BufferedReader br = null;

          try {

              List fileHeaders = new ArrayList();
              Map attributeMap = null;
              br = new BufferedReader(new FileReader(filePath));

              RFC4180LineParser parser = new RFC4180LineParser(",");
              RFC4180LineIterator iterator = new RFC4180LineIterator(br);

              String fileRow = iterator.readLine();

              // Parse file headers
              if (Util.isNotNullOrEmpty(fileRow)) {
                  log.debug("File headers: " + fileRow);

                  fileHeaders = Util.csvToList(fileRow);
              } else {
                  throw new GeneralException("Headers not found. File's first line should be headers.");
              }
              // Parse CSV file data
              while ((fileRow = iterator.readLine()) != null) {
                  List fileRowList = Util.csvToList(fileRow);
                  attributeMap = new HashMap();
                  boolean isApplicationName = true;
                  String applicationName = "";

                  if (fileRowList != null) {
                      if (fileRowList.size() > fileHeaders.size()) {
                          throw new GeneralException("Mismach in row data and headers length. Affected row: " + fileRow);
                      }
                      // Attribute Map received from input file
                      for (int i = 0; i &lt; fileRowList.size(); i++) {
                          String fileRowData = (String)fileRowList.get(i);
                          if (Util.isNotNullOrEmpty(fileRowData)) {
                              if (isApplicationName) {
                                   applicationName = fileRowData;
                                   isApplicationName = false;
                              } else {
                                  if (fileRowData.equalsIgnoreCase("true") || fileRowData.equalsIgnoreCase("false")) {
                                      attributeMap.put(fileHeaders.get(i), Boolean.parseBoolean(fileRowData));
                                  } else {
                                      attributeMap.put(fileHeaders.get(i), fileRowData);
                                  }
                              }
                          }
                      }

                      if (Util.isNotNullOrEmpty(applicationName)) {
                         applicationMap.put(applicationName, attributeMap);
                      }
                  }
              }
          } catch (FileNotFoundException e) {
              throw new GeneralException("File parsing failed. " + e.getMessage(), e);
          } catch (IOException e) {
              throw new GeneralException("File parsing failed. " + e.getMessage(), e);
          } finally {
              try {
                  if (br != null) {
                      br.close();
                  }
              } catch (Exception ex) {
                  log.warn("Error while closing BufferedReader object. " + ex.getMessage);
              }
          }

          log.debug("Exiting parseInputFile()...");
      }

      /**
       * Create multiple IdentityIQ applications based on input application data.
       */
      private void createApplications() {
          log.debug("Entering createApplications()...");

          List aggregationappList = new ArrayList();

          for (Map.Entry entry : applicationMap.entrySet()) {
              String applicationName = (String) entry.getKey();
              Application application = context.getObjectByName(Application.class, applicationName);
              if (application != null) {
                  log.warn("The application '" + applicationName +"' already exists on the IdentityIQ server.");

                  applicationsExists.add(applicationName);
                  continue;
              }

              // Create new IdentityIQ application
              log.debug("Creating the application: " + applicationName);

              application = DefaultApplicationFactory.getDefaultApplicationByTemplate(applicationType);
              application.setCreated(new Date());
              application.setModified(new Date());
              application.setName(entry.getKey());
              application.setAuthoritative(false);
              application.setCaseInsensitive(true);
              application.setIcon("enterpriseIcon");
              application.setOwner(context.getObjectByName(Identity.class, launcher));

              try {
                  createOrUpdateApplications(entry, application, aggregationappList);
              } catch (Exception ex) {
                  applicationsFailed.add(application.getName());
                  log.error("Failed to create the application '" + applicationName + "'. " + ex.getMessage(), ex);

                  continue;
              }
          }

          // Perform account and group aggregation for remianing applications
          if (!aggregationappList.isEmpty()) {
              triggerAggregation(aggregationappList);
          }

          updateTaskResult();

          log.debug("Exiting createApplications()...");
      }

      /**
       * Update multiple IdentityIQ applications based on input application data.
       */
      private void updateApplications() {
          log.debug("Entering updateApplications()...");

          List aggregationappList = new ArrayList();

          for (Map.Entry entry : applicationMap.entrySet()) {
              String applicationName = (String) entry.getKey();
              Application application = context.getObjectByName(Application.class, applicationName);
              if (application == null) {
                  log.warn("The application '" + applicationName + "' is not found.");

                  applicationsNotFound.add(applicationName);
                  continue;
              }

              // Update existing IdentityIQ application
              log.debug("Updating the application: " + applicationName);

              try {
                  createOrUpdateApplications(entry, application, aggregationappList);
              } catch (Exception ex) {
                  applicationsFailed.add(application.getName());
                  log.error("Failed to update the application '" + applicationName + "'. " + ex.getMessage(), ex);

                  continue;
              }
          }

          // Perform account and group aggregation for remianing applications
          if (!aggregationappList.isEmpty()) {
              triggerAggregation(aggregationappList);
          }

          updateTaskResult();

          log.debug("Exiting updateApplications()...");
      }

      /**
       * Retriving the application object from IdentityIQ database for given application type and
       * updating the applicationMap which will be exported to csv file.
       */
      public void updateAttributesMap() {
          log.debug("Entering updateAttributesMap()...");

          Map attributeMap = null;
          boolean encryptedAttrFound = false;

          // Query filter to get list of applications for the specified application type
          Filter filter = Filter.eq("type", applicationType);

          // List of application objects
          List applicationsObjectList = context.getObjects(Application.class, new QueryOptions().addFilter(filter));

          log.debug("Total number of applications of type '" + applicationType + "' are: " + applicationsObjectList.size());

          for (Application application : applicationsObjectList) {
              try {
                  log.debug("Application name: " + application.getName());

                  uniqueHeaders.add("Name");
                  attributeMap = new HashMap();
                  applicationMap.put(application.getName(), attributeMap);
                  attributeMap.put("Name", application.getName());
                  Attributes attrMap = application.getAttributes();

                  // Update encrypted attribute
                  if (!encryptedAttrFound) {
                      if (attrMap.get("encrypted") != null) {
                          List encryptedAttrs = Util.csvToList(attrMap.get("encrypted").toString());
                          secreteAttributes.addAll(encryptedAttrs);
                          encryptedAttrFound = true;
                      }
                  }

                  for (Map.Entry entry : attrMap.entrySet()) {
                      if (entry.getValue() != null) {
                          if (entry.getValue() instanceof String || entry.getValue() instanceof Boolean) {

                              // Update attribute map with key and value
                              attributeMap.put(entry.getKey().toString(), entry.getValue());

                              // Update header set
                              uniqueHeaders.add(entry.getKey().toString());
                          }
                      }
                  }

                  String appXML = application.toXml(false);

                  String schemasHeaderTag = "&lt;Schemas>";
                  String schemasFooterTag = "&lt;/Schemas>";
                  if (appXML.indexOf(schemasHeaderTag) > 0) {
                      String schema = appXML.substring(appXML.indexOf(schemasHeaderTag), appXML.indexOf(schemasFooterTag) + 10);
                      uniqueHeaders.add(schemasHeader);
                      attributeMap.put(schemasHeader, schema);
                  }

                  String provisioningFormsHeaderTag = "&lt;ProvisioningForms>";
                  String provisioningFormsFooterTag = "&lt;/ProvisioningForms>";
                  if (appXML.indexOf(provisioningFormsHeaderTag) > 0) {
                      String forms = appXML.substring(appXML.indexOf(provisioningFormsHeaderTag), appXML.indexOf(provisioningFormsFooterTag) + 20);
                      uniqueHeaders.add(provisioningFormsHeader);
                      attributeMap.put(provisioningFormsHeader, forms);
                  }
              } catch (Exception e) {
                  log.warn("Failed to read application: " + application.getName() + ". " + e.getMessage(), e);
              }
          }

          log.debug("Exiting updateAttributesMap()...");
      }

      /**
      * Export Applications attribute map in csv format.
      */
      public void exportApplications() {
          log.debug("Entering exportApplications()...");

          FileWriter fileWriter = null;

          if (Util.isEmpty(applicationMap)) {
              log.warn("Application '" + applicationType + "' not found on the IdentityIQ server.");

              taskResult.setCompletionStatus(TaskResult.CompletionStatus.Success);
              taskResult.setAttribute("applicationsScanned", applicationMap.size());
          } else {
              // Perform the file operation when application map is non empty.
              try {
                  log.debug("Application map size: " + applicationMap.size());

                  Rfc4180CsvBuilder csvBuilder = new Rfc4180CsvBuilder();
                  List headers = new ArrayList(uniqueHeaders);

                  // Make sure Schemas column and/or ProvisioningForms placed after configuration attributes
                  if (headers.contains(schemasHeader)) {
                     headers.remove(schemasHeader);
                     headers.add(schemasHeader);
                  }

                  if (headers.contains(provisioningFormsHeader)) {
                     headers.remove(provisioningFormsHeader);
                     headers.add(provisioningFormsHeader);
                  }

                  fileWriter = new FileWriter(filePath);
                  fileWriter.append(Util.listToCsv(headers));
                  fileWriter.append(rowSeparator);

                  for (Map.Entry entry : applicationMap.entrySet()) {
                      StringBuffer attributeRow = new StringBuffer();
                      Map innerAttrMap = (Map) entry.getValue();
                      for (String headerName : headers) {
                          String attrValue = (innerAttrMap.get(headerName) != null) ? innerAttrMap.get(headerName).toString() : "";

                          if (secreteAttributes.contains(headerName)) {
                              attrValue = "";
                          }

                          csvBuilder.addValue(attrValue);
                      }

                      // Update File Row
                      fileWriter.append(csvBuilder.build());

                      fileWriter.append(rowSeparator);
                      csvBuilder.flush();
                  }
              } catch (Exception e) {
                  throw new GeneralException("Failed to export the application attributes map to a file. " + e.getMessage(), e);
              } finally {
                  try {
                      if (fileWriter != null) {
                          fileWriter.flush();
                          fileWriter.close();
                      }
                  } catch (Exception ex) {
                      log.warn("Error while closing fileWriter object. " + ex.getMessage);
                  }
              }

              updateTaskResult();
          }

          log.debug("Exiting exportApplications()...");
       }

      /**
       * Run Account aggregation task for the multiple IdentityIQ applications
       * @param applicationNames comma saperated application names
       *
       */
      private void executeAccountAggregation(String applicationNames) throws GeneralException {
          log.debug("Entering executeAccountAggregation()...");

          TaskManager tm = new TaskManager(context);
          HashMap taskArgs = new HashMap();
          TaskDefinition taskDefinition = new TaskDefinition();
          taskDefinition.setName(applicationType + " Account Aggregation " + new Date() + " - " + Util.rand(1, 10000));
          taskDefinition.setDescription("Account Aggregation task for " + applicationType);
          taskDefinition.setType(TaskItemDefinition.Type.AccountAggregation);
          taskDefinition.setResultAction(TaskDefinition.ResultAction.Delete);
          taskDefinition.setFormPath("/monitor/tasks/accountAggregationTask.xhtml");
          taskDefinition.setArgument("applications", applicationNames);
          taskDefinition.setArgument("checkDeleted", "true");
          taskDefinition.setArgument("promoteManagedAttributes", "true");
          taskDefinition.setArgument("logAllowedActions", null);
          taskDefinition.setOwner(context.getObjectByName(Identity.class, launcher));
          taskDefinition.setParent(context.getObject(TaskDefinition.class, "Account Aggregation"));
          context.saveObject(taskDefinition);
          context.commitTransaction();
          tm.run(taskDefinition, taskArgs);

          log.debug("Account aggregation task is executed for the application '" + applicationNames + "'.");
          log.debug("Exiting executeAccountAggregation()...");
      }

      /**
       * Run Group aggregation task for the multiple IdentityIQ applications
       * applicationNames comma saperated application names
      */
      private void executeGroupAggregation(String applicationNames) throws GeneralException {
          log.debug("Entering executeGroupAggregation()...");

          TaskManager tm = new TaskManager(context);
          HashMap taskArgs = new HashMap();
          TaskDefinition taskDefinition = new TaskDefinition();
          taskDefinition.setName(applicationType + " Group Aggregation " + new Date() + " - " + Util.rand(1, 10000));
          taskDefinition.setDescription("Group Aggregation task for " + applicationType);
          taskDefinition.setType(TaskItemDefinition.Type.AccountGroupAggregation);
          taskDefinition.setArgument("aggregationType", "group");
          taskDefinition.setFormPath("/monitor/tasks/accountGroupAggregationTask.xhtml");
          taskDefinition.setArgument("applications", applicationNames);
          taskDefinition.setArgument("checkDeleted", "true");
          taskDefinition.setOwner(context.getObjectByName(Identity.class, launcher));
          taskDefinition.setExecutor("sailpoint.task.ResourceIdentityScan");
          taskDefinition.setResultRenderer("accountGroupAggregationResult.xhtml");
          taskDefinition.setParent(context.getObject(TaskDefinition.class, "Account Group Aggregation"));
          context.saveObject(taskDefinition);
          context.commitTransaction();
          tm.run(taskDefinition, taskArgs);

          log.debug("Group aggregation task is executed for the application '" + applicationNames + "'.");
          log.debug("Exiting executeGroupAggregation()...");

      }

      /**
       * Create/Update multiple IdentityIQ application from the provided csv file.
       * Also ability to trigger test connection and aggregation based on user input.
       * User can provide schema and provisioning form while create and/or update.
       * The schema merge can be partial or full update.
       * The provisioning forms is full update. i.e it will set whatever forms provided in csv file. 
       */
      private void createOrUpdateApplications(Map.Entry entry, Application application, List aggregationappList) {
          log.debug("Entering createOrUpdateApplications()...");

          Map innerMap = (Map) entry.getValue();
          String applicationName = application.getName();

          for (Map.Entry entryMap : innerMap.entrySet()) {
              String key = (String)entryMap.getKey();
              Object value = entryMap.getValue();

              if (key != null &amp;&amp; !applicationObjects.contains(key) &amp;&amp; value != null) {
                  application.setAttribute((String)entryMap.getKey(), entryMap.getValue());
              }

              if (applicationObjects.contains(key) &amp;&amp; schemasHeader.equals(key)) {
                  mergeSchemas(application, value.toString());
              }

              if (applicationObjects.contains(key) &amp;&amp; provisioningFormsHeader.equals(key)) {
                  setProvisioningForms(application, value.toString());
              }
          }

          // Skip the test connection if the flag is true
          if (!skipTestConnection) {
                Connector conn = ConnectorFactory.getConnector(application, null);
                conn.testConfiguration();
                log.debug("Test connection is successful for the application: " + applicationName);
          } else {
             log.debug("Skipping Test connection for the application: " + applicationName);
          }

          context.saveObject(application);
          context.commitTransaction();

          if (create.equals(operation)) {
              applicationsCreated++;
              log.debug("Created the application: " + applicationName);
          } else if (update.equals(operation)) {
              applicationsUpdated++;
              log.debug("Updated the application: " + applicationName);
          }

          aggregationappList.add(application.getName());

          // Perform account and group aggregation task for configured applications per aggregation
          if (aggregationappList.size() >= applicationsPerAggregation) {
                triggerAggregation(aggregationappList);

                // clear the list for the next chunk of aggregations
                aggregationappList.clear();
          }

          log.debug("Exiting createOrUpdateApplications()...");
      }

      /**
       * Merge schema attribute definitions to specific schema.
       */
      private void mergeSchemas(Application app, String value) {
          log.debug("Entering mergeSchemas() for: " + app.getName());

          if (value != null) {
              String schemas = docTypeHeader + value + docTypeFooter;

              try {
                  Application tempApp = (Application)XMLObjectFactory.getInstance().parseXml(context, schemas, true);
                  List tempAppSchemas = tempApp.getSchemas();
    
                  for (Schema tempSchema : tempAppSchemas) {
                      Schema orgAppSchema = app.getSchema(tempSchema.getObjectType());
    
                      // Found schema, add the new attribute
                      if (orgAppSchema != null) {
                          List tempAttributes = tempSchema.getAttributes();
                          List orgAttributes = orgAppSchema.getAttributes();
                          List orgAttributesNames = orgAppSchema.getAttributeNames();

                          if (tempSchema.getIdentityAttribute() != null) {
                              orgAppSchema.setIdentityAttribute(tempSchema.getIdentityAttribute());
                          }

                          if (tempSchema.getDisplayAttribute() != null) {
                              orgAppSchema.setDisplayAttribute(tempSchema.getDisplayAttribute());
                          }

                          if (tempSchema.getInstanceAttribute() != null) {
                              orgAppSchema.setInstanceAttribute(tempSchema.getInstanceAttribute());
                          }
    
                          for (AttributeDefinition tempAttribute : tempAttributes) {
                              if (orgAttributesNames.contains(tempAttribute.getName())) {
                                  log.debug("Found Schema attribute: '" + tempAttribute.getName() + "'.");

                                  // Attribute Definition found, remove it first.
                                  int index = orgAttributesNames.indexOf(tempAttribute.getName());
                                  orgAttributes.remove(orgAttributesNames.indexOf(tempAttribute.getName()));
                                  log.debug("Removed Schema attribute: '" + tempAttribute.getName() + "'.");

                                  // Add attribute to specific index
                                  orgAttributes.add(index, tempAttribute);
                                  log.debug("Added Schema attribute: '" + tempAttribute.getName() + "'.");
                              } else {
                                  // Add attribute, as it not present in original schema
                                  orgAttributes.add(tempAttribute);
                                  log.debug("Added Schema attribute: '" + tempAttribute.getName() + "'.");
                              }
                          }
                      } else { 
                          // add new schema
                          // cleaning id, created, modified schema attributes for the new schema if they exists.
                          // ideally new schema should not have those attributes.
                          if (tempSchema.getId() != null) {
                              tempSchema.setId(null);
                          }
                          if (tempSchema.getId() != null) {
                              tempSchema.setId(null);
                          }
                          if (tempSchema.getCreated() != null) {
                              tempSchema.setCreated(null);
                          }
                          if (tempSchema.getModified() != null) {
                              tempSchema.setModified(null);
                          }

                          app.setSchema(tempSchema);
                      }
                  }
              } catch (Exception e) {
                  String message = "Failed to merge Schema for the application: '" + app.getName() + "'.";
                  log.error(message, e);
                  throw new GeneralException(message, e);
              }
          }

          log.debug("Exiting mergeSchemas()...");
      }

      /**
       * Sets Provisioning forms to the application based on user input.
       * It is full update. i.e Application will set provisioning forms defined in the csv file.
       */
      private void setProvisioningForms(Application app, String value) {
          log.debug("Entering setProvisioningForms() for: " + app.getName());

          if (value != null) {
              String provisioningForms = docTypeHeader + value + docTypeFooter;
              try {
                  Application tempApp = (Application)XMLObjectFactory.getInstance().parseXml(context, provisioningForms, true);
                  List tempAppProvisioningForms = tempApp.getProvisioningForms();
    
                  if (tempAppProvisioningForms != null) {
                      app.setProvisioningForms(tempAppProvisioningForms);
                  }
              } catch (Exception e) {
                  String message = "Failed to set Provisioning Forms for the application: '" + app.getName() + "'.";
                  log.error(message, e);
                  throw new GeneralException(message, e);
              }
          }

          log.debug("Exiting setProvisioningForms()...");
      }

      /**
       * Trigger aggregation.
       */
      private void triggerAggregation(List aggregationappList) {
          String appsToaggregate = Util.listToCsv(aggregationappList);
          // Trigger account aggregation
          if (triggerAccountAggregation) {
              executeAccountAggregation(appsToaggregate);
          }

          // Trigger group aggregation
          if (triggerGroupAggregation) {
              executeGroupAggregation(appsToaggregate);
          }
      }

      /**
       * Update task result of Create/Update Applications.
       */
      private void updateTaskResult() {
          log.debug("Entering updateTaskResult()...");

          if (applicationsFailed.size() > 0) {
              taskResult.setCompletionStatus(TaskResult.CompletionStatus.Error);
              if (create.equals(operation)) {
                  taskResult.addMessage(Message.error("application_builder_create_failed_error", applicationsFailed.size()));
              } else if (update.equals(operation)) {
                  taskResult.addMessage(Message.error("application_builder_update_failed_error", applicationsFailed.size()));
              }
          } else if (applicationsExists.size() > 0) {
              taskResult.setCompletionStatus(TaskResult.CompletionStatus.Warning);
              taskResult.addMessage(Message.warn("application_builder_create_warning_msg", filePath));
          } else if (applicationsNotFound.size() > 0) {
              taskResult.setCompletionStatus(TaskResult.CompletionStatus.Warning);
              taskResult.addMessage(Message.warn("application_builder_update_warning_msg", filePath));
          } else {
              taskResult.setCompletionStatus(TaskResult.CompletionStatus.Success);
          }

          if (create.equals(operation)) {
              taskResult.setInt("applicationsCreated", applicationsCreated);
              taskResult.setAttribute("applicationsExists", Util.listToCsv(applicationsExists));
          } else if (update.equals(operation)) {
              taskResult.setInt("applicationsUpdated", applicationsUpdated);
              taskResult.setAttribute("applicationsNotFound", Util.listToCsv(applicationsNotFound));
          } else if (read.equals(operation)) {
              taskResult.setCompletionStatus(TaskResult.CompletionStatus.Success);
              taskResult.setAttribute("applicationsScanned", applicationMap.size());
              taskResult.setAttribute("exportFilePath", filePath);
          }

          taskResult.setAttribute("applicationsFailed", Util.listToCsv(applicationsFailed));
          log.debug("Exiting updateTaskResult()...");
      }

      /////////////////// MAIN START /////////////////
      ////////////////////////////////////////////////


      log.debug("Application Builder Rule execution start...");

      try {
          // Retriving input parameters
          filePath = inputParams.get("filePath");
          applicationType = inputParams.get("applicationType");
          operation = inputParams.get("operation");
          triggerAccountAggregation = inputParams.get("triggerAccountAggregation");
          triggerGroupAggregation = inputParams.get("triggerGroupAggregation");
          launcher = inputParams.get("launcher");
          skipTestConnection = inputParams.get("skipTestConnection");

          if (!(filePath.trim().endsWith(".csv") || filePath.trim().endsWith(".CSV"))) {
              throw new GeneralException("Invalid input file format '" + filePath + "'. Only CSV format is supported.");
          }

          if (inputParams.get("applicationsPerAggregation") != null) {
              try {
                  if (Integer.parseInt(inputParams.get("applicationsPerAggregation")) > 0) {
                      applicationsPerAggregation = Integer.parseInt(inputParams.get("applicationsPerAggregation"));
                  }
              } catch (NumberFormatException e) {
                  log.warn("Invalid value for the attribute 'applicationsPerAggregation'. " + e.getMessage() + ". Considering default value " + applicationsPerAggregation , e);
              }
          }

          // Update Secrete attribute list as per sailpoint.object.Application
          secreteAttributes.add("password");
          secreteAttributes.add("cmdClientPassword");
          secreteAttributes.add("adminPassword");
          secreteAttributes.add("apikey");
          secreteAttributes.add("kid");
          secreteAttributes.add("secret");
          secreteAttributes.add("keystorePwd");
          secreteAttributes.add("token");
          secreteAttributes.add("transportUserPassword");
          secreteAttributes.add("group.password");
          secreteAttributes.add("accountId");
          secreteAttributes.add("keystorepassword");
          secreteAttributes.add("pkeypassword");
          secreteAttributes.add("admin_password");
          secreteAttributes.add("SudoUserPassword");
          secreteAttributes.add("PassphraseForPrivateKey");
          secreteAttributes.add("passwd");

          // Add application objects to list, special handling for merge is required.
          applicationObjects.add(schemasHeader);
          applicationObjects.add(provisioningFormsHeader);

          // Perform Task based on operation type
          switch (operation) {
              case create:
                  parseInputFile();
                  createApplications();
                  break;
              case update:
                  parseInputFile();
                  updateApplications();
                  break;
              case read:
                  updateAttributesMap();
                  exportApplications();
                  break;
              default:
                  log.debug("Invalid Operation.");
                  break;
          }
      } catch (GeneralException e) {
          log.error(Message.error("application_builder_task_error", e.getMessage()), e);

          // Update taskResult object with error details
          taskResult.setCompletionStatus(TaskResult.CompletionStatus.Error);
          taskResult.addMessage(Message.error("application_builder_task_error", e.getMessage()));
      } catch (Exception e) {
          GeneralException ex = new GeneralException(Message.error("application_builder_task_error", e.getMessage()), e);
          log.error(ex.getMessage(), ex);

          // Update taskResult object with error details
          taskResult.setCompletionStatus(TaskResult.CompletionStatus.Error);
          taskResult.addMessage(Message.error("application_builder_task_error", e.getMessage()));
      }

      return taskResult;
    
  </Source>
  </Rule>
  <Rule created="1604263664021" id="0a111e5875691e4f81758590d99426ac" language="beanshell" modified="1618317934971" name="CF-Constants-Rule">
    <Source>


  // General Variables
	String STR_ACTIVE_DIRECTORY = "Active Directory";
  String STR_CIAM_User_Vault = "CIAM-Users-Vault";
  String ATR_COSTCENTER = "costcenter";
 	String ATR_EEOCODE = "eeojobgroup";
  String STR_BIZAPPAD = "";
  String STR_BIZAPP = "BizAppAD";
	String STR_ISAM_LDAP = "ISAM LDAP";
	String STR_JMS_REQ_VALUT_NAME = "JMS-Request-Vault";
	String STR_ONESTOP_SERVICENOW = "OneStopSand-ServiceNow";
	String STR_HR_APP = "HR Application";
  String STR_CIAM_USERS_VAULT = "CIAM-Users-Vault";
  String STR_DISCONNECTEDAPP1 = "Disconnected Application1";
  String STR_DISCONNECTEDAPP2 = "Disconnected Application2";
	String STR_CREATE  ="Create";
  String STR_DISABLE  ="Disable";
  String STR_DELETE  ="Delete";
	String STR_ENABLE  ="Enable";
	String STR_ACTION_TER  ="TER";
	String STR_ACTION_HIR  ="HIR";
	String STR_ACTION_ADD  ="ADD";
	String STR_ACTION_COM  ="COM";
	String STR_CAREFIRST_MAIL  ="@carefirsttest.com";
  String STR_CCO_MAIL  ="@cfcarecotest.com";
	String STR_TRU_MAIL  ="@carefirstchpdctest.com";
	
  String STR_WIL_MAIL  ="@cfabluetest.com";
	
  String STR_SBP_MAIL  ="@fepoctest.com";
  String STR_FEPOCCOMPANY_SBP = "SBP";
  //String STR_CAREFIRST_MAIL  ="@carefirst.com"; //created for testing on 01-oct-2020, to be deleted later
   String STR_DATE_FORMAT_SLASHES  ="MM/dd/yyyy";
  String STR_DATE_FORMAT  ="dd-MMM-yy";
	String STR_END_DATE_VALUE  ="01-Jan-30";
  //String STR_END_DATE_VALUE  ="01/01/2030";
	String ATR_START_DATE ="Start Date";
	String ATR_END_DATE ="End Date";
	String STR_DN ="distinguishedName";
    String STR_HOMEPAGECONSTANT="https://mysite.carefirst.com/Person.aspx?accountname=BCBSMD\\";
	// Custom Objects
	String STR_USERID_CUSTOM_OBJ = "CF-UserIDGeneration-CustomObject";
	String STR_CUSTOM_VALUE = "Value";
	String STR_CUSTOM_CONSTANT = "constant";
  String ATR_ACTIVE = "Active";
   String ATR_ACTIVE_A = "A";

	
	
	
	// JMS Message Variables
	String ISAM_LDAP_QNAME = "TIBEMSQ.CIAM.ARIBA.PROVISIONING.RES";
	String ISAM_LDAP_TIBCO_Q_HOSTNAME = "svl-tibbwems-d5";
	String ISAM_LDAP_TIBCO_Q_PORT = "7333";
	String ISAM_LDAP_TIBCO_Q_USERNAME = "TIBEMS_JAVA_ARIBA_CIAM";
	String ISAM_LDAP_TIBCO_Q_PASSWORD = "JP4G1zXXf#YXEI8";
	String ISAM_LDAP_JMS_USER_CREDENTIALS = "admin@local:Cf1@m016t";
	String ISAM_LDAP_JMS_URL = "https://sal-isamprxe-tt1/isam/pdadmin";
	String ATR_AUTHERIZATION = "Authorization";
	String STR_POST = "POST";
	String ATR_CONTENT_TYPE = "Content-Type";
	String STR_CONTENT_VALUE = "application/x-www-form-urlencoded";
	String ATR_CONTENT_LANGUAGE = "Content-Language";
	String STR_LANGUAGE = "en-US";
	String ATR_ACCEPT = "Accept";
	String ATR_ACCEPT_VALUE = "application/json";
	
  
 // Identity Attrbibutes 
  String ATR_USERID = "userid";
  String ATR_JOBTITLE = "jobtitle";
 String ATR_EMPLOYEETYPE = "employeetype";
  String ATR_MIDDLENAME = "middleName";
  String ATR_LOCATION = "location";
  String ATR_ACTION = "action";
  String ATR_ENDDATE = "enddate";
  String ATR_STARTDATE = "startdate";
  
  String ATR_HIREDATE = "HIRE_DT";
  
  String ATR_DESCR = "descr";
  String ATR_COMPANY = "company";
  String ATR_EMAIL = "email";
   String ATR_NAME = "name";
   String ATR_DISPLAYNAME = "displayName";
  String ATR_MANAGERNAME = "managerName";
  String ATR_BUNDLE_LIST = "bundleList";
   String ATR_PASSWORD = "password"; 
  String ATR_LASTNAME= "LAST_NAME";
  String ATR_EFFECTIVE_DATE= "EFFDT";
  String ATR_OBJ_ACTION= "ACTION";
  String ATR_OBJ_PER_ORG = "PER_ORG";
  String ATR_OBJ_EMP_STATUS = "EMPLOYEE_STATUS";
  String STR_ACTIVE = "A";
  String STR_EMP = "EMP";
  String STR_CWR = "CWR";
  String STR_FEPOC_EMP = "FEPOC_EMP";
  String STR_FEPOC_CWR = "FEPOC_CWR";
  String ATR_FIRSTNAME="firstname";
  String ATR_IDEN_LASTNAME="lastname";
  String ATR_COSTCENTER="costcenter";
  String ATR_EMPLOYEEID="employeeid";
   String STR_REH="REH";
  String ATR_DEPTID="deptid";
  String ATR_PHONE="phone";
   String ATR_BUSINESSUNIT="businessunit";
   String ATR_COUNTRY="country";
  String ATR_VENDOR="neeProviderId";
  
  //Password policies
 String STR_AD_PASSWORD_POLICY = "CF-ActiveDirectory-PasswordPolicy";
  
  
  //  Joiner Variables
 
String APP_IIQ = "IIQ";
String STR_EMPLOYEE = "ASSOCIATE";
  //String STR_EMPLOYEE = "EMP";
String STR_AAFILIATE = "Affiliate";
String STR_FEPOCEMPLOYEE="";
String STR_FEPOCASSOCIATE ="FEPOC Associate";  
String STR_FEPOCCONTRACTOR="FEPOC Contractor"; 
String ATR_EMPLOYEESTATUS = "employeestatus";
String ATR_HIRE="HIR";
String ATR_PREHIRE = "Pre Hire";
String ATR_ASSIGNEDROLES = "assignedRoles";
String STR_ASSOCIATEBIZROLE = "Associate Biz Role";
//String STR_ASSOCIATEBIZROLE = "Associate Biz Role Test";
String STR_CONTRACTORBIZROLE = "Contractor Biz Role";
String STR_FEPOCASSOCIATEBIZROLE = "";
String STR_FEPOCCONTRACTORBIZROLE = "";
String STR_ATR_ASSOCIATE = "AssociateRoles";
String STR_ATR_CONTRACTOR= "ContractorRoles";
String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_JOINER= "CF-JoinerProvisioningSuccess-EmailTemplate";
String STR_PROVISIONING_FAILURE_EMAIL_TEMPLATE= "CF-ProvisioningFailure-EmailTemplate";
String STR_AUDIT_JOINER_SUCESS_NOTIFICATION= "CF-ProvisioingSuccess-Joiner";
String STR_AUDIT_JOINER_FAILURE_NOTIFICATION= "CF-ProvisioingFailure-Joiner";
String STR_DISABLE_EMAIL_TEMPLATE= "CF-DisableAccount-EmailTemplate";
String STR_AUDIT_DISABLE_JOINER_NOTIFICATION= "Carefirst-JoinerDisable-ProvisioingSuccess";
String  STR_SKYPE_REGISTRARPOOL="sfb.carefirsttest.com";
  
String STR_AUDIT_DELETE_SUCCESS_NOTIFICATION= "Carefirst-Delete-ProvisioingSuccess";
String STR_AUDIT_DELETE_FAILURE_NOTIFICATION= "Carefirst-Delete-ProvisioingFailure";
String STR_AUDIT_CF_SP_CIAMSYNCFAILURE= "CF-SP-CiamSyncFailure";

// Mover Varaibles
String STR_CONTRACTOR = "CONTRACTOR";
String STR_OLD_USER_TYPE = "OldUserType";
String STR_NEW_USER_TYPE = "NewUserType";
String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE = "CareFirst-EmailTemplate-ProvisioningSuccess";
String STR_ADUIT_MOVER_SUCCESS_NOTIFICATION = "CF-ProvisioingSuccess-Mover";
String STR_ADUIT_MOVER_FAILURE_NOTIFICATION = "Carefirst-Mover-ProvisioingFailure";
 

String STR_ASOCIATES_ORG = "OU=Associates";
String STR_CONTRACTOR_ORG = "OU=Contractors";
String STR_ASSOCIATE_OU = "OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
//String STR_ASSOCIATE_OU = "OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
  String ASSOCIATEOU = "OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
String STR_CONTRACTOR_OU = "OU=AzureUsers,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
// String STR_CONTRACTOR_OU = "OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
  String CONTRACTOROU = "OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
String STR_FEPOCCONTRACTOR_OU = "";
String STR_FEPOCASSOCIATE_OU = "";
  String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_MOVER= "CareFirst-MoverProvisioningSuccess-EmailTemplate";


// Leaver Variables;

String STR_TERMINATE = "T";
String STR_EMPSTATUS_T="T";
  
String STR_ACTION_TWP="TWP";
String STR_EMPSTATUS_U="U";
  
 String STR_ACTION_RET="RET";
String STR_EMPSTATUS_R="R";
  
String STR_ACTION_RWP="RWP";
String STR_EMPSTATUS_Q="Q";
  
  
String STR_ACTION_COM="COM";
  
String STR_ADUIT_LEAVER_SUCCESS_NOTIFICATION = "Carefirst-Leaver-ProvisioingSuccess";
String STR_ADUIT_LEAVER_FAILURE_NOTIFICATION = "Carefirst-Leaver-ProvisioingFailure";
String ATR_APPLICATION1 = "Application1";
String ATR_APPLICATION2 = "Application2";
String ATR_APPLICATION3 = "Application3";
String ATR_APPLICATION4 = "Application4";
String STR_TERM_OU = "OU=TermOU,DC=CAREFIRST,DC=com";
String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_LEAVER = "CF-LeaverProvisioningSuccess-EmailTemplate";
 
  //Rehire Variables
 String ATR_REH="REH";
  String STR_EMPSTATUS_A="A";
  String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_REHIRE = "CF-RehireProvisioningSuccess-EmailTemplate";
  String STR_ADUIT_REHIRE_SUCCESS_NOTIFICATION = "Carefirst-Rehire-ProvisioingSuccess";
  String STR_ADUIT_REHIRE_FAILURE_NOTIFICATION = "Carefirst-Rehire-ProvisioingFailure";
  
  //LOA Variables
 String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_LOA = "CF-LOAProvisioningSuccess-EmailTemplate";
 String STR_ADUIT_LOA_SUCCESS_NOTIFICATION = "Carefirst-LOA-ProvisioingSuccess";
  String STR_ADUIT_LOA_FAILURE_NOTIFICATION = "Carefirst-LOA-ProvisioingFailure";
  
   //RLOA Variables
 String STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_RLOA = "CF-RLOAProvisioningSuccess-EmailTemplate";
 String STR_ADUIT_RLOA_SUCCESS_NOTIFICATION = "Carefirst-ROA-ProvisioingSuccess";
  String STR_ADUIT_RLOA_FAILURE_NOTIFICATION = "Carefirst-RLOA-ProvisioingFailure";
  
//User Types
  String STR_CAREFIRST_ASSOCIATE = "CareFierst Associate";
  String STR_CAREFIRST_CONTARCTOR = "CareFierst Contarctor";
  String STR_FEPOC_ASSOCIATE = "FEPOC Associate";
  String STR_FEPOC_CONTRACTOR = "FEPOC Contractor";


String STR_ISAM_LDAP_DN = "ou=users,dc=carefirst,dc=com";

  
  // USer ID generate web service call argumnets 
  
  String STR_USERID_REQUESTXML = "&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:uaas=\"http://www.carefirst.com/ciam/services/uaas\" xmlns:uaas1=\"http://associate.insidecarefirst.com/ciamservices/service/uaas_types\">"
                                           +"   &lt;soapenv:Header/>       "
                                           +"   &lt;soapenv:Body> "
                                           +"      &lt;uaas:generateNextUserIDInput>  "
                                           +"         &lt;uaas1:uaasAdminUserID>aac5790 &lt;/uaas1:uaasAdminUserID> "
                                           +"      &lt;/uaas:generateNextUserIDInput> "
                                           +"   &lt;/soapenv:Body> "
                                           +" &lt;/soapenv:Envelope>";  
  String STR_USERID_ENDPOINT = "http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort";
  //String STR_USERID_ENDPOINT = "http://associatett.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort";
  
  //String STR_WEBSERVICE_ENDPOINT = "http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort";
 String STR_WEBSERVICE_ENDPOINT = "http://associatett.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort";
  String STR_CIAM_WE_FAILURE_NOTIFICATION = "CF-SP-CIAM-Integration-FailureNotification-EmailTemplate";



  </Source>
  </Rule>
  <Rule created="1604263664099" id="0a111e5875691e4f81758590d9e326ad" language="beanshell" modified="1618230982567" name="CF-CommonLibrary-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>

  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningProject;
  import sailpoint.object.ProvisioningResult;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.*;
  import sailpoint.api.TaskManager;
  import sailpoint.object.RoleMetadata;

  import sailpoint.api.SailPointContext;

  import sailpoint.object.AuditEvent;

  import sailpoint.server.Auditor;

  import sailpoint.tools.GeneralException;
  import sailpoint.tools.Util;
  import sailpoint.tools.Message;
  import sailpoint.api.Aggregator;
  import sailpoint.api.SailPointContext;
  import sailpoint.connector.Connector;
  import sailpoint.connector.ConnectorException;

  import sailpoint.object.Attributes;
  import sailpoint.object.ResourceObject;
  import sailpoint.object.TaskResult;
  import sailpoint.tools.GeneralException;

  import org.apache.log4j.Logger;
  //DB Operations
  import java.sql.DriverManager;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Filter;

  import java.sql.Connection;
  import sailpoint.object.Bundle;

  import java.sql.*;
  import java.sql.Timestamp;
  import java.text.SimpleDateFormat;
  import java.util.Date;

  import javax.naming.Context;
  import javax.naming.NamingEnumeration;
  import javax.naming.NamingException;
  import javax.naming.directory.Attribute;
  import javax.naming.directory.*;
  //import javax.naming.directory.Attributes;
  import javax.naming.directory.SearchControls;
  import javax.naming.directory.SearchResult;
  import javax.naming.ldap.InitialLdapContext;
  import javax.naming.ldap.LdapContext;
  import javax.naming.directory.DirContext;
  import javax.naming.directory.InitialDirContext;


  import java.util.List; 


  import java.util.ArrayList;
  import sailpoint.api.Provisioner;

  import sailpoint.object.Custom;
  import java.net.MalformedURLException;
  import java.io.IOException;
  import java.net.URL;
  import java.net.URI;
  import org.json.JSONObject;
  import org.apache.http.auth.UsernamePasswordCredentials;
  import org.apache.http.client.CredentialsProvider;
  import org.apache.http.impl.client.BasicCredentialsProvider;
  import org.apache.http.client.HttpClient;
  import org.apache.http.client.config.RequestConfig;
  import org.apache.http.auth.AuthScope;
  import org.apache.http.impl.client.HttpClientBuilder;
  import org.apache.http.client.methods.HttpPost;
  import org.apache.http.HttpResponse;
  import org.apache.http.entity.StringEntity;
  import org.apache.http.entity.ContentType;
  import org.apache.http.StatusLine;
	import java.lang.Character;

  Application appObj = null;
  Application bizappObj = null;
  Application appObjDisconnectedApp1 = null;
  Application appObjDisconnectedApp2 = null;
  Link linkObj = null;
  Link bizlinkObj = null;
  ProvisioningPlan plan = null;
  AccountRequest accReq = null;  
  Identity identity = null;

  Logger log = Logger.getLogger("com.carefirst.CommonsLibrary");
  log.info("Inside Common Rule Library");

  // This Method is used for getting Identity Object From IIQ.
  public Identity getIdentityObj(String name){

    identity = context.getObjectByName(Identity.class,name);
    if(identity == null){
      throw new GeneralException("Identity is not found in IIQ "+name);
    }
    return identity;

  }


  public ProvisioningPlan  provisionionSkypeAttributes(Identity identity,String nativeidentity){

    String SipAddress= "sip:"+identity.getAttribute(ATR_USERID)+STR_CAREFIRST_MAIL;
    ArrayList l=new ArrayList();
    l.add("SamAccountName");
    l.add("FirstLastName");
    l.add("EmailAddress");
    if(identity != null){
      plan = new ProvisioningPlan();
      linkObj = identity.getLink("Active Directory");
      System.out.println("linkObj"+linkObj+identity.getName());

      AccountRequest accountRequest = new AccountRequest();

      // if(linkObj != null){
      log.info("Inside Common Rule Library buildCustomPlan()  inside null check");
      accountRequest.setApplication("Active Directory");
      accountRequest.setNativeIdentity(nativeidentity);


      accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);


      accountRequest.add(new AttributeRequest("SipAddress",SipAddress));
      accountRequest.add(new AttributeRequest("msRTCSIP-UserEnabled","true"));
      accountRequest.add(new AttributeRequest("SipAddressType",l));
      accountRequest.add(new AttributeRequest("RegistrarPool",STR_SKYPE_REGISTRARPOOL));


      plan.add(accountRequest);
      plan.setIdentity(identity);

      //  }
      System.out.println("plan:::: "+plan);
      return plan; 
    }
  }
  //method for creating the joiner plan (Assigning the BirthRight Roles)
  public ProvisioningPlan  buildjoinerPlan(String identityName){

    identity = getIdentityObj(identityName);
    if(identity != null){
      plan = new ProvisioningPlan();
      System.out.println("Joiner:: Identity object found: "+identity);
      String userType = identity.getAttribute(ATR_EMPLOYEETYPE);
      String company = identity.getAttribute(ATR_COMPANY);

      AccountRequest acctReqIIQ = new AccountRequest();
      acctReqIIQ.setOperation(AccountRequest.Operation.Modify);
      acctReqIIQ.setApplication(APP_IIQ);
      acctReqIIQ.setNativeIdentity(identity.getName());
      //Check User Type
      /*if((userType != nul) @and ((userType.equalsIgnoreCase(STR_EMPLOYEE) @and !company.equalsIgnoreCase("SBP")) @or userType.equalsIgnoreCase(STR_AAFILIATE) @or userType.equalsIgnoreCase(STR_FEPOCASSOCIATE))){
        acctReqIIQ.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_ASSOCIATEBIZROLE));

        //   workflow.put(ATR_ASSIGNEDROLES,STR_ASSOCIATEBIZROLE);
      }
       else if((userType != nul) @and ((userType.equalsIgnoreCase(STR_EMPLOYEE) @and company.equalsIgnoreCase("SBP")))){
        acctReqIIQ.add(new AttributeRequest(ATR_ASSIGNEDROLES,"FEPOC Associate Biz Role"));

        //   workflow.put(ATR_ASSIGNEDROLES,STR_ASSOCIATEBIZROLE);
     }
      else if((userType != nul) @and ((userType.equalsIgnoreCase(STR_CONTRACTOR) @and company.equalsIgnoreCase("SBP")))){
        acctReqIIQ.add(new AttributeRequest(ATR_ASSIGNEDROLES,"FEPOC Contractor Biz Role"));

        //   workflow.put(ATR_ASSIGNEDROLES,STR_ASSOCIATEBIZROLE);
     }*/
      if(userType != null @and userType.equalsIgnoreCase(STR_EMPLOYEE)){
        acctReqIIQ.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_ASSOCIATEBIZROLE));
      }

      else{
        acctReqIIQ.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_CONTRACTORBIZROLE));
        //    workflow.put(ATR_ASSIGNEDROLES,STR_CONTRACTORBIZROLE);
      }
      plan.add(acctReqIIQ);
      plan.setIdentity(identity);

    }
    System.out.println("Joiner:: Plan "+plan.toXml());
    return plan; 
  }
  //This method is used for getting the Account Reuest based on Application Name
  public AccountRequest getAccountRequest(Identity identity, String AppName,String op){

    AccountRequest accountRequest = new AccountRequest();

    System.out.println("**** Inside rule: CF-CommonLibrary-Rule, starting method: getAssociateRequest ****");

    System.out.println("Inside rule: CF-CommonLibrary-Rule, inside method: getAssociateRequest, is identity company value null? "+Util.isNotNullOrEmpty(identity.getAttribute(ATR_COMPANY)));

    System.out.println("Inside rule: CF-CommonLibrary-Rule, inside method: getAssociateRequest, identity company value = "+identity.getAttribute(ATR_COMPANY));

    appObj  = context.getObjectByName(Application.class, AppName);
    String action = identity.getAttribute(ATR_ACTION);
    String employeeStatus = identity.getAttribute(ATR_EMPLOYEESTATUS);
    //  String strEmpType = identity.getAttribute(ATR_EMPLOYEETYPE) != null ? identity.getAttribute(ATR_EMPLOYEETYPE) :"";
    linkObj = identity.getLink(appObj);
    System.out.println("****** getAccountRequest Applname: "+AppName);


    if(linkObj != null){
      log.info("Inside Common Rule Library buildCustomPlan()  inside null check");
      accountRequest.setApplication(AppName);
      accountRequest.setNativeIdentity(linkObj.getNativeIdentity());

      if(Util.isNotNullOrEmpty(op)&amp;&amp; op.equalsIgnoreCase(STR_DISABLE)){
        accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);

        //if(((!(employeeStatus.equalsIgnoreCase(ATR_PREHIRE))) @or !(action.equalsIgnoreCase("LOA")) @or  !(action.equalsIgnoreCase("PLOA"))) @and (AppName.equals(STR_ACTIVE_DIRECTORY))){
        if(((action.equalsIgnoreCase(STR_ACTION_TER)) @or(action.equalsIgnoreCase(STR_ACTION_TWP))@or(action.equalsIgnoreCase(STR_ACTION_RET))@or(action.equalsIgnoreCase(STR_ACTION_RWP))@or(action.equalsIgnoreCase(STR_ACTION_COM)))@and (AppName.equals(STR_ACTIVE_DIRECTORY))){

          accountRequest.add(new AttributeRequest("AC_NewParent","OU=Termed Users,OU=Users,OU=Corporate,DC=carefirsttest,DC=com"));
        }

        if(((action.equalsIgnoreCase(STR_ACTION_TER)) @or(action.equalsIgnoreCase(STR_ACTION_TWP))@or(action.equalsIgnoreCase(STR_ACTION_RET))@or(action.equalsIgnoreCase(STR_ACTION_RWP))@or(action.equalsIgnoreCase(STR_ACTION_COM)))@and (AppName.equals(STR_ISAM_LDAP))){
          boolean isamLdapActiveStatus=false;

          accountRequest.add(new AttributeRequest("active",isamLdapActiveStatus));
        }

      }
      else if(Util.isNotNullOrEmpty(op)&amp;&amp; op.equalsIgnoreCase(STR_DELETE)){
        System.out.println("Inside Delete Application Account");
        if(AppName.equals(STR_ISAM_LDAP)){
          log.info("Inside Common Rule ISAM LDAp Deletion::"+linkObj.getNativeIdentity());
          System.out.println("Inside Common Rule ISAM LDAp Deletion::"+linkObj.getNativeIdentity());
          boolean isamLdapActiveStatus=false;

          accountRequest.add(new AttributeRequest("active",isamLdapActiveStatus));
          accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Delete);
        }else{
          accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Delete);
        }
      }

      else{
        if(AppName.equals(STR_ISAM_LDAP)){
          boolean isamLdapActiveStatus=true;

          accountRequest.add(new AttributeRequest("active",isamLdapActiveStatus));
        }
        accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Enable);



      }
      System.out.println("****** getAccountRequest Applname: "+accountRequest);

    }
    return accountRequest;
  }




  // Method for creating the plan to disable the AD,ISAM LDAP,JMS,ServiceNow, HR accounts
  public ProvisioningPlan buildAccountDisablePlan(Identity identity){
    log.info("Inside Common Rule Library buildCustomPlan() ");
    System.out.println("****** Inside Common Rule Library buildAccountDisablePlan");
    plan = new ProvisioningPlan();
    plan.setIdentity(identity);

    // Disable Active Directory Account
    accReq  = getAccountRequest(identity,STR_ACTIVE_DIRECTORY,STR_DISABLE);
    if(accReq != null){

      plan.add(accReq);
    }
    // Disable LDAP Account

    accReq = getAccountRequest(identity,STR_ISAM_LDAP,STR_DISABLE);
    System.out.println("****** accReq..........................................."+accReq);
    if(accReq != null){
      plan.add(accReq);
      System.out.println("****** plan..........................................."+plan);
    } 

    //Disable JMSReqVault Application
    accReq = getAccountRequest(identity,STR_JMS_REQ_VALUT_NAME,STR_DISABLE);
    if(accReq != null){
      plan.add(accReq);
    } 

    // Disable ServiceNow Account
    accReq = getAccountRequest(identity,STR_ONESTOP_SERVICENOW,STR_DISABLE);
    if(accReq != null){
      plan.add(accReq);
    } 
    // Disable BizAPP Account
    accReq = getAccountRequest(identity,STR_BIZAPP,STR_DISABLE);
    if(accReq != null){
      plan.add(accReq);
    } 
    // Disable CIAM Users Vault
    accReq = getAccountRequest(identity,STR_CIAM_USERS_VAULT,STR_DISABLE);
    if(accReq != null){
      plan.add(accReq);
    } 

    System.out.println("plan"+plan);

    // Disable HR Application
    appObj  = context.getObjectByName(Application.class, STR_HR_APP);
    if(appObj != null){
      linkObj = identity.getLink(appObj);
      if(linkObj != null){
        //linkObj.setDisabled(true);
        linkObj.setAttribute("IIQDisabled",true);
        context.saveObject(linkObj);
            } 
    }
    //if((identity.getAttribute("action").equals("REH")) @or (identity.getAttribute("action").equals("PREHIRE"))){
      identity.setAttribute("inactive","true");
     context.saveObject(identity);
     context.commitTransaction();
   System.out.println("Identity inactive"+identity.getAttribute("inactive"));
    
    return plan;
  }



  // This method is used to create a plan for enabling the AD,ISAM LDAP,JMS,ServiceNow, HR  accounts.
  public ProvisioningPlan createEnablePlan(Identity identity){

    plan = new ProvisioningPlan();
    plan.setIdentity(identity);
    String strEmpType = identity.getAttribute(ATR_EMPLOYEETYPE) != null ? identity.getAttribute(ATR_EMPLOYEETYPE) :"";

    // Enable Active Directory Account
    accReq  = getAccountRequest(identity,STR_ACTIVE_DIRECTORY,"");
    if(accReq != null){

      if(Util.isNotNullOrEmpty(strEmpType)){


        if(STR_EMPLOYEE.equalsIgnoreCase(strEmpType)){
          accReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_ASSOCIATE_OU));

        }
        else if(STR_CONTRACTOR.equalsIgnoreCase(strEmpType)){
          accReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_CONTRACTOR_OU));

        }
        else if(STR_FEPOCEMPLOYEE.equalsIgnoreCase(strEmpType)){
          accReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_FEPOCASSOCIATE_OU));

        }
        else if(STR_FEPOCCONTRACTOR.equalsIgnoreCase(strEmpType)){
          accReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_FEPOCCONTRACTOR_OU));

        }
      }
      plan.add(accReq);
    }

    // Enable LDAP Account
    accReq = getAccountRequest(identity,STR_ISAM_LDAP,"");
    if(accReq != null){
      plan.add(accReq);
    } 

    //Enable JMSReqVault Application
    accReq = getAccountRequest(identity,STR_JMS_REQ_VALUT_NAME,"");
    if(accReq != null){
      plan.add(accReq);
    } 

    // Enable ServiceNow Account
    accReq = getAccountRequest(identity,STR_ONESTOP_SERVICENOW,"");
    if(accReq != null){
      plan.add(accReq);
    } 
    // Enable BIZAPP Account
    accReq  = getAccountRequest(identity,STR_BIZAPP,"");
    if(accReq != null){
      plan.add(accReq);
    }

    // Enable CIAM Users Vault Account
    accReq  = getAccountRequest(identity,STR_CIAM_USERS_VAULT,"");
    if(accReq != null){
      plan.add(accReq);
    }

    // Enable HR Application
    appObj  = context.getObjectByName(Application.class, STR_HR_APP);
    if(appObj != null){
      linkObj = identity.getLink(appObj);
      if(linkObj != null){
        //  linkObj.setDisabled(false);
        linkObj.setAttribute("IIQDisabled",false);
        context.saveObject(linkObj);
        context.commitTransaction();
      } 
    }
    /* appObjDisconnectedApp1  = context.getObjectByName(Application.class, "Disconnected Application1");
    if(appObjDisconnectedApp1 != null){
      linkObj = identity.getLink(appObjDisconnectedApp1);
      if(linkObj != null){
        //linkObj.setDisabled(true);
        linkObj.setAttribute("IIQDisabled",false);
        context.saveObject(linkObj);
        context.commitTransaction();
      } 
    }
      appObjDisconnectedApp2  = context.getObjectByName(Application.class, "Disconnected Application2");
    if(appObjDisconnectedApp2 != null){
      linkObj = identity.getLink(appObjDisconnectedApp2);
      if(linkObj != null){
        //linkObj.setDisabled(true);
        linkObj.setAttribute("IIQDisabled",false);
        context.saveObject(linkObj);
        context.commitTransaction();
      } 
    }*/
    return plan;

  }

  // Method for creating the plan to move the users into repectives OU's
  public ProvisioningPlan buildMoverPlan(Identity identity){
    log.info("Inside Common Rule Library buildMoverPlan() ");
    plan = new ProvisioningPlan();
    plan.setIdentity(identity);
    String strEmpType = identity.getAttribute(ATR_EMPLOYEETYPE) != null ? identity.getAttribute(ATR_EMPLOYEETYPE) :"";
    log.info("Inside Common Rule Library buildMoverPlan() strEmpType  "+strEmpType);
    if(Util.isNotNullOrEmpty(strEmpType)){
      System.out.println("buildMoverPlan If sratr :::");
      Application appObj  = context.getObjectByName(Application.class, "Active Directory");
      System.out.println("buildMoverPlan :::"+appObj);

      if(appObj != null){
        Link linkObj = identity.getLink(appObj);
        log.info("Inside Common Rule Library buildMoverPlan() before linkObj not check");
        if(linkObj != null){
          log.info("Inside Common Rule Library buildMoverPlan()  inside null check");
          if(linkObj.isDisabled()){
            createEnablePlan(identity);
          }else {
            AccountRequest adAccountReq = new AccountRequest();
            adAccountReq.setApplication(STR_ACTIVE_DIRECTORY);
            adAccountReq.setNativeIdentity(linkObj.getNativeIdentity());
            adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

            AccountRequest IIQAccountReq = new AccountRequest();
            IIQAccountReq.setOperation(AccountRequest.Operation.Modify);
            IIQAccountReq.setApplication(APP_IIQ);
            IIQAccountReq.setNativeIdentity(identity.getName());
            if(STR_EMPLOYEE.equalsIgnoreCase(strEmpType)){
              adAccountReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_ASSOCIATE_OU));
              //IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,ProvisioningPlan.AccountRequest.Operation.Remove,STR_CONTRACTORBIZROLE));
              IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_ASSOCIATEBIZROLE));
            }
            else if(STR_CONTRACTOR.equalsIgnoreCase(strEmpType)){
              adAccountReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_CONTRACTOR_OU));
              //IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,ProvisioningPlan.AccountRequest.Operation.Remove,STR_ASSOCIATEBIZROLE));
              IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_CONTRACTORBIZROLE));
            }
            else if(STR_FEPOCEMPLOYEE.equalsIgnoreCase(strEmpType)){
              adAccountReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_FEPOCASSOCIATE_OU));
              //IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,ProvisioningPlan.AccountRequest.Operation.Remove,STR_FEPOCCONTRACTORBIZROLE));
              IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_FEPOCASSOCIATEBIZROLE));
            }
            else if(STR_FEPOCCONTRACTOR.equalsIgnoreCase(strEmpType)){
              adAccountReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,STR_FEPOCCONTRACTOR_OU));
              //IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,ProvisioningPlan.AccountRequest.Operation.Remove,STR_FEPOCASSOCIATEBIZROLE));
              IIQAccountReq.add(new AttributeRequest(ATR_ASSIGNEDROLES,STR_FEPOCCONTRACTORBIZROLE));
            }
            plan.add(adAccountReq);
            plan.add(IIQAccountReq);
            log.info("Inside Common Rule Library buildMoverPlan() plan is  "+plan);
          }
        }
      }
    }
    return plan;
  }

  //below method is used to get the errors from project
  public List getErrors(SailPointContext context, ProvisioningProject project){
    System.out.println("Enter getErrors for Project");
    List errors = new ArrayList();
    List plans = project.getPlans();
    if (plans == null || plans.isEmpty()){
      System.out.println("No plans to evaluate");
      return errors;
    }
    for (ProvisioningPlan plan : plans){
      List e = getErrors(context, plan);
      if (e != null @and !e.isEmpty()){
        errors.addAll(e);
      }
    }
    System.out.println("Exit getErrors for Project: " + errors);
    return errors;
  }
  public List getErrors(SailPointContext context, ProvisioningPlan plan){
    System.out.println("Enter getErrors for Plan");
    List errors = new ArrayList();
    if (plan == null){
      System.out.println("No plan");
      return errors;
    }
    System.out.println("Have plan: " + plan.toXml());
    ProvisioningResult result = plan.getResult();
    errors.addAll(getErrors(plan.getTargetIntegration(), result));
    if(plan.getAccountRequests() != null) {
      System.out.println("Loop account requests");
      for(AccountRequest request : plan.getAccountRequests()) {
        result = request.getResult();
        errors.addAll(getErrors(request.getApplication(), result));
        List attrReqs = request.getAttributeRequests();
        System.out.println("Have the attr reqs");
        if (attrReqs != null @and !attrReqs.isEmpty()){
          System.out.println("Loop the attr reqs");
          for (AttributeRequest attrReq : attrReqs){
            result = attrReq.getResult();
            errors.addAll(getErrors(attrReq.getName(),result));
          }
        }
      }
    }
    System.out.println("Exit getErrors for plan: " + errors);
    return errors;
  }
  public List getErrors(String target, ProvisioningResult result){
    System.out.println("Enter getErrors for Result");
    List errors = new ArrayList();
    if (result == null){
      System.out.println("No result");
      return errors;
    }
    System.out.println("Have request result: " + result.toXml());
    if(result.getErrors() != null){
      System.out.println("Loop the request errors");
      for (Message msg : result.getErrors()){
        System.out.println("Add error: " + msg.getMessage());
        if(target != null)  errors.add("Target:" + target + " " + msg.getMessage());
        else errors.add(msg.getMessage());
      }
    }
    if(result.getWarnings() != null){
      System.out.println("loop the request warnings");
      for (Message msg : result.getWarnings()){
        System.out.println("Add warning: " + msg.getMessage());
        if(target != null)  
          errors.add("Target:" + target + " " + msg.getMessage());
        else 
          errors.add(msg.getMessage());
      }
    }
    System.out.println("Exit getErrors for Result: " + errors);
    return errors;
  }

  //This method will send the email notifications to respective managers
  public void  sendEmailNotification(String identityName, String templateName){
    log.info("Inside Common Rule Library sendEmailNotification() ");
    EmailTemplate template = context.getObjectByName(EmailTemplate.class, templateName);
    Identity identity = context.getObjectByName(Identity.class, identityName);
    if(template != null @and identity != null){

      String email = "SailPointSystem@carefirst.com";
      EmailOptions options = new EmailOptions();
      
      if(!templateName.toLowerCase().contains("fail")){
      Identity manager=identity.getManager();
      if(manager == null){
        options.setTo(email);
      }else{
        if(null != manager.getEmail()){
          options.setTo(manager.getEmail());
        }else{
          options.setTo(email);
        }
      }
      }
      else{
         options.setTo(email);
      }
      log.info("Inside Common Rule Library sendEmailNotification() "); 

      Map args = new HashMap();
      args.put("identityName", identity.getName());

      options.setVariables(args);
      context.sendEmailNotification(template, options);
    }else
      throw new GeneralException("TemplateName is not found in SIQ "+templateName);
  }
  //This method will send the email notifications to respective managers
  public void  sendEmailNotification(String identityName, String templateName,String event){
    log.info("Inside Common Rule Library sendEmailNotification() ");
    EmailTemplate template = context.getObjectByName(EmailTemplate.class, templateName);
    identity = identity = getIdentityObj(identityName);
    String emailAD="";
    if(template != null @and identity != null){
      List bundleList = new ArrayList();
      List dacRolesList = new ArrayList();
      List linkList=new ArrayList();
      List applicationList=new ArrayList();
      linkList=identity.getLinks();
      for(Link l:linkList){  
        applicationList.add(l.getApplicationName());
        if(applicationList.contains("HR Application")){
          applicationList.remove("HR Application");
        }
        if(l.getApplicationName().equals("Active Directory")){

          if(l.getAttribute("mail") != null){
            emailAD = l.getAttribute("mail");
          }
        }

      }

      // String assignedRoleSummary = identity.getAssignedRoleSummary();
      // String bundleSummary = identity.getBundleSummary();
      //bundleList.addAll(Util.csvToList(assignedRoleSummary));
      // bundleList.addAll(Util.csvToList(bundleSummary)); 


      List roleListData= identity.getAssignedRoles();
      List detectedroleListData= identity.getDetectedRoles();
      log.info("Inside Common Rule detectedroleListData::: "+detectedroleListData);
      //ArrayList a=new ArrayList();
      for(Bundle roleMetaData:roleListData){
        bundleList.add(roleMetaData.getName());

        if(null != roleMetaData.getAttribute("assignment") &amp;&amp; !roleMetaData.getAttribute("assignment").equalsIgnoreCase("Mandatory")){
          dacRolesList.add(roleMetaData.getName());
        }  
      }
      for(Bundle detectedroleMetaData:detectedroleListData){
        if(null != detectedroleMetaData.getAttribute("assignment") &amp;&amp; !detectedroleMetaData.getAttribute("assignment").equalsIgnoreCase("Mandatory")){
          if(!dacRolesList.contains(detectedroleMetaData.getName())){
            dacRolesList.add(detectedroleMetaData.getName());
          }
        }

      }
      log.info("Inside Common Rule dacRolesList::: "+dacRolesList);
      String email = "SailPointSystem@carefirst.com";
      EmailOptions options = new EmailOptions();
      
      if(!templateName.toLowerCase().contains("fail")){
      Identity manager=identity.getManager();
      if(manager == null){
        options.setTo(email);
      }else{
        if(null != manager.getEmail()){
          options.setTo(manager.getEmail());
        }else{
          options.setTo(email);
        }
      }
      }
      else{
         options.setTo(email);
      }
      log.info("Inside Common Rule Library sendEmailNotification() "); 

      Map args = new HashMap();
      args.put(ATR_USERID, identity.getAttribute(ATR_USERID));
      args.put(ATR_PASSWORD, context.decrypt(identity.getPassword()));
      args.put(ATR_DISPLAYNAME,identity.getDisplayName());
      args.put(ATR_NAME,identity.getName());
      args.put(ATR_MANAGERNAME,identity.getManager()!=null ? identity.getManager().getDisplayName():"");
      args.put(ATR_EMAIL,emailAD);
      args.put(ATR_FIRSTNAME,identity.getFirstname());
      args.put(ATR_IDEN_LASTNAME,identity.getLastname());
      args.put(ATR_COSTCENTER,identity.getAttribute(ATR_COSTCENTER));
      args.put(ATR_EMPLOYEEID,identity.getAttribute(ATR_EMPLOYEEID));
      args.put(ATR_EMPLOYEETYPE, identity.getAttribute(ATR_EMPLOYEETYPE));
      args.put("effDate", identity.getAttribute("effdt"));
      args.put("usertype", identity.getAttribute("employeetype"));
      args.put(ATR_VENDOR,identity.getAttribute(ATR_VENDOR));

      args.put(ATR_BUNDLE_LIST,bundleList);
      args.put("applicationList",applicationList);
      args.put("dacRolesList",dacRolesList);
      // args.put("nativeIdentityList",nativeIdentityList);
      //  args.put("status",status);
      args.put(ATR_COMPANY,identity.getAttribute(ATR_COMPANY) !=null ?identity.getAttribute(ATR_COMPANY) :"NA");

      //System.out.println("assignedRoleSummary.................................."+bundleSummary+assignedRoleSummary);
      System.out.println("args......................................................................."+args+bundleList);

      options.setVariables(args);
      context.sendEmailNotification(template, options);
    }else
      throw new GeneralException("TemplateName is not found in SIQ "+templateName);
  }
  //This method will send the email notifications to respective managers
  public void  sendEmailNotification(String identityName,Map map, String templateName){
    log.info("Inside Common Rule Library sendEmailNotification()map is  "+map);
    EmailTemplate template = context.getObjectByName(EmailTemplate.class, templateName);

    identity = getIdentityObj(identityName);
    if(template != null @and identity != null){

     String email = "SailPointSystem@carefirst.com";
      EmailOptions options = new EmailOptions();
      
      if(!templateName.toLowerCase().contains("fail")){
      Identity manager=identity.getManager();
      if(manager == null){
        options.setTo(email);
      }else{
        if(null != manager.getEmail()){
          options.setTo(manager.getEmail());
        }else{
          options.setTo(email);
        }
      }
      }
      else{
         options.setTo(email);
      }
      log.info("Inside Common Rule Library sendEmailNotification() "); 

      Map args = new HashMap();
      args.put("identityName", identity.getName());
      args.put("errorMsg",map.get(identityName));

      options.setVariables(args);
      context.sendEmailNotification(template, options);
    }else
      throw new GeneralException("TemplateName is not found in SIQ "+templateName);
  }

  //The below method createAuditEvent, will use for auditing the custom audit events in the system
  public boolean createAuditEvent(String source, String target, String actionInterface, String action, String application, String accountName, String attributeName, String attributeValue, Map attributes, String value1, String value2, String value3, String value4){
    log.info("Inside Common Rule Library createAuditEvent() ");

    if(Util.isNullOrEmpty(action)){
      log.error("createAuditEvent: action value is null or empty. Exiting");
      return false;
    }
    if(Auditor.isEnabled(action)){
      AuditEvent auditEvent = new AuditEvent();
      auditEvent.setSource(source);
      auditEvent.setTarget(target);
      auditEvent.setInterface(actionInterface);
      auditEvent.setAction(action);
      auditEvent.setApplication(application);
      auditEvent.setAccountName(accountName);
      auditEvent.setAttributeName(attributeName);
      auditEvent.setAttributeValue(attributeValue);
      auditEvent.setString1(value1);
      auditEvent.setString2(value2);
      auditEvent.setString3(value3);
      auditEvent.setString4(value4);
      auditEvent.setAttributes(new Attributes(attributes));
      Auditor.log(auditEvent);
      context.commitTransaction();
      return true;
    }
    else{
      log.error("Audit Action is not exits/enable");
      return false;
    }
  }

  //Single Account Aggregation

  public String singleAccountAggregation(String strAppName, String strAccountName) {

    String errorMessage = "";
    try{

      // We need some values defined to know which account we want to aggregate.
      String applicationName = strAppName;
      String accountName = strAccountName;
      // We have already validated all of the arguments. No just load the objects.
      Application appObject = context.getObjectByName(Application.class, applicationName);
      String appConnName = appObject.getConnector();
      Connector appConnector = sailpoint.connector.ConnectorFactory.getConnector(appObject, null);
      if (null == appConnector) {
        errorMessage = "Failed to construct an instance of connector [" + appConnName + "]";
        return errorMessage;
      }
      ResourceObject rObj = null;
      try {

        rObj = (ResourceObject) appConnector.getObject("account", accountName, null);


      } catch (sailpoint.connector.ObjectNotFoundException onfe) {
        errorMessage = "Connector could not find account: [" + accountName + "]";
        errorMessage += " in application [" + applicationName + "]";
        return errorMessage;
      }
      //return rObj;
      if (null == rObj) {
        errorMessage = "ERROR: Could not get ResourceObject for account: " + accountName;
        return errorMessage;
      }

      Attributes argMap = new Attributes();
      argMap.put("promoteAttributes", "true");
      argMap.put("correlateEntitlements", "true");
      argMap.put("noOptimizeReaggregation", "true"); // Note: Set to false to disable re-correlation.
      argMap.put("checkDeleted", "true");
      Aggregator agg = new Aggregator(context, argMap);
      if (null == agg) {
        errorMessage = "Null Aggregator returned from constructor. Unable to Aggregate!";
        return errorMessage;
      }

      TaskResult taskResult = agg.aggregate(appObject, rObj);

      if (null == taskResult) {
        errorMessage = "ERROR: Null taskResult returned from aggregate() call.";
        // customLog.error(errorMessage);
        return errorMessage;
      }

      return "Success";
    }
    catch(Exception e){
      log.error("Exception in AD Aggegration");

    }

  }




  public insertDBOperation(Map m){


    String jdbcClass = "com.mysql.jdbc.Driver";
    String username = "root";
    String password = "Carefirst123!";
    String url = "jdbc:mysql://localhost/AffiliateManagement";
    PreparedStatement statement = null;
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());

    driver = (Driver)Class.forName(jdbcClass).newInstance();


    DriverManager.registerDriver(driver);
    Connection connection = DriverManager.getConnection(url, username, password);
    String sqlQuery = "insert into Affiliate_Org(TAX_IDNTN_NER,LGL_NM ,ORGN_ADDRESS1,ORGN_ADDRESS2 ,ORGN_CITY,ORGN_STATE ,ORGN_ZIPCODE ,ORGN_PHONE ,BRCH_DIV_NM ,BRCH_DIV_ID,INSRT_BY,INSRT_TMSTP,LAST_UPDT_BY,LSAT_UPDT_TMSTP,XTRNL_ORGN_TYP_ID) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    statement = connection.prepareStatement(sqlQuery);
    if(m.get("taxID")!=null){
      statement.setString(1, m.get("taxID"));
    }else {
      statement.setString(1, "");
    }
    if(m.get("entityName")!=null){
      statement.setString(2, m.get("entityName"));
    }else {
      statement.setString(2, "");
    }
    if(m.get("address1")!=null){
      statement.setString(3, m.get("address1"));
    }else {
      statement.setString(3, "");
    }
    if(m.get("address2")!=null){
      statement.setString(4, m.get("address2"));

    } else {
      statement.setString(4, "");

    }
    if(m.get("city")!=null){
      statement.setString(5, m.get("city"));
    }else {
      statement.setString(5, "");
    }
    if(m.get("state")!=null){
      statement.setString(6, m.get("state"));
    }else {
      statement.setString(6, "");
    }
    if(m.get("zip")!=null){
      statement.setString(7, m.get("zip"));
    }else {
      statement.setString(7, "");
    }
    if(m.get("phone")!=null){
      statement.setString(8, m.get("phone"));
    } else {
      statement.setString(8, "");
    }
    if(m.get("branchName")!=null){
      statement.setString(9, m.get("branchName"));
    }else {
      statement.setString(9, "");
    }
    if(m.get("branchId")!=null){
      statement.setString(10, m.get("branchId"));
    }else {
      statement.setString(10, "");
    }
    if(m.get("tsr")!=null){
      statement.setString(11, m.get("tsr"));
    }else {
      statement.setString(11, "");
    }

    statement.setTimestamp(12,timestamp);

    if(m.get("tsr")!=null){
      statement.setString(13, m.get("tsr"));
    }else {
      statement.setString(13, "");
    }

    statement.setTimestamp(14, timestamp);


    statement.setInt(15, 0);




    statement.executeUpdate();



    statement.close();
  }
  //Update Operation
  public updateDBOperation(Map m){


    String jdbcClass = "com.mysql.jdbc.Driver";
    String username = "root";
    String password = "Carefirst123!";
    String url = "jdbc:mysql://localhost/AffiliateManagement";
    PreparedStatement statement = null;
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());

    driver = (Driver)Class.forName(jdbcClass).newInstance();


    DriverManager.registerDriver(driver);
    Connection connection = DriverManager.getConnection(url, username, password);


    String sqlQuery = "UPDATE  Affiliate_Org set TAX_IDNTN_NER =?,BRCH_DIV_NM =? ,ORGN_ADDRESS1=?,ORGN_ADDRESS2=?,ORGN_CITY=?,ORGN_STATE=?,ORGN_ZIPCODE=?,ORGN_PHONE=? ,BRCH_DIV_ID=?,LAST_UPDT_BY=?,LSAT_UPDT_TMSTP=?,XTRNL_ORGN_TYP_ID=? where LGL_NM = ?";
    statement = connection.prepareStatement(sqlQuery);
    if(m.get("taxID")!=null){
      statement.setString(1, m.get("taxID"));
    }else {
      statement.setString(1, "");
    }
    if(m.get("branchName")!=null){
      statement.setString(2, m.get("branchName"));
    }else {
      statement.setString(2, "");
    }
    if(m.get("address1")!=null){
      statement.setString(3, m.get("address1"));
    }else {
      statement.setString(3, "");
    }
    if(m.get("address2")!=null){
      statement.setString(4, m.get("address2"));

    } else {
      statement.setString(4, "");

    }
    if(m.get("city")!=null){
      statement.setString(5, m.get("city"));
    }else {
      statement.setString(5, "");
    }
    if(m.get("state")!=null){
      statement.setString(6, m.get("state"));
    }else {
      statement.setString(6, "");
    }
    if(m.get("zip")!=null){
      statement.setString(7, m.get("zip"));
    }else {
      statement.setString(7, "");
    }
    if(m.get("phone")!=null){
      statement.setString(8, m.get("phone"));
    } else {
      statement.setString(8, "");
    }

    if(m.get("branchId")!=null){
      statement.setString(9, m.get("branchId"));
    }else {
      statement.setString(9, "");
    }
    if(m.get("tsr")!=null){
      statement.setString(10, m.get("tsr"));
    }else {
      statement.setString(10, "");
    }

    statement.setTimestamp(11,timestamp);




    statement.setInt(12, 0);



    if(m.get("entityName")!=null){
      statement.setString(13, m.get("entityName"));
    }else {
      statement.setString(13, "");
    }

    statement.executeUpdate();



    statement.close();
  }
  //Delete Operation
  public deleteDBOperation(Map m){


    String jdbcClass = "com.mysql.jdbc.Driver";
    String username = "root";
    String password = "Carefirst123!";
    String url = "jdbc:mysql://localhost/AffiliateManagement";
    PreparedStatement statement = null;
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());

    driver = (Driver)Class.forName(jdbcClass).newInstance();


    DriverManager.registerDriver(driver);
    Connection connection = DriverManager.getConnection(url, username, password);


    String sqlQuery = "DELETE FROM Affiliate_Org WHERE LGL_NM = ?";
    statement = connection.prepareStatement(sqlQuery);



    if(m.get("entityName")!=null){
      statement.setString(1, m.get("entityName"));
    }else {
      statement.setString(1, "");
    }

    statement.executeUpdate();



    statement.close();
  }
  public requestDisconnectApplication(String disconnecrAppName,String identityName){


    Identity identityObject = context.getObjectByName(Identity.class, identityName); 
    //Identity identityObject1 = context.getObjectByName(Identity.class, identityName); 

    ProvisioningPlan plan = new ProvisioningPlan();
    log.info("Employee... Create plan."+plan); 
    System.out.println("requestDisconnectApplication..");

    List accreqs = new ArrayList(); 
    AccountRequest acctReq1 = new AccountRequest(); 

    acctReq1.setOperation(AccountRequest.Operation.Create); 

    acctReq1.setApplication(disconnecrAppName);
    acctReq1.add(new AttributeRequest("MANAGER_POSITION_NUMBER",identityObject.getManager().getName())); 
    acctReq1.setNativeIdentity(identityObject.getName());

    acctReq1.add(new AttributeRequest("IIQDisabled",ProvisioningPlan.Operation.Set,"true"));

    accreqs.add(acctReq1); 



    plan.setAccountRequests(accreqs); 

    plan.setIdentity(identityObject); 
    System.out.println("requestDisconnectApplication.."+plan);
    Provisioner provisioner= new Provisioner(context);
    provisioner.setNoLocking(true);
    provisioner.setOptimisticProvisioning(true);
    ProvisioningProject project =  provisioner.compile(plan);
    System.out.println("requestDisconnectApplication.."+plan.toXml()+project.toXml());
    provisioner.execute(plan);

    System.out.println("requestDisconnectApplication..");
    /*Attributes attributes = new Attributes();

    attributes.put("UserID",identityObject.getAttribute("userid"));
    attributes.put("FirstName",identityObject.getAttribute("firstname"));
    attributes.put("LastName",identityObject.getAttribute("lastName"));

    createAuditEvent("Carefirst-Leaver-OneStop Ticket Notification","One stop ticket has been raised for the UserID:"+identityObject.getAttribute("userid"),null,"Carefirst-Leaver-OneStop Ticket Notification",null,null,null,null,attributes,null,null,null,null);


   if(identityObject != null){

   //   identityObject.setAttribute(ATR_EMPLOYEESTATUS,STR_TERMINATE);
      System.out.println("requestDisconnectApplication..***");
      context.saveObject(identityObject);
      context.commitTransaction();
    }*/


  }

  public requestDisconnectApplication1(String disconnecrAppName,String identityName){


    Identity identityObject = context.getObjectByName(Identity.class, identityName); 
    //Identity identityObject1 = context.getObjectByName(Identity.class, identityName); 

    ProvisioningPlan plan = new ProvisioningPlan();
    log.info("Employee... Create plan."+plan);                                       

    List accreqs = new ArrayList(); 
    AccountRequest acctReq1 = new AccountRequest(); 

    acctReq1.setOperation(AccountRequest.Operation.Create); 

    acctReq1.setApplication(disconnecrAppName);
    acctReq1.add(new AttributeRequest("MANAGER_POSITION_NUMBER",identityObject.getManager().getName())); 
    acctReq1.setNativeIdentity(identityObject.getName());

    acctReq1.add(new AttributeRequest("IIQDisabled",ProvisioningPlan.Operation.Set,"false"));

    accreqs.add(acctReq1); 



    plan.setAccountRequests(accreqs); 

    plan.setIdentity(identityObject); 
    Provisioner provisioner= new Provisioner(context);
    provisioner.setNoLocking(true);
    provisioner.setOptimisticProvisioning(true);
    ProvisioningProject project =  provisioner.compile(plan);

    provisioner.execute(plan);

  }

  public ProvisioningPlan changeOU(Identity identity,String dn){
    //  log.info("Inside Common Rule Library buildMoverPlan() ");
    plan = new ProvisioningPlan();
    plan.setIdentity(identity);


    appObj  = context.getObjectByName(Application.class, STR_ACTIVE_DIRECTORY);


    if(appObj != null  ){
      linkObj = identity.getLink(appObj);


      if(linkObj != null ){

        AccountRequest adAccountReq = new AccountRequest();
        adAccountReq.setApplication(STR_ACTIVE_DIRECTORY);
        adAccountReq.setNativeIdentity(linkObj.getNativeIdentity());
        adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);



        adAccountReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,dn));




        plan.add(adAccountReq);

        log.info("Inside Common Rule Library buildMoverPlan() plan is  "+plan);
      }
    }

    return plan;
  }
  public ProvisioningPlan buildAccountDeletePlan(Identity identity){
    log.info("Inside Common Rule Library buildCustomPlan() "+identity);
    plan = new ProvisioningPlan();
    plan.setIdentity(identity);

    // Delete Disconnected Application1 Account
    String STR_DISCONNECTEDAPP1 = "Disconnected Application1";
    accReq = getAccountRequest(identity,STR_DISCONNECTEDAPP1,STR_DELETE);
    System.out.println("Disconnected Application1--------"+accReq);
    log.info("Disconnected Application1--------"+accReq);
    if(accReq != null){
      plan.add(accReq);
    }

    // Delete Active Directory Account
    accReq  = getAccountRequest(identity,STR_ACTIVE_DIRECTORY,STR_DELETE);
    System.out.println("Active Directory--------"+accReq);
    log.info("Active Directory--------"+accReq);
    if(accReq != null){
      plan.add(accReq);
    }

    // Delete Biz Active Directory Account
    accReq  = getAccountRequest(identity,STR_BIZAPP,STR_DELETE);
    System.out.println("Biz Active Directory--------"+accReq);
    log.info("Biz Active Directory--------"+accReq);
    if(accReq != null){
      plan.add(accReq);
    }
    // Delete LDAP Account

    accReq = getAccountRequest(identity,STR_ISAM_LDAP,STR_DELETE);
    System.out.println("ISAM LDAP--------"+accReq);
    log.info("ISAM LDAP--------"+accReq);
    if(accReq != null){
      plan.add(accReq);
    } 

    // Delete CIAM User Vault Account
    accReq  = getAccountRequest(identity,STR_CIAM_User_Vault,STR_DELETE);
    System.out.println("CIAM_User_Vault--------"+accReq);
    log.info("CIAM_User_Vault--------"+accReq);
    if(accReq != null){
      plan.add(accReq);
    }

    /*//Delete JMSReqVault Application
    accReq = getAccountRequest(identity,STR_JMS_REQ_VALUT_NAME,STR_DELETE);
    if(accReq != null){
      plan.add(accReq);
    } */

    // Delete ServiceNow Account
    accReq = getAccountRequest(identity,STR_ONESTOP_SERVICENOW,STR_DELETE);
    System.out.println("ServiceNow--------"+accReq);
    log.info("ServiceNow--------"+accReq);
    if(accReq != null){
      plan.add(accReq);
    } 


    System.out.println("DeletePlan--------"+plan);
    log.info("DeletePlan--------"+plan);
    return plan;
  }
  void updateTicket(String ticket,String comments){
    try {  

      Custom conf=context.getObject(Custom.class, "SP_SPNT_SNOW_INT_ServiceNowCredentialConfig");
      String endpoint=conf.getString("url");
      //testStatus=conf.getString("url");
      log.error("url = " + endpoint);
      JSONObject body = new JSONObject();   
      body.put("additional_comments", comments);

      //testStatus=conf.getString("username");	
      //UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(conf.getString("username"), context.decrypt(conf.getString("password")));
      UsernamePasswordCredentials credentials = new UsernamePasswordCredentials("sa-SailpointServiceNow", "Snow@123");
      CredentialsProvider credsProvider = new BasicCredentialsProvider();
      credsProvider.setCredentials(new AuthScope (AuthScope.ANY), credentials);

      RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(120000).setConnectionRequestTimeout(120000).setSocketTimeout(120000).build();
      HttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setDefaultCredentialsProvider(credsProvider).build();

      HttpPost httpPost = null;
      HttpResponse response;
      StatusLine restStatus;

      try 
      {

        URI updateRITMStatus = URI.create(endpoint+"updateState/"+ticket);

        httpPost = new HttpPost(updateRITMStatus);

        httpPost.setHeader("Content-Type", "application/json");
        httpPost.setHeader("Accept", "application/json");

        if (null != log)
          log.debug((Object)("JSON for RITM Update:" + body));

        httpPost.setEntity(new StringEntity(body.toString(), ContentType.APPLICATION_JSON));

        response = httpClient.execute(httpPost);

        restStatus = response.getStatusLine();
        testStatus = restStatus.getStatusCode()+"";

        if (restStatus.getStatusCode() != 200) {
          if(null != log)
            log.debug("Failed to Update RITM Status. HTTP error code : " + restStatus.getStatusCode());  

        }else{
          if(null != log)
            log.debug("Success to Update RITM Status. HTTP error code : " + restStatus.getStatusCode());
        }  

      } finally
      {			
        if(null != httpPost) { httpPost.releaseConnection(); }		
      }


    } catch (MalformedURLException e) {  
      e.printStackTrace();

    } catch (IOException e) {  
      e.printStackTrace();    
    }

  }

  public String checkFEPOC(String empID,String [] returnedAtts) {

    String message = "";


    Application appObj = context.getObjectByName(Application.class, "FEPOC AD DEV - Read Only");

    //return appObj.getAttributes().get("domainSettings").get(0).get("password");
    //  return appObj.getAttributes().get("domainSettings").get(0).get("servers").get(0);
    // return appObj.getAttributes().get("searchDNs").get(0).get("searchDN");
    //String LDAP_URL = "ldap://SV-ADBI-T1.bizappstest.local:389";
    //String LDAP_URL = "ldap://172.29.218.128:389";

    String LDAP_URL = "ldap://"+appObj.getAttributes().get("domainSettings").get(0).get("servers").get(0)+":"+appObj.getAttributes().get("domainSettings").get(0).get("port");
    String SECURITY_AUTH = "simple";
    String CTXT_FACTORY = "com.sun.jndi.ldap.LdapCtxFactory";

    try
    {
      Hashtable ldapEnv = new Hashtable(11);
      ldapEnv.put(Context.INITIAL_CONTEXT_FACTORY, CTXT_FACTORY);
      ldapEnv.put(Context.PROVIDER_URL, LDAP_URL);
      ldapEnv.put(Context.SECURITY_AUTHENTICATION, SECURITY_AUTH);
      //ldapEnv.put(Context.SECURITY_PRINCIPAL, "bizappstest\\ciam-service" );
      //ldapEnv.put(Context.SECURITY_CREDENTIALS, context.decrypt("1:ACP:Zjnc4TF7sXHf1+cdvzIENoXATMQ5hzFUuVmcA6nqbl0="));
      ldapEnv.put(Context.SECURITY_PRINCIPAL,appObj.getAttributes().get("domainSettings").get(0).get("user"));
      ldapEnv.put(Context.SECURITY_CREDENTIALS, context.decrypt(appObj.getAttributes().get("domainSettings").get(0).get("password")));
      DirContext ldapContext = new InitialDirContext(ldapEnv);
      int count = 0;

      // Create the search controls         
      SearchControls searchCtls = new SearchControls();

      //Specify the attributes to return
      //String [] returnedAtts={"samaccountname"};
      searchCtls.setReturningAttributes(returnedAtts);

      //Specify the search scope
      searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

      //specify the LDAP search filter
      String searchFilter = "(employeeID="+empID+")";
      //String searchFilter = "CN=Bobby Mathaudhu";
      // String searchFilter = empID;

      //Specify the Base for the search

      //initialize counter to total the results
      int totalResults = 0;
      //String searchBase = "DC=bizappstest,DC=local";
      //String searchBase = "CN=Users, DC=fepocdev,DC=com";
      String searchBase = appObj.getAttributes().get("searchDNs").get(0).get("searchDN");
      // Search for objects using the filter
      NamingEnumeration answer = ldapContext.search(searchBase, searchFilter, searchCtls);

      //Loop through the search results
      boolean flag;
      /*while (answer.hasMoreElements())
          {
            SearchResult sr = (SearchResult) answer.next();      
            Attributes attrs = sr.getAttributes();
            count++;
            if (attrs != null)
            {
                NamingEnumeration ne = attrs.getAll();
                while (ne.hasMore())
                {
                  Attribute attr = (Attribute) ne.next();


                }
                ne.close();
              }
            flag= true;
          }*/

      if(answer.hasMoreElements()){
        while (answer.hasMoreElements())
        {
          SearchResult sr = (SearchResult) answer.next();      
          javax.naming.directory.Attributes attrs = sr.getAttributes();
          count++;
          if (attrs != null)
          {
            NamingEnumeration ne = attrs.getAll();
            while (ne.hasMore())
            {
              javax.naming.directory.Attribute attr = (Attribute) ne.next();
              System.out.println("Attribute  :: " + attr);
              message= message+attr.toString();
              //message=message.substring(message.indexOf(":")+2);
            }
            ne.close();
          }

        }

        // message= "Success";
      }

      else
        message= "Not found";

      Custom customObj= context.getObjectByName(Custom.class,"CF-FEPOC AD Proxy-Custom");

      if(customObj.get(empID+"_"+returnedAtts[0])!=null)
        message=customObj.get(empID+"_"+returnedAtts[0]);
      else
        message="Not found"; 

    }catch(NamingException e){
      e.printStackTrace();
      return e.toString();
    } catch (Exception e){
      e.printStackTrace();
      return e.toString();
    }
    return message;
  }

  public String getUseridFromFEPOC(String empID){
    String [] returnedAtts={"samaccountname"};
    String userid = checkFEPOC(empID,returnedAtts);
    return userid;
  }
  public String getMailFromFEPOC(String empID){
    String [] returnedAtts={"mail"};
    String mail = checkFEPOC(empID,returnedAtts);
    //return mail.substring(mail.indexOf(":")+2);
    return mail;
  }
  public boolean dnValidation(String dn) {
    if (dn != null) {
      QueryOptions qo = new QueryOptions();
      qo.addFilter(Filter.eq("nativeIdentity", dn));
      qo.addFilter(Filter.eq("application.name", "Active Directory"));
      System.out.println("Inside Rule:CF-CommonLibrary-Rule, inside method: dnValidation, before DN validation check");
      //If count is higher than zero, it means a DN already exists
      if (context.countObjects(Link.class, qo) > 0) {
        //Return a String will result in an error message, else no error will be thrown
        System.out.println("Inside Rule:CF-CommonLibrary-Rule, inside method: dnValidation, inside if condition, DN already exists.");
        return false;
      }else{
        System.out.println("Inside Rule:CF-CommonLibrary-Rule, inside method: dnValidation, inside else condition, DN available.");
        return true;
      }
    }
  }

  // this method is used to run thee refresh identity cube 
  public void runRefreshTask(String identityName){

    TaskManager taskManger = new TaskManager(context);
    TaskDefinition taskDef = context.getObjectByName(TaskDefinition.class, "Refresh Identity Cube");
    Attributes  arguments = taskDef.getArguments();
    Map map = arguments.getMap();
    String filterValue ="name==\""+identityName+"\"";
    map.put("filter",filterValue);
    arguments.setMap(map);
    taskDef.setArguments(arguments);
    taskManger.run(taskDef, taskDef.getArguments());
  }
  public String generateEmailinMoverScenario(Identity identity) {

    if(identity != null){

      String firstname = "";
      String employeetype = "";
      employeetype =   identity.getAttribute("employeetype");
      // String firstname =  identity.getFirstname();

      if(employeetype.equalsIgnoreCase(STR_EMPLOYEE)){
        if(identity.getAttribute("preffirstname")!=null){
          firstname =  identity.getAttribute("preffirstname");
          System.out.println("CF-Global-EmailRule........");
        }
        else{
          firstname =  identity.getAttribute("firstname");
          // firstname=hrApplication.getAttribute("FIRST_NAME");
          System.out.println("CF-Global-EmailRule.......1."+identity.getAttributes());
        }
      }
      else{
        firstname =  identity.getAttribute("firstname");
        // firstname=hrApplication.getAttribute("FIRST_NAME");
        System.out.println("CF-Global-EmailRule.......2.");
      }
      System.out.println("CF-Global-EmailRule"+firstname);
      String lastname =  identity.getLastname();
      //    String lastname = hrApplication.getAttribute("LAST_NAME");
      System.out.println("CF-Global-EmailRule"+lastname);
      String company = identity.getAttribute(ATR_COMPANY);
      //  String company = "WIL";
      System.out.println("CF-Global-EmailRule: "+company);
      String domain = "";
      if(company !=null){
        if(company.equalsIgnoreCase("CCO")){
          domain=STR_CCO_MAIL;
        }
        else if(company.equalsIgnoreCase("TRU")){
          domain=STR_TRU_MAIL;
        }
        else if(company.equalsIgnoreCase("WIL")||company.equalsIgnoreCase("NCS")){
          domain=STR_WIL_MAIL;
        }
        else if(company.equalsIgnoreCase("SBP")){
          domain=STR_SBP_MAIL;
        }
        else {
          domain=STR_CAREFIRST_MAIL;
        }
      }else {
        domain=STR_CAREFIRST_MAIL;
      }
      System.out.println("CF-Global-EmailRule"+domain);
      String email = firstname+"."+lastname+domain;
      System.out.println("email::"+email);
      boolean flag = true;

      Identity identity = null; 
      Filter emailFilter= null;
      emailFilter = Filter.eq("email",email);
      identity = context.getUniqueObject(Identity.class,emailFilter);

      if(identity != null){
        System.out.println("identity......."+email);
        String middleInit = identity.getAttribute("middlename");
        List middleList = new ArrayList();
        if(middleInit != null @and middleInit.length() != 0){
          email = firstname+"."+middleInit.charAt(0)+"."+lastname+domain;
          //middleList.add(Character.toString(middleInit.charAt(0)));
          emailFilter = Filter.eq("email",email);
          identity = context.getUniqueObject(Identity.class,emailFilter);
          if(identity == null){

            flag=false;
          }
          while(flag){

            if(middleList == null || middleList.size() == 0){
              email =   firstname+".X."+lastname+domain;
              middleList.add("X");
              emailFilter= Filter.eq("email",email);
              identity = context.getUniqueObject(Identity.class,emailFilter);
              if(identity == null){

                flag=false;
              }
              //count ++;
            }
            else{
              for (char ch = 'A'; ch @lteq 'Z'; ch++) {
                String st = Character.toString(ch);
                email = firstname+"."+st+"."+lastname+domain;
                middleList.add(st);
                emailFilter= Filter.eq("email",email);
                identity = context.getUniqueObject(Identity.class,emailFilter);
                if(identity == null){

                  flag=false;
                  break;
                }
              }
            }
          }
        }
        else{
          while(flag){

            if(middleList == null || middleList.size() == 0){
              email =   firstname+".X."+lastname+domain;
              middleList.add("X");
              emailFilter= Filter.eq("email",email);
              identity = context.getUniqueObject(Identity.class,emailFilter);
              if(identity == null){

                flag=false;
              }
              //count ++;
            }
            else{
              for (char ch = 'A'; ch @lteq 'Z'; ch++) {
                String st = Character.toString(ch);
                email = firstname+"."+st+"."+lastname+domain;
                middleList.add(st);
                emailFilter= Filter.eq("email",email);
                identity = context.getUniqueObject(Identity.class,emailFilter);
                if(identity == null){

                  flag=false;
                  break;
                }
              }
            }
          }
        }
      }
      System.out.println("Before Return::"+email);
      return email;

    }
  }
  public ProvisioningPlan buildAccountDisablePlanForAD(Identity identity){
    log.info("^^^^ Starting buildAccountDisablePlanForAD ^^^^");
    System.out.println("****** Inside Common Rule Library buildAccountDisablePlan");
    plan = new ProvisioningPlan();
    plan.setIdentity(identity);

    AccountRequest accReq = new AccountRequest();

    appObj  = context.getObjectByName(Application.class, STR_ACTIVE_DIRECTORY);
    linkObj = identity.getLink(appObj);
    if(linkObj != null){
      
      log.info("****Inside buildAccountDisablePlanForAD, inside linkObj null check ****");
      
      accReq.setApplication(STR_ACTIVE_DIRECTORY);
      accReq.setNativeIdentity(linkObj.getNativeIdentity());
      
      log.info("****Inside buildAccountDisablePlanForAD, leaving linkObj null check ****");
      
    }
    accReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);
    if(accReq != null){

      log.info("****Inside buildAccountDisablePlanForAD, inside accReq null check ****");
      
      plan.add(accReq);
      
      log.info("****Inside buildAccountDisablePlanForAD, inside accReq null check, plan = "+plan.toXml());
      
      log.info("****Inside buildAccountDisablePlanForAD, leaving accReq null check ****");
    }

    return plan;
  }




  public ProvisioningPlan buildAttributePlan(Identity identity,String dn,String cnValue){
    log.info("Inside Common Rule Library buildMoverPlan() ");
    plan = new ProvisioningPlan();
    plan.setIdentity(identity);
    String modifiedEmail =  "SMTP:" +identity.getEmail();
    //System.out.println("AD EMail------------------------------------------------------"+email+current);
    String email = "";
    if(identity != null){
      String  userid=  identity.getAttribute("userid") != null ? identity.getAttribute("userid") : "";
      String firstname = "";
      // String firstname =  identity.getFirstname();
      // if(oldValue == null){
      //if(employeetype.equalsIgnoreCase(STR_EMPLOYEE)){
      System.out.println("CF-Global-EmailRule........12");
      if(identity.getAttribute("prefFirstName")!=null){
        firstname =  identity.getAttribute("prefFirstName");
        System.out.println("CF-Global-EmailRule........11");
      }
      else{
        firstname =  identity.getAttribute("firstname");
        // firstname=hrApplication.getAttribute("FIRST_NAME");
        System.out.println("CF-Global-EmailRule.......1."+identity.getAttributes());
      }
      //}
      /* else{
firstname =  identity.getAttribute("firstname");
  // firstname=hrApplication.getAttribute("FIRST_NAME");
    System.out.println("CF-Global-EmailRule.......2.");
}*/
      System.out.println("CF-Global-EmailRule"+firstname);
      String lastname =  identity.getLastname();
      //    String lastname = hrApplication.getAttribute("LAST_NAME");
      System.out.println("CF-Global-EmailRule"+lastname);
      String company = identity.getAttribute(ATR_COMPANY);
      //  String company = "WIL";
      System.out.println("CF-Global-EmailRule: "+company);
      String domain = "";
      if(company !=null){
        if(company.equalsIgnoreCase("CCO")){
          domain=STR_CCO_MAIL;
        }
        else if(company.equalsIgnoreCase("TRU")){
          domain=STR_TRU_MAIL;
        }
        else if(company.equalsIgnoreCase("WIL")||company.equalsIgnoreCase("NCS")){
          domain=STR_WIL_MAIL;
        }
        else if(company.equalsIgnoreCase("SBP")){
          domain=STR_SBP_MAIL;
        }
        else {
          domain=STR_CAREFIRST_MAIL;
        }
      }else {
        domain=STR_CAREFIRST_MAIL;
      }
      System.out.println("CF-Global-EmailRule"+domain);
      email = firstname+"."+lastname+domain;
      System.out.println("email::"+email);
      boolean flag = true;

      Identity identity = null; 
      Filter emailFilter= null;
      emailFilter = Filter.eq("email",email);
      identity = context.getUniqueObject(Identity.class,emailFilter);

      if(identity != null){
        System.out.println("identity......."+email);
        String middleInit = identity.getAttribute("middlename");
        List middleList = new ArrayList();
        if(middleInit != null @and middleInit.length() != 0){
          email = firstname+"."+middleInit.charAt(0)+"."+lastname+domain;
          //middleList.add(Character.toString(middleInit.charAt(0)));
          emailFilter = Filter.eq("email",email);
          identity = context.getUniqueObject(Identity.class,emailFilter);
          if(identity == null){

            flag=false;
          }
          while(flag){

            if(middleList == null || middleList.size() == 0){
              email =   firstname+".X."+lastname+domain;
              middleList.add("X");
              emailFilter= Filter.eq("email",email);
              identity = context.getUniqueObject(Identity.class,emailFilter);
              if(identity == null){

                flag=false;
              }
              //count ++;
            }
            else{
              for (char ch = 'A'; ch @lteq 'Z'; ch++) {
                String st = Character.toString(ch);
                email = firstname+"."+st+"."+lastname+domain;
                middleList.add(st);
                emailFilter= Filter.eq("email",email);
                identity = context.getUniqueObject(Identity.class,emailFilter);
                if(identity == null){

                  flag=false;
                  break;
                }
              }
            }
          }
        }
        else{
          while(flag){

            if(middleList == null || middleList.size() == 0){
              email =   firstname+".X."+lastname+domain;
              middleList.add("X");
              emailFilter= Filter.eq("email",email);
              identity = context.getUniqueObject(Identity.class,emailFilter);
              if(identity == null){

                flag=false;
              }
              //count ++;
            }
            else{
              for (char ch = 'A'; ch @lteq 'Z'; ch++) {
                String st = Character.toString(ch);
                email = firstname+"."+st+"."+lastname+domain;
                middleList.add(st);
                emailFilter= Filter.eq("email",email);
                identity = context.getUniqueObject(Identity.class,emailFilter);
                if(identity == null){

                  flag=false;
                  break;
                }
              }
            }
          }
        }
      }
      System.out.println("Before Return::"+email);

    }

    String fn ="";
	String displayName = "";
	String middlename = identity.getAttribute("middleName");
	String ln =  identity.getLastname();
	if(identity.getAttribute("prefFirstName")!= null){
		fn = identity.getAttribute("prefFirstName");
	}else{
		fn =  identity.getFirstname();
	}
	if(null != middlename){
		middlename=Character.toString(middlename.charAt(0));
		displayName = ln+", "+fn+" "+middlename;
	} else {
	   displayName = ln+", "+fn;
	}

    Application appObj  = context.getObjectByName(Application.class, "Active Directory");
    // System.out.println("buildMoverPlan :::"+appObj);

    if(appObj != null){
      Link linkObj = identity.getLink(appObj);
      log.info("Inside Common Rule Library buildMoverPlan() before linkObj not check");
      if(linkObj != null){
        log.info("Inside Common Rule Library buildMoverPlan()  inside null check");
        AccountRequest adAccountReq = new AccountRequest();
        adAccountReq.setApplication(STR_ACTIVE_DIRECTORY);
        adAccountReq.setNativeIdentity(linkObj.getNativeIdentity());
        adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        adAccountReq.add(new AttributeRequest("AC_NewName",ProvisioningPlan.Operation.Set,cnValue));

        adAccountReq.add(new AttributeRequest("AC_NewParent",ProvisioningPlan.Operation.Set,dn));
        // adAccountReq.add(new AttributeRequest("proxyAddresses",ProvisioningPlan.Operation.Add,modifiedEmail));
        adAccountReq.add(new AttributeRequest("mail",ProvisioningPlan.Operation.Set,email));
        adAccountReq.add(new AttributeRequest("displayName",ProvisioningPlan.Operation.Set,displayName));

        plan.add(adAccountReq);

        log.info("Inside Common Rule Library buildMoverPlan() plan is  "+plan);
      }
    }

    return plan;
  }

  </Source>
  </Rule>
  <Rule created="1604263664227" id="0a111e5875691e4f81758590da6326ae" language="beanshell" modified="1617916781849" name="CF-UserID-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;
  String userid = identity.getAttribute(ATR_USERID);
  if(null != userid)
    return userid.toUpperCase();
  </Source>
  </Rule>
  <Rule created="1604263664355" id="0a111e5875691e4f81758590dae326af" language="beanshell" modified="1611580760660" name="CF-Title-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String jobtitle = identity.getAttribute(ATR_JOBTITLE);


System.out.println(".................project...."+project.toXml());

return jobtitle;</Source>
  </Rule>
  <Rule created="1604263664425" id="0a111e5875691e4f81758590db2926b0" language="beanshell" modified="1604263674875" name="CF-samAccountName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String samAccountName = identity.getName();
 String firstname =  identity.getFirstname();
String lastname =  identity.getLastname();
String samaacountname = firstname+lastname;

return samaacountname;</Source>
  </Rule>
  <Rule created="1604263664494" id="0a111e5875691e4f81758590db6e26b1" language="beanshell" modified="1604263674996" name="CF-ReqValut-AfterPovisioning-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import java.util.*;
import java.util.HashMap;
import sailpoint.api.PasswordGenerator;
import sailpoint.object.Application;
import sailpoint.object.Configuration;
import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import java.util.Date;
import sailpoint.api.TaskManager;
import sailpoint.object.Attributes;
import sailpoint.object.TaskDefinition;
import sailpoint.api.ObjectUtil;
import java.util.List;
import java.io.*;
import java.util.Hashtable;
import javax.naming.*;
import javax.naming.directory.*;
import javax.naming.ldap.*;
import java.util.ArrayList;
import java.util.Map;
import sailpoint.object.Attributes;
import java.text.SimpleDateFormat;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import java.io.StringWriter;
import java.sql.Timestamp;
import java.util.UUID;
import com.tibco.tibjms.TibjmsQueueConnectionFactory;
import java.io.*;
import java.util.Vector;
import javax.jms.*;
import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import com.tibco.tibjms.TibjmsConnectionFactory;
   import org.apache.log4j.Logger;

// examine provisioning result to see if Identity has been added to Admin group
System.out.println("running after provisioning rule");
//System.out.println(plan.getAccountRequests().get(0).toMap());
  
  Logger loggerObj = Logger.getLogger("com.carefirst.JMSHandler");
  loggerObj.info("###JMSHandler @  Starting  JMSHandler Rule");
  
  
   public void sendMessage(String message) throws Exception {
		    String qname ="TIBEMSQ.CIAM.ARIBA.PROVISIONING.RES";
		    TibjmsConnectionFactory tibjmsConnectionFactory = new TibjmsConnectionFactory("svl-tibbwems-d5:7333");
			 loggerObj.info("###JMSHandler @  before connection");
		    Connection conn = tibjmsConnectionFactory.createConnection("TIBEMS_JAVA_ARIBA_CIAM", "JP4G1zXXf#YXEI8");
			 loggerObj.info("###JMSHandler @  after connection");

		    Session session = conn.createSession(false, 1);
		    MessageProducer msgProducer = session.createProducer(null);
		    System.out.println("Sending message to " + "" + qname);
		    System.out.println("payload = " + message);
		    try {
			loggerObj.info("###JMSHandler @  before sendMessage");
		      sendMessage(session, message, qname, msgProducer);
			  loggerObj.info("###JMSHandler @  after sendMessage");
		    } catch (JMSException e) {
			loggerObj.info("###JMSHandler @  exception "+e);
		      e.printStackTrace();
		    } catch (Throwable te) {
		    	te.printStackTrace();
		    } finally {
		      conn.close();
		    } 
		  }
		  
		  private void sendMessage(Session session, String message, String qname, MessageProducer msgProducer) throws JMSException {
		    if (message == null || message.trim().length() &lt;= 0)
		      return; 
		    TextMessage msg = session.createTextMessage(message);
		    Queue d = session.createQueue(qname);
			loggerObj.info("###JMSHandler @  before msg send ");
		    msgProducer.send((Destination)d, (Message)msg);
			loggerObj.info("###JMSHandler @  after msg send ");
		  }


public static Node getEmployeeElements(Document doc, Element element, String name, String value) {
Element node = doc.createElement(name);
node.appendChild(doc.createTextNode(value));
return node;
}

public static Node getHeader(Document doc, String message_id, String trn_event_type, String src_system,
String msg_creation_tmstmp, String user_cf_relationship, String mode, String trn_msg_type, String target_system) {
Element headerDetails = doc.createElement("HEADER");
Element trnHeaderDetails = doc.createElement("TRN_HEADER");

headerDetails.appendChild(trnHeaderDetails);
//set id attribute
//userDatils.appendChild(getEmployeeElements(doc, userDatils, "sno", sno));

//create age element
trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "MESSAGE_ID", message_id));

//create role element
trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "TRN_EVENT_TYPE", trn_event_type));

//create gender element
trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "SRC_SYSTEM", src_system));

trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "MSG_CREATION_TMSTMP", msg_creation_tmstmp));

trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "USER_CF_RELATIONSHIP", user_cf_relationship));

trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "MODE", mode));

trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "TRN_MSG_TYPE", trn_msg_type));

trnHeaderDetails.appendChild(getEmployeeElements(doc, trnHeaderDetails, "TARGET_SYSTEM", target_system));

return headerDetails;
}

 

public static Node getEmployee(Document doc, String frst_nm, String mid_nm, String last_nm,
String ssn, String locn_cd, String mngr_id, String mngr_nm,String dept_nm, String job_titl, String bu_cd,
String dept_cd, String eeo_cd, String job_cd, String co_cd, String co_nm, String cc,
String appln_desc, String appln_nm, String role_nm, String role_desc, String pvlg_nm, String user_id,
String emal_addr, String tlcmtn_nbr, String tlcmtn_nbr_typ){

 

Element employee = doc.createElement("PRSN");

employee.appendChild(getEmployeeElements(doc, employee, "FRST_NM", frst_nm));
// employee.appendChild(getEmployeeElements(doc, employee, "MID_NM", mid_nm));
employee.appendChild(getEmployeeElements(doc, employee, "LAST_NM", last_nm));
employee.appendChild(getEmployeeElements(doc, employee, "SSN", ssn));

Element cf_personDetails = doc.createElement("CF_PERSON");
employee.appendChild(cf_personDetails);

Element associateDetails = doc.createElement("ASSOCIATE");
cf_personDetails.appendChild(associateDetails);

associateDetails.appendChild(getEmployeeElements(doc, cf_personDetails, "LOCN_CD", locn_cd));
associateDetails.appendChild(getEmployeeElements(doc, cf_personDetails, "MNGR_ID", mngr_id));
associateDetails.appendChild(getEmployeeElements(doc, cf_personDetails, "MNGR_NM", mngr_id));

Element bu_infoDetails = doc.createElement("BU_INFO");
cf_personDetails.appendChild(bu_infoDetails);

bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "DEPT_NM", dept_nm));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "JOB_TITL", job_titl));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "BU_CD", bu_cd));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "DEPT_CD", dept_cd));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "EEO_CD", eeo_cd));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "JOB_CD", job_cd));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "CO_CD", co_cd));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "CO_NM", co_nm));
bu_infoDetails.appendChild(getEmployeeElements(doc, bu_infoDetails, "CC", cc));
// create age element

Element applnsDetails = doc.createElement("APPLNS");
employee.appendChild(applnsDetails);

Element applns = doc.createElement("APPLN");
applnsDetails.appendChild(applns);
applns.appendChild(getEmployeeElements(doc, applns, "APPLN_DESC", appln_desc));
applns.appendChild(getEmployeeElements(doc, applns, "APPLN_NM", appln_nm));

Element appln_roles = doc.createElement("APPLN_ROLES");
applns.appendChild(appln_roles);

Element appln_role = doc.createElement("APPLN_ROLE");
appln_roles.appendChild(appln_role);

appln_role.appendChild(getEmployeeElements(doc, appln_role, "ROLE_NM", role_nm));
appln_role.appendChild(getEmployeeElements(doc, appln_role, "ROLE_DESC", role_desc));

Element pvlgsDetails = doc.createElement("PVLGS");
appln_role.appendChild(pvlgsDetails);

Element pvlg = doc.createElement("PVLG");
pvlgsDetails.appendChild(pvlg);

pvlg.appendChild(getEmployeeElements(doc, pvlg, "PVLG_NM", pvlg_nm));

Element user_acctDetails = doc.createElement("USER_ACCT");
applns.appendChild(user_acctDetails);

user_acctDetails.appendChild(getEmployeeElements(doc, user_acctDetails, "USER_ID", user_id));

Element emalDetails = doc.createElement("EMAL");
employee.appendChild(emalDetails);

emalDetails.appendChild(getEmployeeElements(doc, emalDetails, "EMAL_ADDR", emal_addr));

Element tlcmtnDetails = doc.createElement("TLCMTN");
employee.appendChild(tlcmtnDetails);

tlcmtnDetails.appendChild(getEmployeeElements(doc, tlcmtnDetails, "TLCMTN_NBR", tlcmtn_nbr));
tlcmtnDetails.appendChild(getEmployeeElements(doc, tlcmtnDetails, "TLCMTN_NBR_TYP", tlcmtn_nbr_typ));

return employee;

}

String requester;
if ( plan != null )
{
List accounts = plan.getAccountRequests();
if ( ( accounts != null ) &amp;&amp; ( accounts.size() > 0 ) )
{
for ( AccountRequest acctReq : accounts )
{
  loggerObj.info("In JDBC After provisioning Rule Operation ::::"+acctReq.getOperation());
if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Create.equals(acctReq.getOperation())))
{

UUID gfg = UUID.randomUUID();
Timestamp timestamp = new Timestamp(System.currentTimeMillis());

String messageId = gfg.toString();
String trnEventType = "A";
String srcSystem = "CIAM";
String msgCreationTisTmp = timestamp.toInstant().toString();
String userCfRelationship = "ASSOCIATE";
String mode = "REALTIME";
String trnMsgType = "CFAA";
String targetSystem = "ARIBA";
  
String frst_nm = "";
  if(acctReq.getAttributeRequest("firstname") != null){
    frst_nm =  acctReq.getAttributeRequest("firstname").getValue();
}
  loggerObj.info("###frst_nm is::::"+frst_nm);
String mid_nm = "";
  if(acctReq.getAttributeRequest("middle_name") != null){
 mid_nm = acctReq.getAttributeRequest("middle_name").getValue();
}
String last_nm = "";
  
  if(acctReq.getAttributeRequest("lastname") != null){
last_nm = acctReq.getAttributeRequest("lastname").getValue();
}
  
String ssn = "33221";
String locn_cd = "";
  if(acctReq.getAttributeRequest("location") != null){
locn_cd =  acctReq.getAttributeRequest("location").getValue();
}
String mngr_id = "6632";
String mngr_nm = "";
String dept_nm = "Marketing";
String job_titl = "Customer Service Representative";
String bu_cd = "ITOPS";
  if(acctReq.getAttributeRequest("business_unit") != null){
bu_cd = acctReq.getAttributeRequest("business_unit").getValue();
}
String dept_cd = "002K3";
  
  if(acctReq.getAttributeRequest("department_id") != null){
dept_cd = acctReq.getAttributeRequest("department_id").getValue();
}
 
String eeo_cd = "250";
String job_cd = "";
   if(acctReq.getAttributeRequest("job_code") != null){
job_cd = acctReq.getAttributeRequest("job_code").getValue();
}
String co_cd = "BCS";
  if(acctReq.getAttributeRequest("company") != null){
co_cd =  acctReq.getAttributeRequest("company").getValue();
}
String co_nm = "BCS";
String cc = "002K3";
  if(acctReq.getAttributeRequest("cost_center") != null){
cc = acctReq.getAttributeRequest("cost_center").getValue();
}
String appln_desc = "Ariba User Repository";
String appln_nm = "ARIBA";
String role_nm = "Contract Mgnt User";
String role_desc = "Contract Mgnt User";
String pvlg_nm = "contractMgntUser";
String user_id = "aad1234";
  String name = plan.getNativeIdentity();
System.out.println("Printing Provisioning plan" +plan.toXml());
Identity identity = context.getObjectByName( Identity.class , name );
System.out.println(" Native Identity : " + identity);
  if(null != identity){
user_id = identity.getAttribute("userid");
  }
String emal_addr = "";
  
  if(acctReq.getAttributeRequest("email") != null){
emal_addr = acctReq.getAttributeRequest("email").getValue();
}
String tlcmtn_nbr = "410-998-2222";
String tlcmtn_nbr_typ = "Biz Phone";
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
try {
dBuilder = dbFactory.newDocumentBuilder();
Document doc = dBuilder.newDocument();
// add elements to Document
Element rootElement = doc.createElementNS("types.ciam.security.carefirst.com", "ns2:ciamUser");
// append root element to document
doc.appendChild(rootElement);
rootElement.appendChild(getHeader(doc, messageId, trnEventType, srcSystem, msgCreationTisTmp,
userCfRelationship, mode, trnMsgType, targetSystem));
rootElement.appendChild(getEmployee(doc, frst_nm, mid_nm, last_nm, ssn, locn_cd, mngr_id, mngr_nm, dept_nm,
job_titl, bu_cd, dept_cd, eeo_cd, job_cd, co_cd, co_nm, cc, appln_desc, appln_nm, role_nm,
role_desc, pvlg_nm, user_id, emal_addr, tlcmtn_nbr, tlcmtn_nbr_typ));
// for output to file, console
TransformerFactory transformerFactory = TransformerFactory.newInstance();
Transformer transformer = transformerFactory.newTransformer();
// for pretty print
transformer.setOutputProperty(OutputKeys.INDENT, "yes");
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
transformer.transform(source, new StreamResult(writer));
String xmlString = writer.getBuffer().toString();
  loggerObj.info("###In After Provisioning Rule XML String is::::"+xmlString);
System.out.println("xmlString:::::" + xmlString);
System.out.println("DONE");
  
  sendMessage(xmlString);
  //return xmlString;
}
catch (Exception e) {
e.printStackTrace();
}
}
  if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Disable.equals(acctReq.getOperation())))
{

UUID gfg = UUID.randomUUID();
Timestamp timestamp = new Timestamp(System.currentTimeMillis());

String messageId = gfg.toString();
String trnEventType = "T";
String srcSystem = "CIAM";
String msgCreationTisTmp = timestamp.toInstant().toString();
String userCfRelationship = "ASSOCIATE";
String mode = "REALTIME";
String trnMsgType = "CFAA";
String targetSystem = "ARIBA";
    
    String name = plan.getNativeIdentity();
System.out.println("Printing Provisioning plan" +plan.toXml());
Identity identity = context.getObjectByName( Identity.class , name );
  
String frst_nm = identity.getFirstname();
  
  loggerObj.info("###frst_nm is::::"+frst_nm);
String mid_nm = "";
 
String last_nm = identity.getLastname();
  
 
  
String ssn = "33221";
String locn_cd = "";
  if(acctReq.getAttributeRequest("location") != null){
locn_cd =  acctReq.getAttributeRequest("location").getValue();
}
String mngr_id = "6632";
String mngr_nm = "";
String dept_nm = "Marketing";
String job_titl = "Customer Service Representative";
String bu_cd = "ITOPS";
  
String dept_cd = "002K3";
  
  
 
String eeo_cd = "250";
String job_cd = "";
  
String co_cd = "BCS";
  
String co_nm = "BCS";
String cc = "002K3";
  
String appln_desc = "Ariba User Repository";
String appln_nm = "ARIBA";
String role_nm = "Contract Mgnt User";
String role_desc = "Contract Mgnt User";
String pvlg_nm = "contractMgntUser";
String user_id = "aad1234";
  
System.out.println(" Native Identity : " + identity);
  if(null != identity){
user_id = identity.getAttribute("userid");
  }
String emal_addr = "";
  
  
String tlcmtn_nbr = "410-998-2222";
String tlcmtn_nbr_typ = "Biz Phone";
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
try {
dBuilder = dbFactory.newDocumentBuilder();
Document doc = dBuilder.newDocument();
// add elements to Document
Element rootElement = doc.createElementNS("types.ciam.security.carefirst.com", "ns2:ciamUser");
// append root element to document
doc.appendChild(rootElement);
rootElement.appendChild(getHeader(doc, messageId, trnEventType, srcSystem, msgCreationTisTmp,
userCfRelationship, mode, trnMsgType, targetSystem));
rootElement.appendChild(getEmployee(doc, frst_nm, mid_nm, last_nm, ssn, locn_cd, mngr_id, mngr_nm, dept_nm,
job_titl, bu_cd, dept_cd, eeo_cd, job_cd, co_cd, co_nm, cc, appln_desc, appln_nm, role_nm,
role_desc, pvlg_nm, user_id, emal_addr, tlcmtn_nbr, tlcmtn_nbr_typ));
// for output to file, console
TransformerFactory transformerFactory = TransformerFactory.newInstance();
Transformer transformer = transformerFactory.newTransformer();
// for pretty print
transformer.setOutputProperty(OutputKeys.INDENT, "yes");
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
transformer.transform(source, new StreamResult(writer));
String xmlString = writer.getBuffer().toString();
  loggerObj.info("###In After Provisioning Rule XML String is::::"+xmlString);
System.out.println("xmlString:::::" + xmlString);
System.out.println("DONE");
  
  sendMessage(xmlString);
  //return xmlString;
}
catch (Exception e) {
e.printStackTrace();
}
}
  if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Enable.equals(acctReq.getOperation())))
{

UUID gfg = UUID.randomUUID();
Timestamp timestamp = new Timestamp(System.currentTimeMillis());

String messageId = gfg.toString();
String trnEventType = "S";
String srcSystem = "CIAM";
String msgCreationTisTmp = timestamp.toInstant().toString();
String userCfRelationship = "ASSOCIATE";
String mode = "REALTIME";
String trnMsgType = "CFAA";
String targetSystem = "ARIBA";
    
    String name = plan.getNativeIdentity();
System.out.println("Printing Provisioning plan" +plan.toXml());
Identity identity = context.getObjectByName( Identity.class , name );
  
String frst_nm = identity.getFirstname();
  
  loggerObj.info("###frst_nm is::::"+frst_nm);
String mid_nm = "";
 
String last_nm = identity.getLastname();
  
 
  
String ssn = "33221";
String locn_cd = "";
  if(acctReq.getAttributeRequest("location") != null){
locn_cd =  acctReq.getAttributeRequest("location").getValue();
}
String mngr_id = "6632";
String mngr_nm = "";
String dept_nm = "Marketing";
String job_titl = "Customer Service Representative";
String bu_cd = "ITOPS";
  
String dept_cd = "002K3";
  
  
 
String eeo_cd = "250";
String job_cd = "";
  
String co_cd = "BCS";
  
String co_nm = "BCS";
String cc = "002K3";
  
String appln_desc = "Ariba User Repository";
String appln_nm = "ARIBA";
String role_nm = "Contract Mgnt User";
String role_desc = "Contract Mgnt User";
String pvlg_nm = "contractMgntUser";
String user_id = "aad1234";
  
System.out.println(" Native Identity : " + identity);
  if(null != identity){
user_id = identity.getAttribute("userid");
  }
String emal_addr = "";
  
  
String tlcmtn_nbr = "410-998-2222";
String tlcmtn_nbr_typ = "Biz Phone";
DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder;
try {
dBuilder = dbFactory.newDocumentBuilder();
Document doc = dBuilder.newDocument();
// add elements to Document
Element rootElement = doc.createElementNS("types.ciam.security.carefirst.com", "ns2:ciamUser");
// append root element to document
doc.appendChild(rootElement);
rootElement.appendChild(getHeader(doc, messageId, trnEventType, srcSystem, msgCreationTisTmp,
userCfRelationship, mode, trnMsgType, targetSystem));
rootElement.appendChild(getEmployee(doc, frst_nm, mid_nm, last_nm, ssn, locn_cd, mngr_id, mngr_nm, dept_nm,
job_titl, bu_cd, dept_cd, eeo_cd, job_cd, co_cd, co_nm, cc, appln_desc, appln_nm, role_nm,
role_desc, pvlg_nm, user_id, emal_addr, tlcmtn_nbr, tlcmtn_nbr_typ));
// for output to file, console
TransformerFactory transformerFactory = TransformerFactory.newInstance();
Transformer transformer = transformerFactory.newTransformer();
// for pretty print
transformer.setOutputProperty(OutputKeys.INDENT, "yes");
DOMSource source = new DOMSource(doc);
StringWriter writer = new StringWriter();
transformer.transform(source, new StreamResult(writer));
String xmlString = writer.getBuffer().toString();
  loggerObj.info("###In After Provisioning Rule XML String is::::"+xmlString);
System.out.println("xmlString:::::" + xmlString);
System.out.println("DONE");
  
  sendMessage(xmlString);
  //return xmlString;
}
catch (Exception e) {
e.printStackTrace();
}
}

}
}
}

</Source>
  </Rule>
  <Rule created="1604263664597" id="0a111e5875691e4f81758590dbd526b2" language="beanshell" modified="1604263675114" name="CF-PreHire-DisableAccount-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import java.util.HashMap;
  import java.util.List;
  import java.text.DateFormat;  

  import sailpoint.api.RequestManager;
  import sailpoint.object.Attributes;
  import sailpoint.object.Identity;
  import sailpoint.object.Request;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.api.Provisioner;
  import sailpoint.object.RequestDefinition;
  import sailpoint.object.Workflow;
  import org.apache.log4j.Logger;

  Logger log = Logger.getLogger("com.carefirst.pre Diable");
  log.info("Inside Pre Disble Rule ");
  try{


    Identity identity = null;
    ProvisioningPlan plan = null;

    Filter actionFilter = Filter.eq("employeestatus","Pre Hire");

    List identitiesList = context.getObjects(Identity.class,new QueryOptions().addFilter(actionFilter));

    // return identitiesList;
    for (identity: identitiesList) {


      plan = buildAccountDisablePlan(identity);
      Provisioner  prov = new Provisioner(context);
      prov.compile(plan);
      prov.execute();
      identity.setInactive(true);
      context.saveObject(identity);
      context.commitTransaction();

      /*

      HashMap launchArgsMap = new HashMap();
      launchArgsMap.put("launcher","spadmin");
      launchArgsMap.put("approvalScheme", "none");
      Workflow wf = (Workflow) context.getObjectByName(Workflow.class, "Workflow-CareFirst-EnableAccount");
      log.info("Inside EnableAccount Rule  wf is "+wf.getName());
      Request req = new Request();
      RequestDefinition reqdef = context.getObject( RequestDefinition.class, "Workflow Request" );
      req.setDefinition(reqdef);
      Attributes allArgs = new Attributes();
      allArgs.put( "workflow", wf.getId() );
      allArgs.put("identity", identity);
      allArgs.put("identityName", identity.getName());
      allArgs.putAll(launchArgsMap);
      Identity id = context.getObjectByName(Identity.class, "AAB8401");
      req.setOwner(id);
      req.setAttributes( reqdef, allArgs );
      RequestManager.addRequest(context, req); */


    }
    return  false;
  }		
  catch(Exception e){
    e.printStackTrace();
  }


  </Source>
  </Rule>
  <Rule created="1604263664663" id="0a111e5875691e4f81758590dc1726b3" language="beanshell" modified="1612961892511" name="CF-Password-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
  import sailpoint.api.PasswordGenerator;
  import sailpoint.object.PasswordPolicy;
  

  String passwordnew = "";
System.out.println("getPassword() ................"+identity.getPassword() );

if(identity.getPassword() !=null){

passwordnew=context.decrypt(identity.getPassword());
}else{
passwordnew="";
}

System.out.println("passwordnew ........................."+passwordnew);
  return passwordnew;</Source>
  </Rule>
  <Rule created="1604263664726" id="0a111e5875691e4f81758590dc5626b4" language="beanshell" modified="1615518204687" name="CF-Name-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

String name = identity.getName();

return name;</Source>
  </Rule>
  <Rule created="1604263664808" id="0a111e5875691e4f81758590dca826b5" language="beanshell" modified="1617624950165" name="CF-Mover-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;

  System.out.println("****** Starting Mover"); 
  if(previousIdentity != null @and newIdentity !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_COMPANY) != null @and previousIdentity.getAttribute(ATR_COMPANY) != null ){

    // CareFirst Associate to FEPOC Associate 
    System.out.println("****** Inside CF-Mover-Rule:Previous identity Employee Type "+previousIdentity.getAttribute(ATR_EMPLOYEETYPE)); 
    System.out.println("****** Inside CF-Mover-Rule:New Identity Employee Type   "+newIdentity.getAttribute(ATR_EMPLOYEETYPE)); 

    System.out.println("****** Inside CF-Mover-Rule:New Identity Company   "+newIdentity.getAttribute(ATR_COMPANY)); 
    System.out.println("****** Inside CF-Mover-Rule:Previous Identity Company   "+previousIdentity.getAttribute(ATR_COMPANY)); 

    String newIdeEmpType = newIdentity.getAttribute(ATR_EMPLOYEETYPE);
    String preIdeEmpType = previousIdentity.getAttribute(ATR_EMPLOYEETYPE);
    String newIdenComapny = newIdentity.getAttribute(ATR_COMPANY);
    String  preIdenComapny = previousIdentity.getAttribute(ATR_COMPANY);

    if(!newIdeEmpType.equalsIgnoreCase(preIdeEmpType) @or  (newIdenComapny.equalsIgnoreCase(STR_FEPOCCOMPANY_SBP) @and !preIdenComapny.equalsIgnoreCase(STR_FEPOCCOMPANY_SBP)) @or (!newIdenComapny.equalsIgnoreCase(STR_FEPOCCOMPANY_SBP) @and preIdenComapny.equalsIgnoreCase(STR_FEPOCCOMPANY_SBP))){

      System.out.println("****** Inside CF-Mover-Rule:New Identity Company 1st IF Loop "+newIdenComapny); 
      if(previousIdentity.getAttribute(ATR_EMPLOYEESTATUS).equalsIgnoreCase(STR_TERMINATE)){
        System.out.println("****** Inside CF-Mover-Rule:New Identity Company 2nd IF Loop "+newIdenComapny);
        return true;
      }
      else{
        System.out.println("****** Inside CF-Mover-Rule:New Identity Company inside ELSE Loop "+newIdenComapny);
        EmailTemplate moverEventSkip = context.getObjectByName(EmailTemplate.class,"CF-MoverEventSkipped-EmailTemplate");
        EmailOptions options = new EmailOptions();
        options.setSendImmediate(true);
        options.setNoRetry(true);
        options.setVariable("name",newIdentity.getName());
        options.setVariable("userid",newIdentity.getAttribute("userid"));
        options.setVariable("employeeType",newIdeEmpType);
        options.setVariable("prevEmployeeType",preIdeEmpType);
        options.setVariable("company",newIdenComapny);
        options.setVariable("prevCompany",preIdenComapny);
        context.sendEmailNotification(moverEventSkip,options); 
        return false;
      }
    }
    return false;

  }

  </Source>
  </Rule>
  <Rule created="1604263664903" id="0a111e5875691e4f81758590dd0726b6" language="beanshell" modified="1604321140449" name="CF-MngdEntCustomization-Rule" type="ManagedAttributePromotion">
    <Description>A ManagedAttributePromotion rule is called when ManagedAttributes are automatically created during aggregation, refresh, or from the missing entitlement descriptions task.

This can modify the ManagedAttribute that is passed in to set fields such as owner, requestable, or explanations before they are saved.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="attribute">
          <Description>
          The sailpoint.object.ManagedAttribute to modify during promotion.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The sailpoint.object.Application the managed attribute is from.
        </Description>
        </Argument>
        <Argument name="state" type="Map">
          <Description>
          A Map that contains managed attribute promotion shared state during a task run.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  if(null != attribute){
  attribute.setRequestable(false);
  }

</Source>
  </Rule>
  <Rule created="1604263665042" id="0a111e5875691e4f81758590dd9226b7" language="beanshell" modified="1617916792391" name="CF-MiddleName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;
import java.lang.Character;

String middleName = "";
middleName = identity.getAttribute(ATR_MIDDLENAME);
if( null != middleName){
    middleName=Character.toString(middleName.charAt(0));
} 
return middleName;
</Source>
  </Rule>
  <Rule created="1604263665126" id="0a111e5875691e4f81758590dde626b8" language="beanshell" modified="1605612031665" name="CF-ManagerDN-Rule" type="FieldValue">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="Object"/>
    <Source>
	import sailpoint.object.Identity;
	import sailpoint.object.Application;
	import sailpoint.api.IdentityService;
	import java.util.List;
	import sailpoint.object.*;
if(null !=identity){
	try{
		String managerDN=null;

		Application adApp = context.getObjectByName(Application.class,STR_ACTIVE_DIRECTORY);
		IdentityService identityServ=new IdentityService(context);
		if(null != identity.getManager()){
			Identity managerObj=identity.getManager();
			//logger.debug("Getting Manager Object from the Identity");
			List adLinks=identityServ.getLinks(managerObj,adApp);
			if(null != adLinks){
				Link adLink=adLinks.get(0);
				//logger.debug("Getting the manager DN from AD link");
				managerDN=adLink.getNativeIdentity();
				return managerDN;
			}

		}

	}
	catch(Exception e){
	//logger.error("got the error in manager update rule");
	//logger.error(e);
	}
}


</Source>
  </Rule>
  <Rule created="1604263665190" id="0a111e5875691e4f81758590de2626b9" language="beanshell" modified="1604321141374" name="CF-Location-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String location = identity.getAttribute(ATR_LOCATION);

return location;</Source>
  </Rule>
  <Rule created="1604263665279" id="0a111e5875691e4f81758590de7f26ba" language="beanshell" modified="1618317934971" name="CF-LeaverTrigger-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  import java.text.*;
  import java.util.Calendar;
  import java.util.Date;
  import java.time.LocalDateTime;
  import java.time.format.DateTimeFormatter;

  Logger mylogger = Logger.getLogger("com.carefirst.loggers");

  System.out.println("Starting Carefirst Leaver Trigger Rule");
  try{
    System.out.println("PreviousIdentity***************** "+previousIdentity.getAttribute("isLeaverProcessed"));
    System.out.println("NewIdentity***************** "+newIdentity.getAttribute("isLeaverProcessed"));
    String strAction_old = previousIdentity.getAttribute(ATR_ACTION) != null ? previousIdentity.getAttribute(ATR_ACTION) : "";
    System.out.println("*******************strAction_old******************"+strAction_old);
    String strEmpStatus_old = previousIdentity.getAttribute("employeestatus") != null ? previousIdentity.getAttribute("employeestatus") : "";
    System.out.println("*******************strEmpStatus_old******************"+strEmpStatus_old);
    String strAction = newIdentity.getAttribute(ATR_ACTION) != null ? newIdentity.getAttribute(ATR_ACTION) : "";
    System.out.println("*******************strAction******************"+strAction);
    String actionDate = newIdentity.getAttribute(ATR_ENDDATE) != null ? newIdentity.getAttribute(ATR_ENDDATE) : "";
    System.out.println("*******************actionDate******************"+actionDate);
    String strEmpStatus = newIdentity.getAttribute("employeestatus") != null ? newIdentity.getAttribute("employeestatus") : "";
    System.out.println("*******************strEmpStatus******************"+strEmpStatus);
    // String strEffectiveDate = newIdentity.getAttribute("effdt") != null ? newIdentity.getAttribute("effdt") : "";
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy");

    String termDate=newIdentity.getAttribute("termdate");

    System.out.println("**** Entering CareFirst Leaver Trigger Rule ****"+termDate);
    Date actualTermDatee=  sdf.parse(termDate);
    Date currentDate = new Date();
    String currentDateString= sdf.format(currentDate);
    Date actualCurrentDate=  sdf.parse(currentDateString);
    System.out.println("**** Entering CareFirst Leaver Trigger Rule ****"+termDate);

    //if(actualCurrentDate.compareTo(actualTermDatee >= 0)

    System.out.println("**** Entering CareFirst Leaver Trigger Rule ****");

    System.out.println("Inside CareFirst Leaver Trigger Rule, Action = "+strAction);
    System.out.println("Inside CareFirst Leaver Trigger Rule, strEmpStatus = "+strEmpStatus);
    //System.out.println("Inside CareFirst Leaver Trigger Rule, strEffectiveDate = "+strEffectiveDate);
    System.out.println("Inside CareFirst Leaver Trigger Rule, User = "+newIdentity.getAttribute("userid"));
    System.out.println("Inside CareFirst Leaver Trigger Rule, newIdentity = "+newIdentity );
    System.out.println("Inside CareFirst Leaver Trigger Rule, previousIdentity = "+previousIdentity);
    System.out.println("Inside CareFirst Leaver Trigger Rule, ActionDate = "+actionDate);

    if(newIdentity != null &amp;&amp; previousIdentity != null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp;  Util.isNotNullOrEmpty(actionDate) &amp;&amp; Util.isNotNullOrEmpty(strEmpStatus) ) {

      System.out.println("..................................");
      Date actDate = new SimpleDateFormat("dd-MMM-yy").parse(actionDate);
      System.out.println("actDate-------"+actDate);

      Date cDate = new Date();
      // Date effectiveDate = new SimpleDateFormat("dd-MMM-yy").parse(strEffectiveDate);
      // System.out.println("effectiveDate-------"+effectiveDate);
      SimpleDateFormat  simpleDT= new SimpleDateFormat("dd-MMM-yy");
      String currentDateString=simpleDT.format(cDate);
      Date currentDate =simpleDT.parse(currentDateString);
      System.out.println("Starting Carefirst Leaver Trigger Rule, currentDate = "+currentDate);

      //LocalDateTime ldt = LocalDateTime.parse(sdf1.format(actDate)+" 00:00",sdf);
      //System.out.println("Starting Carefirst Leaver Trigger Rule, Converted ActionDate, ldt = "+ldt);

      System.out.println("#### Inside Carefirst Leaver Trigger Rule, previous identity inactive status = "+previousIdentity.isInactive());
      System.out.println("#### Inside Carefirst Leaver Trigger Rule, new identity inactive status = "+newIdentity.isInactive());

      // System.out.println("#### Inside Carefirst Leaver Trigger Rule, currentDate compareTo effectiveDate result = "+currentDate.compareTo(effectiveDate));

      // System.out.println("#### Inside Carefirst Leaver Trigger Rule, LocalDateTime compareTo ldt = "+LocalDateTime.now().compareTo(ldt));

          SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
          Date triggerTime = sdf.parse("5:00");
          
          Date date = new Date();
          Date time = sdf.parse(sdf.format(date));
          System.out.println("******Leaver Trigger*******Current Server Time*********"+time);
          
       
       if(actualTermDatee.compareTo(currentDate)&lt;0){ 
         System.out.println("******comparision of actualTermDatee with currentDate********");

      //to check if the user's previous ACTION and employeestatus should NOT be any of the following      
      if(!(((strAction_old.equalsIgnoreCase(STR_ACTION_TER) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_T) ) || (strAction_old.equalsIgnoreCase(STR_ACTION_TWP) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_U))|| (strAction_old.equalsIgnoreCase(STR_ACTION_RET) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_R) ) || (strAction_old.equalsIgnoreCase(STR_ACTION_RWP) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_Q) ) || (strAction_old.equalsIgnoreCase(STR_ACTION_COM) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_T))))){
        
        System.out.println("******Inside OuterIf LOOP*********");

           if(newIdentity.isInactive() &amp;&amp; ( (actualTermDatee != null)&amp;&amp;((strAction.equalsIgnoreCase(STR_ACTION_TER) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_T) ) || (strAction.equalsIgnoreCase(STR_ACTION_TWP) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_U))|| (strAction.equalsIgnoreCase(STR_ACTION_RET) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_R) ) || (strAction.equalsIgnoreCase(STR_ACTION_RWP) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_Q) ) || (strAction.equalsIgnoreCase(STR_ACTION_COM) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_T))))){
             System.out.println("******Inside InnerIf LOOP*********");

        return true;  

      }
       }
       }

        // **** Check the variable names and syntax in the below condition ****
        else if(actualTermDatee.compareTo(currentDate)==0 &amp;&amp; time.after(triggerTime)){
          
          System.out.println("******comparision of actualTermDatee with currentDate and timetrigger with system time *********");
          System.out.println("******actualTermDatee *********"+actualTermDatee);
          
     //System.out.println("isLeaverProcessed not value****************"+(!(newIdentity.getAttribute("isLeaverProcessed").equalsIgnoreCase("true"))));
        if(newIdentity.isInactive() &amp;&amp; 
((actualTermDatee != null)&amp;&amp;
(
(strAction.equalsIgnoreCase(STR_ACTION_TER) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_T) ) || 
(strAction.equalsIgnoreCase(STR_ACTION_TWP) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_U))|| 
(strAction.equalsIgnoreCase(STR_ACTION_RET) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_R) ) || 
(strAction.equalsIgnoreCase(STR_ACTION_RWP) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_Q) ) || 
(strAction.equalsIgnoreCase(STR_ACTION_COM) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_T))))){
        // System.out.println("isLeaverProcessed not value****************"+(!(newIdentity.getAttribute("isLeaverProcessed").equalsIgnoreCase("true")))); 
          System.out.println("******Inside outerIf LOOP checking status *********");
          //System.out.println("isLeaverProcessed  value for new Identity****************"+newIdentity.getAttribute("isLeaverProcessed")); 
          //System.out.println("isLeaverProcessed  value for previous Identity****************"+previousIdentity.getAttribute("isLeaverProcessed")); 
          //previousIdentity.getAttribute("isLeaverProcessed")
          //if()
         if(!newIdentity.getAttribute("isLeaverProcessed").equalsIgnoreCase("true")){
					
          mylogger.info("Starting Carefirst Leaver Trigger Rule Inside return if ");
          System.out.println("******newIdentity checks *********");

            // **** check and initialize the variables ****
            previousIdentity.setAttribute("isLeaverProcessed","true");
            newIdentity.setAttribute("isLeaverProcessed","true");
            System.out.println("******isLeaverProcessed checks *********"+newIdentity.getAttribute("isLeaverProcessed"));
            context.startTransaction();
					context.saveObject(newIdentity);
					context.commitTransaction();
					context.attach(newIdentity);

            
            return true; 
          }
          }
          
        }
         else
      {
        return false;
      }
      }
      else
      {
        return false;
      }

    
  }
  catch(Exception e){
    System.out.println("**** Exiting CareFirst Leaver Trigger Rule - from catch block due to exception, with return value as false ****"+e);
    return false;
  }</Source>
  </Rule>
  <Rule created="1604263665350" id="0a111e5875691e4f81758590dec626bb" language="beanshell" modified="1616581518179" name="CF-LDAP-ManagerDn-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="Object"/>
    <Source>import sailpoint.object.Identity;
import sailpoint.object.Application;
import sailpoint.api.IdentityService;
import java.util.List;
import sailpoint.object.*;
if (null != identity) {
    try {
        String managerDN = null;

        Application adApp = context.getObjectByName(Application.class, STR_ISAM_LDAP);
        IdentityService identityServ = new IdentityService(context);
        if (null != identity.getManager()) {
            Identity managerObj = identity.getManager();
            //logger.debug("Getting Manager Object from the Identity");
          System.out.println("Getting Manager Object from the Identity");
            List adLinks = identityServ.getLinks(managerObj, adApp);
            if (null != adLinks) {
                Link adLink = adLinks.get(0);
                //logger.debug("Getting the manager DN from ISAM LDAP link");
              System.out.println("Getting the manager DN from ISAM LDAP link***********ISAM LDAP Transformation Rule********");
                managerDN = adLink.getNativeIdentity();
                return managerDN;
            }

        }

    } catch (Exception e) {
        //logger.error("got the error in manager update rule");
        //logger.error(e);
    }
}</Source>
  </Rule>
  <Rule created="1604263665436" id="0a111e5875691e4f81758590df1c26bc" language="beanshell" modified="1604321140740" name="CF-LDAPDN-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

String displayName = identity.getDisplayName();
  String firstname =  identity.getFirstname();
  String lastname =  identity.getLastname();
System.out.println("In DN Rule firstname is:::"+firstname);
  
  String userid = identity.getAttribute(ATR_USERID);
return "uid="+userid+","+STR_ISAM_LDAP_DN;</Source>
  </Rule>
  <Rule created="1604263665519" id="0a111e5875691e4f81758590df6f26bd" language="beanshell" modified="1615988413031" name="CF-LastName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.Identity;

 String lastname =  "";

if(identity.getLastname() !=null){
lastname = identity.getLastname();
}

return lastname;</Source>
  </Rule>
  <Rule created="1604263665584" id="0a111e5875691e4f81758590dfb026be" language="beanshell" modified="1604263676501" name="CF-JMSReqVault-Enable-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult"/>
    <Source>import java.sql.*;
import java.sql.Statement;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.GenericRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;

ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
Statement stmt=null;

System.out.println("Update request: "+request.toMap());

AccountRequest acctRequest = (AccountRequest) request;
String user = (String) acctRequest.getNativeIdentity();

Identity identity = context.getObject(Identity.class, user);



try{

String query = "UPDATE cft_pega_jms SET operation = '"+STR_ENABLE+"' WHERE emp_id='"+user+"'";
stmt = connection.createStatement();
stmt.executeUpdate(query);
System.out.println("Inside Update");
}catch(Exception e){
System.out.println("Caught Exception:"+e.getMessage());
result.addError(e.getMessage());
result.setStatus(ProvisioningResult.STATUS_FAILED);
}
finally{
if(stmt != null)
stmt.close();
}




return result;</Source>
  </Rule>
  <Rule created="1604263665662" id="0a111e5875691e4f81758590dffe26bf" language="beanshell" modified="1604263676613" name="CF-JmsReqVault-DisableProvision-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult"/>
    <Source>
import java.sql.*;
import java.sql.Statement;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.GenericRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;

ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
Statement stmt=null;

System.out.println("Update request: "+request.toMap());

AccountRequest acctRequest = (AccountRequest) request;
String user = (String) acctRequest.getNativeIdentity();

Identity identity = context.getObject(Identity.class, user);



try{

String query = "UPDATE cft_pega_jms SET operation = '"+STR_DISABLE+"' WHERE emp_id='"+user+"'";
stmt = connection.createStatement();
stmt.executeUpdate(query);
System.out.println("Inside Update");
}catch(Exception e){
System.out.println("Caught Exception:"+e.getMessage());
result.addError(e.getMessage());
result.setStatus(ProvisioningResult.STATUS_FAILED);
}
finally{
if(stmt != null)
stmt.close();
}




return result;



</Source>
  </Rule>
  <Rule created="1604263665723" id="0a111e5875691e4f81758590e03b26c0" language="beanshell" modified="1604263676723" name="CF-JmsrequestVault-CreateProvision-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>The application whose data file is being processed.</Description>
        </Argument>
        <Argument name="schema">
          <Description>The Schema currently in use.</Description>
        </Argument>
        <Argument name="connection">
          <Description>A connection object to connect to database.</Description>
        </Argument>
        <Argument name="plan">
          <Description>The ProvisioningPlan created against the JDBC application.</Description>
        </Argument>
        <Argument name="request">
          <Description>The ProvisioningRequest created against the JDBC application.</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.util.List;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.api.IdentityService;
import sailpoint.object.QueryOptions;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.Operation;
 import org.apache.log4j.Logger;
    
Logger log = Logger.getLogger("com.carefirst.JmsRequestVault-Logs");
 

log.info("-------------------JMS Create user Started-------------------"+plan);
String name = plan.getNativeIdentity();
System.out.println("Printing Provisioning plan" +plan.toXml());
Identity identity = context.getObjectByName( Identity.class , name );
System.out.println(" Native Identity : " + identity);
PreparedStatement statement = null;
String preparedStatementQuery = "insert into cft_pega_jms(emp_id,firstname,lastname,display_name,email,employee_type,middle_name,business_title,department_id,description,job_code,manager,location,company,business_unit,cost_center,mgr_pos_num,phone,job_title,eeo_job_group,employee_status,start_date,end_date,action,operation) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
log.info("preparedStatementQuery: " + preparedStatementQuery);

List accounts = plan.getAccountRequests();
log.info("accounts " + accounts);
ProvisioningResult provResult = new ProvisioningResult();
if(accounts.size() > 0)
{
for(int i = 0; i &lt; accounts.size(); i++)
{
AccountRequest acctReq = accounts.get(i);
String EmployeeID = acctReq.getNativeIdentity();



log.info("EmployeeID ---"+EmployeeID);
AccountRequest.Operation op = acctReq.getOperation();
try
{
if(op==AccountRequest.Operation.Create)
{
System.out.println("connection " + connection);
statement = connection.prepareStatement(preparedStatementQuery);

statement.setString (1, EmployeeID);
if(acctReq.getAttributeRequest("firstname") != null){

statement.setString (2, acctReq.getAttributeRequest("firstname").getValue());
}else{
statement.setString (2, "");
}
if(acctReq.getAttributeRequest("lastname") != null){
statement.setString (3, acctReq.getAttributeRequest("lastname").getValue());
}else{
statement.setString (3, "");
}
if(acctReq.getAttributeRequest("display_name") != null){
statement.setString (4, acctReq.getAttributeRequest("display_name").getValue());
}
else{
statement.setString (4, "");
}
if(acctReq.getAttributeRequest("email") != null){
statement.setString (5, acctReq.getAttributeRequest("email").getValue());
}
else{
statement.setString (5, "");
}
if(acctReq.getAttributeRequest("employee_type") != null){
statement.setString (6, acctReq.getAttributeRequest("employee_type").getValue());
}
else{
statement.setString (6, "");
}
if(acctReq.getAttributeRequest("middle_name") != null){
statement.setString (7, acctReq.getAttributeRequest("middle_name").getValue());
}
else{
statement.setString (7, "");
}
if(acctReq.getAttributeRequest("business_title") != null){
statement.setString (8, acctReq.getAttributeRequest("business_title").getValue());
}else{
statement.setString (8, "");
}
if(acctReq.getAttributeRequest("department_id") != null){
statement.setString (9, acctReq.getAttributeRequest("department_id").getValue());
}else{
statement.setString (9, "");
}
if(acctReq.getAttributeRequest("description") != null){
statement.setString (10, acctReq.getAttributeRequest("description").getValue());
}else{
statement.setString (10, "");
}
if(acctReq.getAttributeRequest("job_code") != null){
statement.setString (11, acctReq.getAttributeRequest("job_code").getValue());
}else{
statement.setString (11, "");
}
if(acctReq.getAttributeRequest("manager") != null){
statement.setString (12, acctReq.getAttributeRequest("manager").getValue());
}else{
statement.setString (12, "");
}
if(acctReq.getAttributeRequest("location") != null){
statement.setString (13, acctReq.getAttributeRequest("location").getValue());
}else{
statement.setString (13, "");
}
if(acctReq.getAttributeRequest("company") != null){
statement.setString (14, acctReq.getAttributeRequest("company").getValue());
}else{
statement.setString (14, "");
}
if(acctReq.getAttributeRequest("business_unit") != null){
statement.setString (15, acctReq.getAttributeRequest("business_unit").getValue());
}else{
statement.setString (15, "");
}
if(acctReq.getAttributeRequest("cost_center") != null){
statement.setString (16, acctReq.getAttributeRequest("cost_center").getValue());
}else{
statement.setString (16, "");
}
if(acctReq.getAttributeRequest("mgr_pos_num") != null){
statement.setString (17, acctReq.getAttributeRequest("mgr_pos_num").getValue());
}else{
statement.setString (17, "");
}
if(acctReq.getAttributeRequest("phone") != null){
statement.setString (18, acctReq.getAttributeRequest("phone").getValue());
}else{
statement.setString (18, "");
}
if(acctReq.getAttributeRequest("job_title") != null){
statement.setString (19, acctReq.getAttributeRequest("job_title").getValue());
}else{
statement.setString (19, "");
}
if(acctReq.getAttributeRequest("eeo_job_group") != null){
statement.setString (20, acctReq.getAttributeRequest("eeo_job_group").getValue());
}else{
statement.setString (20, "");
}
if(acctReq.getAttributeRequest("employee_status") != null){
statement.setString (21, acctReq.getAttributeRequest("employee_status").getValue());
}else{
statement.setString (21, "");
}
if(acctReq.getAttributeRequest("start_date") != null){
statement.setString (22, acctReq.getAttributeRequest("start_date").getValue());
}else{
statement.setString (22, "");
}
if(acctReq.getAttributeRequest("end_date") != null){
statement.setString (23, acctReq.getAttributeRequest("end_date").getValue());
}else{
statement.setString (23, "");
}
if(acctReq.getAttributeRequest("action") != null){
statement.setString (24, acctReq.getAttributeRequest("action").getValue());
}else{
statement.setString (24, "");
}if(acctReq.getAttributeRequest("operation") != null){
statement.setString (25, acctReq.getAttributeRequest("operation").getValue());
}else{
statement.setString (25, "");
}

log.info("Before Execuite"+preparedStatementQuery);
statement.executeUpdate();
provResult.setStatus( ProvisioningResult.STATUS_COMMITTED );
log.info("-------------------JMS  Create user Successful-------------------");

}
}
catch( SQLException e ) {
provResult.setStatus( ProvisioningResult.STATUS_FAILED );
provResult.addError( e );
}
}
}
log.info("-------------------JMS Create user Completed-------------------");</Source>
  </Rule>
  <Rule created="1604263665792" id="0a111e5875691e4f81758590e08026c1" language="beanshell" modified="1604263676837" name="CF-JMSIntegration-Rule">
    <Description>This rule handles the JMS invocations created by IIQ</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>

  import com.tibco.tibjms.TibjmsQueueConnectionFactory;
  import java.io.*;
  import java.util.Vector;
  import javax.jms.*;
  package jms.messages.util;

import javax.jms.Connection;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;

import com.tibco.tibjms.TibjmsConnectionFactory;
  
  import org.apache.log4j.Logger;

 Logger loggerObj = Logger.getLogger("com.carefirst.JMSHandler");
  loggerObj.info("###JMSIntegration @  Starting  JMSIntegration Rule");
  

  
  //AribaReqConsumerUtil m = new AribaReqConsumerUtil();
	//m.consumeMessage();
 // public void consumeMessage() throws Exception {
		  
		    TibjmsConnectionFactory tibjmsConnectionFactory = new TibjmsConnectionFactory(ISAM_LDAP_TIBCO_Q_HOSTNAME:ISAM_LDAP_TIBCO_Q_PORT);
		    Connection con = tibjmsConnectionFactory.createConnection(ISAM_LDAP_TIBCO_Q_USERNAME,ISAM_LDAP_TIBCO_Q_PASSWORD);
    loggerObj.info("ISAM_LDAP_QNAME:::"+ISAM_LDAP_QNAME);

		    try {
		    	  Session session = 
		    	      con.createSession(false, Session.AUTO_ACKNOWLEDGE);  // non-transacted session (more)
          loggerObj.info("session:::"+session);

		    	  Queue queue = session.createQueue(ISAM_LDAP_QNAME);         // only specifies queue name (more)

           loggerObj.info("queue:::"+queue);
		    	  MessageConsumer consumer = session.createConsumer(queue);
          

		    	  consumer.setMessageListener(new MessageListener() {
              loggerObj.info("consumer:::"+consumer);
              //Message msg;
          
          //onMessage(msg);
              
		    	    public void onMessage(Message msg) {
                loggerObj.info("onMessage:::"+msg);
		    	      try {
		    	        if (! (msg instanceof TextMessage))
		    	          throw new RuntimeException("no text message");
		    	         TextMessage tm = (TextMessage) msg;
                  loggerObj.info("tm:::"+tm);
                  
                 
		    	        System.out.println(tm.getText()); 
                  
                 // return "Return : "+msg;
                  // print message
		    	      }
		    	      catch (JMSException e) {
		    	        System.err.println("Error reading message");
		    	      }
		    	    }
              
		    	  });

		    	  con.start();                 
          									loggerObj.info("con Start:::"+con);// start the connection (more)
		    	 Thread.sleep(10*1000);                                 // receive messages for 60s (more)
		    }
    
		    	finally {
		    	 con.close();                                             // free all resources (more)
		    	}
		    
 
  //}
  //consumeMessage();
  
  
  
 

  </Source>
  </Rule>
  <Rule created="1604263665854" id="0a111e5875691e4f81758590e0be26c2" language="beanshell" modified="1604263676953" name="CF-JMSHandleR-Rule" type="FieldValue">
    <Description>This rule handles the JMS invocations created by IIQ</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  
 import com.tibco.tibjms.TibjmsQueueConnectionFactory;
import java.io.*;
import java.util.Vector;
import javax.jms.*;
import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import com.tibco.tibjms.TibjmsConnectionFactory;
import org.apache.log4j.Logger;

 Logger loggerObj = Logger.getLogger("com.carefirst.JMSHandler");
  loggerObj.info("###JMSHandler @  Starting  JMSHandler Rule");
  
  
   public void sendMessage(String message) throws Exception {
		  
		    TibjmsConnectionFactory tibjmsConnectionFactory = new TibjmsConnectionFactory(ISAM_LDAP_TIBCO_Q_HOSTNAME5:ISAM_LDAP_TIBCO_Q_PORT);
			 loggerObj.info("###JMSHandler @  before connection");
		    Connection conn = tibjmsConnectionFactory.createConnection(ISAM_LDAP_TIBCO_Q_USERNAME, ISAM_LDAP_TIBCO_Q_PASSWORD);
			 loggerObj.info("###JMSHandler @  after connection");

		    Session session = conn.createSession(false, 1);
		    MessageProducer msgProducer = session.createProducer(null);
		    System.out.println("Sending message to " + "" + ISAM_LDAP_QNAME);
		    System.out.println("payload = " + message);
		    try {
			loggerObj.info("###JMSHandler @  before sendMessage");
		      sendMessage(session, message, ISAM_LDAP_QNAME, msgProducer);
			  loggerObj.info("###JMSHandler @  after sendMessage");
		    } catch (JMSException e) {
			loggerObj.info("###JMSHandler @  exception "+e);
		      e.printStackTrace();
		    } catch (Throwable te) {
		    	te.printStackTrace();
		    } finally {
		      conn.close();
		    } 
		  }
		  
		  private void sendMessage(Session session, String message, String qname, MessageProducer msgProducer) throws JMSException {
		    if (message == null || message.trim().length() &lt;= 0)
		      return; 
		    TextMessage msg = session.createTextMessage(message);
		    Queue d = session.createQueue(qname);
			loggerObj.info("###JMSHandler @  before msg send ");
		    msgProducer.send((Destination)d, (Message)msg);
			loggerObj.info("###JMSHandler @  after msg send ");
		  }
		  
		  	   String message = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>" +

				"&lt;ns0:ciamUser xmlns:ns0=\"types.ciam.security.carefirst.com\">" + "&lt;HEADER>" + "&lt;TRN_HEADER>"
				+ "&lt;MESSAGE_ID>SailPoint-uid-000000001&lt;/MESSAGE_ID>"
				+ "&lt;CORRELATION_ID>3007a946-d3d1-4712-900e-a46955cc98af&lt;/CORRELATION_ID>"
				+ "&lt;TRN_EVENT_TYPE>AR&lt;/TRN_EVENT_TYPE>" + "&lt;SRC_SYSTEM>ARIBA&lt;/SRC_SYSTEM>"
				+ "&lt;MSG_CREATION_TMSTMP>2017-11-20T02:40:45.018-05:00&lt;/MSG_CREATION_TMSTMP>" + "&lt;MODE>REALTIME&lt;/MODE>"
				+ "&lt;TRN_MSG_TYPE>CFAAR&lt;/TRN_MSG_TYPE>" + "&lt;TARGET_SYSTEM>CIAM&lt;/TARGET_SYSTEM>" + "&lt;/TRN_HEADER>"
				+ "&lt;/HEADER>" + "&lt;PRSN>" + "&lt;APPLNS>" + "&lt;APPLN>" + "&lt;APPLN_NM>ARIBA&lt;/APPLN_NM>" + "&lt;USER_ACCT>"
				+ "&lt;USER_ID>jWilson10&lt;/USER_ID>&lt;FRST_NM>John&lt;/FRST_NM>&lt;MID_NM>N&lt;/MID_NM>&lt;LAST_NM>Smith&lt;/LAST_NM>&lt;SSN>0000&lt;/SSN>" 
				+ "&lt;/USER_ACCT>" + "&lt;/APPLN>" + "&lt;/APPLNS>" + "&lt;/PRSN>"
				+ "&lt;/ns0:ciamUser>";
  
  sendMessage(message);
  return "Success return from rule";

  </Source>
  </Rule>
  <Rule created="1604263665930" id="0a111e5875691e4f81758590e10a26c3" language="beanshell" modified="1604263677077" name="CF-JMSConsumer-Rule">
    <Description>This rule handles the JMS invocations created by IIQ</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>

  import com.tibco.tibjms.TibjmsQueueConnectionFactory;
  import java.io.*;
  import java.util.Vector;
  import javax.jms.*;
  package jms.messages.util;

  import javax.jms.Connection;
  import javax.jms.JMSException;
  import javax.jms.Message;
  import javax.jms.MessageConsumer;
  import javax.jms.MessageListener;
  import javax.jms.Queue;
  import javax.jms.Session;
  import javax.jms.TextMessage;

  import com.tibco.tibjms.TibjmsConnectionFactory;

  import org.apache.log4j.Logger;

  Logger loggerObj = Logger.getLogger("com.carefirst.JMSConsumer");
  loggerObj.debug("###CareFirst-Rule-JMSConsumer @  Starting  CareFirst-Rule-JMSConsumer");



  //AribaReqConsumerUtil m = new AribaReqConsumerUtil();
  //m.consumeMessage();
  // public void consumeMessage() throws Exception {
  String ISAM_LDAP_QNAME = "TIBEMSQ.CIAM.ARIBA.PROVISIONING.RES";
  TibjmsConnectionFactory tibjmsConnectionFactory = new TibjmsConnectionFactory(ISAM_LDAP_TIBCO_Q_HOSTNAME:ISAM_LDAP_TIBCO_Q_PORT);
  Connection con = tibjmsConnectionFactory.createConnection(ISAM_LDAP_TIBCO_Q_USERNAME,ISAM_LDAP_TIBCO_Q_PASSWORD);
  loggerObj.info("###In JMSConsumer ISAM_LDAP_QNAME:::"+ISAM_LDAP_QNAME);

  try {
    Session session = 
      con.createSession(false, Session.AUTO_ACKNOWLEDGE);  // non-transacted session (more)
    loggerObj.info("In JMSConsumer ISAM_LDAP_QNAME::::::"+session);

    Queue queue = session.createQueue(ISAM_LDAP_QNAME);         // only specifies queue name (more)

    loggerObj.info("queue:::"+queue);
    MessageConsumer consumer = session.createConsumer(queue);

    loggerObj.info("###In JMSConsumer consumer:::"+consumer);

    consumer.setMessageListener(new MessageListener() {      
      //Message msg;
      //onMessage(msg);
      public void onMessage(Message msg) {
        loggerObj.info("###In JMSConsumer Message:::"+msg);
        try {
          if (! (msg instanceof TextMessage))
            throw new RuntimeException("no text message");
          TextMessage tm = (TextMessage) msg;
          loggerObj.info("###In JMSConsumer TextMessage:: ::"+tm);


          System.out.println(tm.getText()); 
          //loggerObj.info("###In JMSConsumer get text:: ::"+tm.getText());

          // return "Return : "+msg;
          // print message
        }
        catch (JMSException e) {
          System.err.println("Error reading message");
        }
      }

      //###added new code####
      /*
    Message message = consumer.receive(1000);
    loggerObj.info("message:::"+message);

    if (message instanceof TextMessage) {
      loggerObj.info("In if:::"+message);
      TextMessage textMessage = (TextMessage) message;

      loggerObj.info("In if textMessage:::"+textMessage);
      String text = textMessage.getText();
      loggerObj.info("In if text:::"+text);
      System.out.println("Received: " + text);
    } else {
      System.out.println("In else Received: " + message);
      System.out.println("Received: " + message);
    }    
    */
      //###End###
    });

    con.start();                 
    //loggerObj.info("Tracing #3  con Start:::"+con);// start the connection (more)
    Thread.sleep(10*1000);                                 // receive messages for 60s (more)
  }

  finally {
    con.close();                                             // free all resources (more)
  }


  //}
  //consumeMessage();
  return "Success return from rule";

  </Source>
  </Rule>
  <Rule created="1604263665993" id="0a111e5875691e4f81758590e14926c4" language="beanshell" modified="1615931268581" name="CF-ISAMLDAPAfterProvisioning-Rule" type="AfterProvisioning">
    <Description>ISAMLDAPAfterProvisioningRule</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
import sailpoint.object.ProvisioningResult;
import org.apache.log4j.Logger;
import sailpoint.api.Provisioner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import org.apache.log4j.Logger;
import java.net.URL;
import java.security.cert.X509Certificate;
import sailpoint.api.IdentityService;
import java.util.List;
import sailpoint.object.Application;
import sailpoint.object.Link;
import sailpoint.api.SailPointContext;

Logger loggerObj = Logger.getLogger("com.carefirst.ISAMAccountActivation");
loggerObj.info("Starting After Provisiioning Rule");
System.out.println("Starting After Provisiioning Rule");
if (plan != null) {
    AccountRequest accountRequest = plan.getAccountRequest("ISAM LDAP");
    loggerObj.info("|||||accountRequest ::::" + accountRequest);

    Operation operation = accountRequest.getOperation();
    loggerObj.info("|||||accountRequest operation::::" + operation);
    loggerObj.info("|||||Boolean operation::::" + operation.equals(Operation.Create));

    if (null != operation &amp;&amp; (operation.equals(Operation.Create) || operation.equals(Operation.Enable) || operation.equals(Operation.Disable) || operation.equals(Operation.Delete))) {
        String isamActiveStatus = "";
        String isamGSOStatus = "";
        if (operation.equals(Operation.Create) || operation.equals(Operation.Enable)) {
            isamActiveStatus = "yes";
            isamGSOStatus = "yes";
        }

        if (operation.equals(Operation.Disable)) {
            isamActiveStatus = "no";
            isamGSOStatus = "no";
        }
        loggerObj.info("Inside rule : ISAMAccountActivation");
        //  try{
        //   
        //   String a= singleAccountAggregation("ISAM LDAP",accountRequest.getNativeIdentity());
        //   }catch(Exception e){
        //   loggerObj.error("error");

        //   }

        String identityName = plan.getNativeIdentity();
        loggerObj.info("Inside LDAP AP rule identityName :" + identityName);
        Identity identity = context.getObjectByName(Identity.class, identityName);
        loggerObj.info("Inside LDAP AP rule identity :" + identity);

        Application ldapApp = context.getObjectByName(Application.class, "ISAM LDAP");

        IdentityService identityServ = new IdentityService(context);
        List links = identityServ.getLinks(identity, ldapApp);
        loggerObj.info("Inside LDAP AP rule links :" + links);
        System.out.println("ldapApp" + ldapApp);

        loggerObj.info("Inside LDAP AP rule link :" + link);


        String uid = identity.getAttribute("userid");
        loggerObj.info("uid:::" + uid);
        String LDAPDN = accountRequest.getNativeIdentity();

        loggerObj.info("LDAPDN:::" + LDAPDN);
        System.out.println("plan" + plan);
        /*
      Identity identity = plan.getIdentity();
      Application appObj  = context.getObjectByName(Application.class, "ISAM LDAP");
      linkObj = identity.getLink(appObj);    
      loggerObj.info("|||||linkObj toXml::::"+linkObj.toXml());
      loggerObj.info("|||||linkObj linkObj.getNativeIdentity()::::"+linkObj.getNativeIdentity());
    */


        // ************************this will be tolenized in SSB************************

        //String POST_PARAM = "{\r\n\"admin_id\":\"sec_master\",\r\n\"admin_pwd\":\"Cf1@m007\",\r\n\"commands\":\r\n[\"user import "+uid+" "+LDAPDN+"\"]\r\n}";
        String POST_PARAM = "{\r\n\"admin_id\":\"sec_master\",\r\n\"admin_pwd\":\"Cf1@m007\",\r\n\"commands\":\r\n[\"user import " + uid + " " + LDAPDN + "\",\n\"User modify " + uid + " account-valid " + isamActiveStatus + "\",\n\"User modify " + uid + " gsouser " + isamGSOStatus + "\"]\r\n}";
        // ************************this will be tolenized in SSB************************

        if (null != operation &amp;&amp; operation.equals(Operation.Delete)) {
            POST_PARAM = "{\r\n\"admin_id\":\"sec_master\",\r\n\"admin_pwd\":\"Cf1@m007\",\r\n\"commands\":\r\n[\"user delete -registry " + uid + "\"]\r\n}";
        }

        //URL myURL = new URL("https://sal-isamprxe-tt1.carefirst.com/isam/pdadmin");
        URL myURL = new URL("https://sal-isamprxe-tt1/isam/pdadmin");
        //URL myURL = new URL(ISAM_LDAP_JMS_URL);

        HttpURLConnection postConnectionObj = (HttpURLConnection) myURL.openConnection();
        String basicAuth = "Basic " + new String(Base64.getEncoder().encode("admin@local:Cf1@m016t".getBytes()));
        postConnectionObj.setRequestProperty("Authorization", basicAuth);
        postConnectionObj.setRequestMethod("POST");
        postConnectionObj.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        postConnectionObj.setRequestProperty("Content-Language", "en-US");
        postConnectionObj.setRequestProperty("Accept", "application/json");
        postConnectionObj.setUseCaches(false);
        postConnectionObj.setDoInput(true);
        postConnectionObj.setDoOutput(true);
        OutputStream os = postConnectionObj.getOutputStream();
        os.write(POST_PARAM.getBytes());
        os.flush();
        os.close();
        int responseCode = postConnectionObj.getResponseCode();
        loggerObj.info("ISAM LDAP POST Response Code :  " + responseCode);
        loggerObj.info("ISAM LDAP POST Response Message : " + postConnectionObj.getResponseMessage());
        System.out.println("ISAM LDAP POST Response Message :" + postConnectionObj.getResponseMessage());
        //return "Success return rule 1..."+responseCode+"     [message ] "+postConnectionObj.getResponseMessage();


    }
}</Source>
  </Rule>
  <Rule created="1604263666059" id="0a111e5875691e4f81758590e18b26c5" language="beanshell" modified="1604263677317" name="CF-ISAMAccountActivation-Rule" type="FieldValue">
    <Description>This rule activates the LDAP account created by IIQ</Description>
    <Signature returnType="String">
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import java.io.BufferedReader;
  import java.io.IOException;
  import java.io.InputStreamReader;
  import java.io.OutputStream;
  import java.io.OutputStreamWriter;
  import java.net.HttpURLConnection;
  import java.net.MalformedURLException;
  import java.net.ProtocolException;
  import java.net.URL;
  import org.apache.log4j.Logger;
  import java.net.URL;
  import java.security.cert.X509Certificate;

  import javax.net.ssl.HttpsURLConnection;
  import javax.net.ssl.SSLContext;
  import javax.net.ssl.TrustManager;
  import javax.net.ssl.X509TrustManager;

Logger log = Logger.getLogger("com.carefirst.ISAMAccountActivation");

log.info("Inside rule : ISAMAccountActivation");

String uid = "aaf9141";
String LDAPDN = "uid=aaf9141,ou=users,dc=carefirst,dc=com";

  String POST_PARAM = "{\r\n\"admin_id\":\"sec_master\",\r\n\"admin_pwd\":\"Cf1@m007\",\r\n\"commands\":\r\n[\"user import "+uid+" "+LDAPDN+"\",\n\"User modify "+uid+" account-valid yes\"]\r\n}";




  URL myURL = new URL("https://sal-isamprxe-tt1/isam/pdadmin");
  HttpURLConnection postConnectionObj = (HttpURLConnection)myURL.openConnection();

  String userCredentials = "admin@local:Cf1@m016t";
  String basicAuth = "Basic " + new String(Base64.getEncoder().encode(userCredentials.getBytes()));

  postConnectionObj.setRequestProperty ("Authorization", basicAuth);
  postConnectionObj.setRequestMethod("POST");
  postConnectionObj.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
  //postConnectionObj.setRequestProperty("Content-Length", "" + postData.getBytes().length);
  postConnectionObj.setRequestProperty("Content-Language", "en-US");
  postConnectionObj.setRequestProperty("Accept", "application/json");
  postConnectionObj.setUseCaches(false);
  postConnectionObj.setDoInput(true);
  postConnectionObj.setDoOutput(true);


  OutputStream os = postConnectionObj.getOutputStream();
  os.write(POST_PARAM.getBytes());
  os.flush();
  os.close();
  int responseCode = postConnectionObj.getResponseCode();
  log.info("POST Response Code :  " + responseCode);
  log.info("POST Response Message : " + postConnectionObj.getResponseMessage());

  return "Success return rule responseCode..."+responseCode+"     [message ] "+postConnectionObj.getResponseMessage();

  </Source>
  </Rule>
  <Rule created="1604263666125" id="0a111e5875691e4f81758590e1cd26c6" language="beanshell" modified="1617225371265" name="CF-IdentityAttributeInactive-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

    This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
          The Identity object that represents the user
          that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
          The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
          The Link object from the Identity, if this is an application
          mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;

  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting IdentityAttribute Rule");


  System.out.println("**** Entering CF-IdentityAttributeInactive-Rule ****");

  if(identity != null){
    mylogger.info("Starting IdentityAttribute Rule inside if Identity");

    System.out.println("Inside CF-IdentityAttributeInactive-Rule, user = "+identity.getAttribute("userid"));

    Date endDate = null;
    Date startDate = null;
    Date termDate = null;
    Date todayDate = new Date();
    String strAction = identity.getAttribute(ATR_ACTION) != null ? identity.getAttribute(ATR_ACTION) : "";
    mylogger.info("IdentityAttributeInactive Rule strAction "+strAction);
    String strDate = identity.getAttribute(ATR_ENDDATE) != null ? identity.getAttribute(ATR_ENDDATE) : "";
    mylogger.info("IdentityAttributeInactive Rule strDate "+strDate);
    String strStartDate = identity.getAttribute(ATR_STARTDATE) != null ? identity.getAttribute(ATR_STARTDATE) : "";
    mylogger.info("IdentityAttributeInactive Rule strDate "+strStartDate);
    String termDateString = identity.getAttribute("termdate") != null ? identity.getAttribute("termdate") : "";
    System.out.println("IdentityAttributeInactive Rule termDateString "+termDateString);
    if(Util.isNotNullOrEmpty(strDate)){
      SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
      endDate = formatter.parse(strDate);
    }

    if(Util.isNotNullOrEmpty(strStartDate)){
      SimpleDateFormat formatter;

      if(strStartDate.contains("-")){
        formatter=new SimpleDateFormat(STR_DATE_FORMAT);
      }
      else{
        formatter=new SimpleDateFormat(STR_DATE_FORMAT_SLASHES);
      }
      startDate = formatter.parse(strStartDate);
    }

    if(Util.isNotNullOrEmpty(termDateString)){
      SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
      termDate = formatter.parse(termDateString);
    }
    mylogger.info("IdentityAttributeInactive Rule endDate "+strDate);
    mylogger.info("IdentityAttributeInactive Rule todayDate "+todayDate);	

    System.out.println("Inside CF-IdentityAttributeInactive-Rule, startDate = "+strStartDate+termDate);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule, strDate = "+strDate);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule, todayDate = "+todayDate);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule, strAction = "+strAction);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule,, is strAction notnull or empty = "+Util.isNotNullOrEmpty(strAction));
    System.out.println("...................................");
    if(endDate != null &amp;&amp; todayDate != null &amp;&amp; Util.isNotNullOrEmpty(strAction) &amp;&amp; todayDate.compareTo(endDate) > 0 &amp;&amp;((STR_ACTION_TER.equalsIgnoreCase(strAction))|| (STR_ACTION_COM.equalsIgnoreCase(strAction))|| (STR_ACTION_TWP.equalsIgnoreCase(strAction))|| (STR_ACTION_RET.equalsIgnoreCase(strAction))|| (STR_ACTION_RWP.equalsIgnoreCase(strAction))) ){
      mylogger.info("Inside CF-IdentityAttributeInactive-Rule, inside third if block. End date is less than today date. ");

      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside third if block. End date is less than today date.");
      identity.setInactive(true);
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from third if block, identity setInactive is true. ****");

    }
    else if(startDate != null  &amp;&amp; todayDate != null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp;startDate.compareTo(todayDate) >0 &amp;&amp; (STR_ACTION_HIR.equalsIgnoreCase(strAction)  || STR_ACTION_ADD.equalsIgnoreCase(strAction))) {
      mylogger.info("IdentityAttributeInactive Rule inside if Start date greater than today date  ");
      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside else if. Start date is greater than today date.  ");
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from else if block, identity setInactive is true. ****");

      identity.setInactive(true);

      //}else if(termDate != null  &amp;&amp; todayDate != null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp;(todayDate.compareTo(termDate) >= 0) &amp;&amp; (STR_ACTION_TER.equalsIgnoreCase(strAction) )) {
    }else if(termDate != null  &amp;&amp;  Util.isNotNullOrEmpty(strAction)  &amp;&amp; ((STR_ACTION_TER.equalsIgnoreCase(strAction) )@or (STR_ACTION_TWP.equalsIgnoreCase(strAction)) @or (STR_ACTION_RET.equalsIgnoreCase(strAction)) @or (STR_ACTION_RWP.equalsIgnoreCase(strAction)) @or (STR_ACTION_COM.equalsIgnoreCase(strAction)))) {


      mylogger.info("IdentityAttributeInactive Rule inside if Start date greater than today date  ");
      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside else if. Start date is greater than today date.  ");
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from else if block, identity setInactive is true. ****");

      identity.setInactive(true);

    } else{
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from else block, identity setInactive is false. ****");
      identity.setInactive(false);
    }
  }

  context.saveObject(identity);
  context.commitTransaction();
  </Source>
  </Rule>
  <Rule created="1604263666196" id="0a111e5875691e4f81758590e21426c7" language="beanshell" modified="1613992880286" name="CF-GlobalEmail-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

//String employeetype = identity.getAttribute("employeetype");
  //System.out.println("CF-Global-EmailRule"+attributeValue+oldValue+environment);
  
  /* System.out.println("..refreshhhhhhhhhhhhhh111111111122222222222222...");
  if(environment.equals("void")){
  
  
  
  System.out.println("..refreshhhhhhhhhhhhhh111111111122222222222222...");
  
  
  }
  
  if(environment.isEmpty()){
  
  
  System.out.println("..refreshhhhhhhhhhhhhh1111111111...");
  
  
  }*/
  
  if(environment !=null){
  System.out.println("..aggregationnnnnnnnnnnnnnnnnnnnn...");
  
//  if(oldValue ==null @or !(oldValue.toString().equals(attributeValue.toString()))){
  String employeetype = STR_EMPLOYEE;
   System.out.println("..refreshhhhhhhhhhhhhh111111111122222222222222...");
  System.out.println("................CF-Global-EmailRule..................."+employeetype+identity+environment);
   System.out.println("................oldvalueeeeeeeee..................."+oldValue);
   System.out.println("................attributeValue..................."+attributeValue);
 // Identity exists = (Identity)context.getObjectByName(Identity.class,identity.getAttribute("employeeid"));
  // Identity identity1= context.getObjectByName(identity.getAttribute("employeeid"));
 //System.out.println("exists....."+exists.getAttributes()+exists.toXml()+identity.toXml());
 // List  hrApplicationlist=identity.getLinks();
 // System.out.println("hrApplicationlist"+hrApplicationlist);
 //  Link hrApplication=null;
/*  for(Link l: hrApplicationlist){
    System.out.println("hrApplicationlist"+l.getApplicationName()+l);
    if(l.getApplicationName().equals("HR Application")){
      Link hrApplication=l;
      System.out.println("hrApplication"+hrApplication.getAttributes());
    }
  }*/
        if(identity != null){
      String  userid=  identity.getAttribute("userid") != null ? identity.getAttribute("userid") : "";
String firstname = "";
 // String firstname =  identity.getFirstname();
 // if(oldValue == null){
//if(employeetype.equalsIgnoreCase(STR_EMPLOYEE)){
      System.out.println("CF-Global-EmailRule........12");
if(identity.getAttribute("prefFirstName")!=null){
firstname =  identity.getAttribute("prefFirstName");
  System.out.println("CF-Global-EmailRule........11");
}
else{
firstname =  identity.getAttribute("firstname");
 // firstname=hrApplication.getAttribute("FIRST_NAME");
  System.out.println("CF-Global-EmailRule.......1."+identity.getAttributes());
}
//}
/* else{
firstname =  identity.getAttribute("firstname");
  // firstname=hrApplication.getAttribute("FIRST_NAME");
    System.out.println("CF-Global-EmailRule.......2.");
}*/
  System.out.println("CF-Global-EmailRule"+firstname);
String lastname =  identity.getLastname();
//    String lastname = hrApplication.getAttribute("LAST_NAME");
  System.out.println("CF-Global-EmailRule"+lastname);
String company = identity.getAttribute(ATR_COMPANY);
//  String company = "WIL";
  System.out.println("CF-Global-EmailRule: "+company);
String domain = "";
    if(company !=null){
if(company.equalsIgnoreCase("CCO")){
domain=STR_CCO_MAIL;
}
else if(company.equalsIgnoreCase("TRU")){
domain=STR_TRU_MAIL;
}
else if(company.equalsIgnoreCase("WIL")||company.equalsIgnoreCase("NCS")){
domain=STR_WIL_MAIL;
}
else if(company.equalsIgnoreCase("SBP")){
domain=STR_SBP_MAIL;
}
else {
domain=STR_CAREFIRST_MAIL;
}
    }else {
domain=STR_CAREFIRST_MAIL;
}
System.out.println("CF-Global-EmailRule"+domain);
String email = firstname+"."+lastname+domain;
  System.out.println("email::"+email);
 boolean flag = true;

  Identity identity = null; 
  Filter emailFilter= null;
    emailFilter = Filter.eq("email",email);
   identity = context.getUniqueObject(Identity.class,emailFilter);
   
   if(identity != null){
     System.out.println("identity......."+email);
		String middleInit = identity.getAttribute("middlename");
		List middleList = new ArrayList();
		if(middleInit != null @and middleInit.length() != 0){
		email = firstname+"."+middleInit.charAt(0)+"."+lastname+domain;
		//middleList.add(Character.toString(middleInit.charAt(0)));
		emailFilter = Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+domain;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch @lteq 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+domain;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
	  else{
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+domain;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch @lteq 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+domain;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
  }
   System.out.println("Before Return::"+email);
return email;
 // }
 /* else{
    return oldValue;
  }*/
        } 
/*import sailpoint.object.*;

String firstname =  identity.getFirstname();
String lastname =  identity.getLastname();

String email = firstname+"."+lastname+STR_CAREFIRST_MAIL;
 boolean flag = true;

  Identity identity = null; 
  Filter emailFilter= null;
    emailFilter = Filter.eq("email",email);
   identity = context.getUniqueObject(Identity.class,emailFilter);
   
   if(identity != null){
   
		String middleInit = identity.getAttribute("middlename");
		List middleList = new ArrayList();
		if(middleInit != null &amp;amp;&amp;amp; middleInit.length() != 0){
		email = firstname+"."+middleInit.charAt(0)+"."+lastname+STR_CAREFIRST_MAIL;
		//middleList.add(Character.toString(middleInit.charAt(0)));
		emailFilter = Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+STR_CAREFIRST_MAIL;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch &amp;lt;= 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+STR_CAREFIRST_MAIL;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
	  else{
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+STR_CAREFIRST_MAIL;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch &amp;lt;= 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+STR_CAREFIRST_MAIL;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
  }
  
return email;*/
 /* import sailpoint.object.*;

String firstname =  identity.getFirstname();
 
String lastname =  identity.getLastname();
String email = firstname+"."+lastname+STR_CAREFIRST_MAIL;

return email;*/
 // }
  }
   System.out.println("................attributeValue..................."+attributeValue);</Source>
  </Rule>
  <Rule created="1604263666302" id="0a111e5875691e4f81758590e27e26c8" language="beanshell" modified="1606642774378" name="CF-GlobalDisplayName-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

 String firstname =  identity.getFirstname();
String lastname =  identity.getLastname();
  String dispalyName = "";
  if(null != firstname &amp;&amp; null != lastname){
   dispalyName = lastname+","+firstname;
  }else{
    dispalyName = identity.getName();
  }
return dispalyName;</Source>
  </Rule>
  <Rule created="1604263666363" id="0a111e5875691e4f81758590e2bb26c9" language="beanshell" modified="1605509591368" name="CF-FirstName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

 String firstname =  identity.getFirstname();
  System.out.println("BIZAPP FirstName"+firstname);

return firstname;</Source>
  </Rule>
  <Rule created="1604263666424" id="0a111e5875691e4f81758590e2f826ca" language="beanshell" modified="1606123276436" name="CF-Email-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String email =  identity.getEmail();
System.out.println("AD EMail------------------------------------------------------"+email);

return email;</Source>
  </Rule>
  <Rule created="1604263666496" id="0a111e5875691e4f81758590e34026cb" language="beanshell" modified="1615236621123" name="CF-DN-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Filter;

  System.out.println("Inside AD DN Creation Rule");

  System.out.println("Inside AD DN Creation Rule:"+identity);
  public boolean dnValidation(String dn) {
    if (dn != null) {
      QueryOptions qo = new QueryOptions();
      qo.addFilter(Filter.eq("nativeIdentity", dn));
      qo.addFilter(Filter.eq("application.name", "Active Directory"));

      if (context.countObjects(Link.class, qo) > 0) {
        System.out.println("Inside Rule: CF-DN-Rule, inside method: dnValidation, inside if block, DN already exists.");
        return false;
      }else{
        System.out.println("Inside Rule: CF-DN-Rule, inside method: dnValidation, inside if block, DN available.");
        return true;
      }
    }
  } 
 String firstname = "";
  if(identity != null){
if(identity.getAttribute("prefFirstName") != null){
firstname = identity.getAttribute("prefFirstName");
}
else{
 firstname =  identity.getFirstname();
}
   
    String lastname =  identity.getLastname();
    System.out.println("In DN Rule firstname is:::"+firstname);
    String employeeType  = identity.getAttribute(ATR_EMPLOYEETYPE);
    String userDN ="";
    int count=1;
    char ch='A';
    //System.out.println("In DN Rule, user type: OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com:"+ASSOCIATEOU);
    System.out.println("In DN Rule, user type: OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com:");
    //System.out.println("In DN Rule, user type: OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com:"+ASSOCIATEOU);
    System.out.println("In DN Rule, user type: OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com:");
    if(null != employeeType &amp;&amp; employeeType.equalsIgnoreCase(STR_EMPLOYEE)){
      System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);

     // userDN = "cn="+lastname+"\\, "+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
      userDN = "cn="+lastname+"\\, "+firstname+","+"OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";

    }else{
      userDN ="cn="+lastname+"\\, "+firstname+","+"OU=AzureUsers,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
   //  userDN ="cn="+lastname+"\\, "+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
    }
    System.out.println("Inside  DN Rule, user  Dn******"+userDN);

    if(dnValidation(userDN)){
      System.out.println("................................................................."+dnValidation(userDN));
      return userDN;
    }else{
      if(null != employeeType &amp;&amp; employeeType.equalsIgnoreCase(STR_EMPLOYEE)){
        System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
        if(identity.getAttribute("middleName")!=null){
          userDN = "cn="+lastname+" "+identity.getAttribute("middleName").toString()+" UAT\\, "+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";

          if(dnValidation(userDN)){
            return userDN;
          }else{
            userDN = "cn="+lastname+" "+"X"+" UAT\\, "+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
            if(dnValidation(userDN)){
              return userDN;
            }else{
              while(count @lt 26){
                userDN = "cn="+lastname+" "+Character.toString(ch)+" UAT\\, "+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
                if(dnValidation(userDN)){
                  return userDN;
                }else{

                  ch=(char)(ch + count);
                  count++;
                }

              }
            }
            System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
          }
        }
        else{
          while(count @lt 26){
            userDN = "cn="+lastname+" "+Character.toString(ch)+" UAT\\, "+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";

            if(dnValidation(userDN)){
              return userDN;
            }else{
              ch=(char)(ch + count);
              count++;
            }

          }
        }

      }else{
        if(identity.getAttribute("middleName")!=null){
          userDN = "cn="+lastname+" "+identity.getAttribute("middleName").toString()+" UAT\\, "+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
          if(dnValidation(userDN)){
            return userDN;
          }else{
            userDN = "cn="+lastname+" "+"X"+" UAT\\, "+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
            if(dnValidation(userDN)){
              return userDN;
            }else{
              while(count @lt 26){
                userDN = "cn="+lastname+" "+Character.toString(ch)+" UAT\\, "+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";

                if(dnValidation(userDN)){
                  return userDN;
                }else{
                  ch=(char)(ch + count);
                  count++;
                }

              }
            }
            System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
          }
        }
        else{
          while(count @lt 26){
            userDN = "cn="+lastname+" "+Character.toString(ch)+" UAT\\, "+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";

            if(dnValidation(userDN)){
              return userDN;
            }else{
              ch=(char)(ch + count);
              count++;
            }

          }
        }


      }
    }
  }




  //return getUniqueDN(identity);</Source>
  </Rule>
  <Rule created="1604263666566" id="0a111e5875691e4f81758590e38526cc" language="beanshell" modified="1604321291539" name="CF-DisplayName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

String displayName = identity.getDisplayName();
if(displayName !=null){
return displayName;
}else{
return "";
}


</Source>
  </Rule>
  <Rule created="1604263666645" id="0a111e5875691e4f81758590e3d526cd" language="beanshell" modified="1604321010177" name="CF-Description-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String description = identity.getAttribute(ATR_DESCR);

return description;</Source>
  </Rule>
  <Rule created="1604263666709" id="0a111e5875691e4f81758590e41526ce" language="beanshell" modified="1618223060831" name="CF-Customization-Rule" type="ResourceObjectCustomization">
    <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.

Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="ResourceObject">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="object">
          <Description>
          The ResourceObject built by the connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application that references the connector.
        </Description>
        </Argument>
        <Argument name="connector">
          <Description>
          The connector object.
        </Description>
        </Argument>
        <Argument name="state">
          <Description>
          A Map containing state information.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="resourceObject">
          <Description>
          The updated resource object.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.tools.Util;
import org.apache.log4j.Logger;
    import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
import java.text.*;
  import java.util.*;
  
Logger log = Logger.getLogger("com.carefirst.loggers");
  log.info("Inside Customization rule ");
  System.out.println("Inside Customization rule");

  String companyName=object.getAttribute("COMPANY");
 String empID=object.getAttribute("EMPLID");
  
 System.out.println("Inside Customization rule Company Value: "+companyName);
 System.out.println("Inside Customization rule Empoyeeid: "+empID);
  
 Identity identity = context.getObjectByName(Identity.class,empID);
 
  if(object.get(ATR_OBJ_PER_ORG)!=null){
    System.out.println("second if "+ATR_OBJ_PER_ORG);
    if(object.get(ATR_OBJ_PER_ORG).toString().equals(STR_EMP)){
       System.out.println("second if if "+STR_EMP);
	   if(identity != null @and (!(identity.getAttribute("employeestatus").equalsIgnoreCase("T"))) @and (object.get("EMPLOYEE_STATUS").toString().equalsIgnoreCase("T")) @and (!(identity.getAttribute("employeetype").equalsIgnoreCase(STR_EMPLOYEE)))){
       System.out.println("Came inside Employee If user record will be ignored");   
       return null;
		}
		else{
			System.out.println("Came inside Employee else to set EmployeeType:"+STR_EMPLOYEE);
			object.put(ATR_OBJ_PER_ORG,STR_EMPLOYEE);
		}
	}
	else if(object.get(ATR_OBJ_PER_ORG).toString().equals(STR_CWR)){
        System.out.println("second if else "+STR_CWR);
		if(identity != null @and (!(identity.getAttribute("employeestatus").equalsIgnoreCase("T"))) @and ((object.get("EMPL_STATUS").toString().equalsIgnoreCase("T")) @or (object.get("EMPLOYEE_STATUS").toString().equalsIgnoreCase("T"))) @and (!(identity.getAttribute("employeetype").equalsIgnoreCase(STR_CONTRACTOR)))){
      System.out.println("Came inside Contractor If user record will be ignored");     
      return null;
		}
		else{
			System.out.println("Came inside Contractor else to set EmployeeType:"+STR_CONTRACTOR);
			object.put(ATR_OBJ_PER_ORG,STR_CONTRACTOR);
		}
    }
    else{
      System.out.println("Not a Carefirst Associate");
    }
    
  }
  
  log.info("Inside Customization rule companyName "+companyName);
  log.info("Inside Customization rule empID "+empID);

if(Util.isNotNullOrEmpty(companyName)&amp;&amp; "SBP".equalsIgnoreCase(companyName))  { 
	  log.info("Inside Customization rule inside if FEPOC user  ");
  
     String status = getUseridFromFEPOC(empID);
  String upn = getMailFromFEPOC(empID);
    log.info("Inside Customization rule  status "+status);
   if(Util.isNotNullOrEmpty(status)&amp;&amp; status.startsWith("sAMAccountName")){
     System.out.println("Inside if ****");
     log.info("Inside Customization rule Status is Sucess before returning null ");
     userID=status.substring(status.indexOf(":")+2);
     object.setAttribute("USERID",userID);
     if(Util.isNotNullOrEmpty(upn)&amp;&amp; upn.startsWith("mail")){
     log.info("Inside if UPN  ****" + upn);
     log.info("Inside Customization rule Status is Sucess before returning null ");
     String upnValue =upn.substring(upn.indexOf(":")+2);
     object.setAttribute("EMAIL",upnValue);
      }
	 return object; 
   }else{
  
     /*System.out.println("Inside else ****");
    EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-FEPOC-AD-Error");
         String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);                
          options.setVariable("identityName", empID);
      context.sendEmailNotification(template, options);*/
      
     System.out.println("end of else ****");
     return null;
   }
 }
 return object;</Source>
  </Rule>
  <Rule created="1604263666775" id="0a111e5875691e4f81758590e45726cf" language="beanshell" modified="1617379521101" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>
import java.rmi.RemoteException;
import java.util.Date;
import java.util.HashMap;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.text.SimpleDateFormat;
import sailpoint.object.EmailTemplate;
import sailpoint.object.EmailOptions;  
import java.util.ArrayList;
import java.util.Arrays;
import org.apache.log4j.Logger;
  

import sailpoint.api.SailPointContext;
import sailpoint.object.Identity;
import sailpoint.tools.GeneralException;
import sailpoint.object.AuditEvent;
import sailpoint.server.Auditor;
import sailpoint.tools.Util;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.rpc.ServiceException;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.Response;
import com.carefirst.www.ciam.services.uaas.UAASLocator;
import com.carefirst.www.ciam.services.uaas.UAASPort;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.BusinessUnit;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableAssociateInformation;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableContractorInformation;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.FullName;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.Gender;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonStatus;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonType;
import com.insidecarefirst.associate.ciamservices.service.faults.BaseFault;
import com.insidecarefirst.associate.ciamservices.service.faults.CiamSystemFault;
import com.insidecarefirst.associate.ciamservices.service.faults.UserAlreadyExistsFault;
import com.insidecarefirst.associate.ciamservices.service.faults.UserAlreadyExistsWarning;
import com.insidecarefirst.associate.ciamservices.service.faults.UserNotExistFault;
import com.insidecarefirst.associate.ciamservices.service.faults.ValidationFault;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ConvertAssociateToContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ConvertAssociateToContractorOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ConvertContractorToAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ConvertContractorToAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorOutput;

Logger log = Logger.getLogger("com.carefirst.CommonWebServiceRuleLibraryRule");
  
 
public  String generateNextUserID() throws ServiceException {
  System.out.println("generateNextUserID");
		String nextUserID = "";
		try {
			UAASLocator uaas = new UAASLocator();
      System.out.println("STR_WEBSERVICE_ENDPOINT "+STR_WEBSERVICE_ENDPOINT);
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			GenerateNextUserIDInput input = new GenerateNextUserIDInput();
			input.setUaasAdminUserID("SAILREQ");
			GenerateNextUserIDOutput output = port.generateNextUserID(input);
			nextUserID = output.getAvailableUserID();
      System.out.println("nextUserID  "+nextUserID);
			log.info("Next user Id is:::" + output.getAvailableUserID());
			output.getResponse().getResponseCode();
		} catch (ValidationFault e) {
			int faultCode = e.getFaultcode();
			String faultReason = e.getFaultReason();
      System.out.println("e1.getFaultReason();  "+e.getFaultReason());
		} catch (CiamSystemFault e) {
			int faultCode = e.getFaultcode();
			String faultReason = e.getFaultReason();
      System.out.println("e2.getFaultReason();  "+e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			int faultCode = e.getFaultcode();
			String faultReason = e.getFaultReason();
      System.out.println("e3.getFaultReason();  "+e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return nextUserID;

	}
  
  public HashMap createassociate(HashMap userDetailsMap) throws Exception, ServiceException {
		log.info("**START createassociate ::");
		HashMap createAssoResultMap = new HashMap();
	try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			CreateAssociateInput createAssociateInput = new CreateAssociateInput();
			createAssociateInput.setUaasUserName("SAILPOINT");
			createAssociateInput.setTsrNumber("SAILREQ");
			createAssociateInput.setSubmitterUserName("SAILPOINT");
			createAssociateInput.setSkipSearch(false);
			EditableAssociateInformation editableAssociateInformation = new EditableAssociateInformation();
			FullName fullName = new FullName();
			if (null != userDetailsMap.get("firstName")) {
				fullName.setFirstName(userDetailsMap.get("firstName").toString());
			}
			if (null != userDetailsMap.get("middleName")) {
				fullName.setMiddleInitial(userDetailsMap.get("middleName").toString());
			}
			if (null != userDetailsMap.get("lastName")) {
				fullName.setLastName(userDetailsMap.get("lastName").toString());
			}
			

			editableAssociateInformation.setFullName(fullName);
			editableAssociateInformation.setPersonType(PersonType.Associate);
			editableAssociateInformation.setPersonStatus(PersonStatus.active);
			if (userDetailsMap.get("email") != null) {
				editableAssociateInformation.setEmailAddress(userDetailsMap.get("email").toString());
			}

			if (null != userDetailsMap.get("extended3")) {
				String gender = userDetailsMap.get("extended3").toString();
				if (gender.equalsIgnoreCase("F")) {
					editableAssociateInformation.setGender(Gender.F);
				} else {
					editableAssociateInformation.setGender(Gender.M);

				}
			} else {
				editableAssociateInformation.setGender(Gender.M);
			}
			editableAssociateInformation.setGender(Gender.M);
			 //editableAssociateInformation.setSocialSecurityNumber("123456");
			if (null != userDetailsMap.get("user_id")) {
				editableAssociateInformation.setUserName(userDetailsMap.get("user_id").toString());
			}

			if (null != userDetailsMap.get("emp_id")) {
				editableAssociateInformation.setEmplId(userDetailsMap.get("emp_id").toString());
			}
			if (null != userDetailsMap.get("password")) {
				editableAssociateInformation.setPassword(userDetailsMap.get("password").toString());
			}
			BusinessUnit businessUnit = businessUnitDetails(userDetailsMap);
			editableAssociateInformation.setBusinessUnit(businessUnit);

			if (null != userDetailsMap.get("locationCode")) {
				editableAssociateInformation.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			// editableAssociateInformation.setLocationCode("OWML1");

			if (null != userDetailsMap.get("managerid")) {
				editableAssociateInformation.setManagerId(userDetailsMap.get("managerid").toString());
			}
			 //editableAssociateInformation.setManagerId("66000");
			if (null != userDetailsMap.get("extended2")) {
				editableAssociateInformation.setManagerName(userDetailsMap.get("extended2").toString());
			}
			 //editableAssociateInformation.setManagerName("Maharjan");
			if (null != userDetailsMap.get("costCenter")) {
				editableAssociateInformation.setCostCenter(userDetailsMap.get("costCenter").toString());
			}
			//editableAssociateInformation.setStartDate(new Date());
      if (null != userDetailsMap.get("start_date")) {
				String effDateString = userDetailsMap.get("start_date").toString();
				SimpleDateFormat dateFormater = new SimpleDateFormat("dd/MM/yyyy");
				Date effdate = dateFormater.parse(effDateString);
        editableAssociateInformation.setStartDate(effdate);
      }else {
        editableAssociateInformation.setStartDate(new Date());
      }
      String stringEndDate = "3000-01-01";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
			Date endDate = sdf.parse(stringEndDate);
			editableAssociateInformation.setEndDate(endDate);
			createAssociateInput.setAssociate(editableAssociateInformation);
			CreateAssociateOutput createAssociateOutput = port.createAssociate(createAssociateInput);
			Response response = createAssociateOutput.getResponse();
			createAssoResultMap.put("faultCode", response.getResponseCode());
			createAssoResultMap.put("faultReason", response.getResponseDescription());
			// response.getResponseCode();
			log.info("**END CreateAssociate  createAssoResultMap :::::" + createAssoResultMap);
		} catch (UserAlreadyExistsFault e) {
			// TODO Auto-generated catch block
			createAssoResultMap.put("faultCode", e.getFaultcode());
			createAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			createAssoResultMap.put("faultCode", e.getFaultcode());
			createAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			createAssoResultMap.put("faultCode", e.getFaultcode());
			createAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (UserAlreadyExistsWarning e) {
			createAssoResultMap.put("faultCode", e.getFaultcode());
			createAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			// TODO: handle exception
			createAssoResultMap.put("faultCode", e.getFaultcode());
			createAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return createAssoResultMap;

	}


  
  public HashMap suspendPerson(String userName) throws ServiceException {
		HashMap suspendPersonResMap = new HashMap();
		log.info("***Start suspendPerson :::"+userName);
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			SuspendPersonInput suspendPersonInput = new SuspendPersonInput();
			suspendPersonInput.setUaasUserName("SAILPOINT");
			suspendPersonInput.setTsrNumber("SAILREQ");
			suspendPersonInput.setUserName(userName);
			suspendPersonInput.setReasonCode("SuspendPerson");
			suspendPersonInput.setSubmitterUserName("SAILPOINT");
			SuspendPersonOutput suspendPersonOutput = port.suspendPerson(suspendPersonInput);
			Response response = suspendPersonOutput.getResponse();
			suspendPersonResMap.put("faultCode", response.getResponseCode());
			suspendPersonResMap.put("faultReason", response.getResponseDescription());
		} catch (UserNotExistFault e) {
			suspendPersonResMap.put("faultCode", e.getFaultcode());
			suspendPersonResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			suspendPersonResMap.put("faultCode", e.getFaultcode());
			suspendPersonResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			suspendPersonResMap.put("faultCode", e.getFaultcode());
			suspendPersonResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			suspendPersonResMap.put("faultCode", e.getFaultcode());
			suspendPersonResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log.info("***End of SuspendPerson Result Map :::"+suspendPersonResMap);
		return suspendPersonResMap;
	}
  
  	public HashMap reactivatePerson(String userName) throws ServiceException {
	log.info("**START reactivatePerson:::"+userName);
		HashMap reactivatePerResMap = new HashMap();
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			ReactivatePersonInput reactivatePersonInput = new ReactivatePersonInput();
			reactivatePersonInput.setUaasUserName("SAILPOINT");
			reactivatePersonInput.setTsrNumber("SAILREQ");
			reactivatePersonInput.setUserName(userName);
			reactivatePersonInput.setEndDate(new Date());
			reactivatePersonInput.setSubmitterUserName("SAILPOINT");
			ReactivatePersonOutput reactivatePersonOutput = port.reactivatePerson(reactivatePersonInput);
			log.info("reactivatePerson:::: " + reactivatePersonOutput.getResponse().getResponseCode());
			reactivatePerResMap.put("faultCode", reactivatePersonOutput.getResponse().getResponseCode());
			reactivatePerResMap.put("faultReason", reactivatePersonOutput.getResponse().getResponseDescription());
		} catch (UserNotExistFault e) {
			reactivatePerResMap.put("faultCode", e.getFaultcode());
			reactivatePerResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			reactivatePerResMap.put("faultCode", e.getFaultcode());
			reactivatePerResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			reactivatePerResMap.put("faultCode", e.getFaultcode());
			reactivatePerResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			reactivatePerResMap.put("faultCode", e.getFaultcode());
			reactivatePerResMap.put("faultReason", e.getFaultReason());
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log.info("**End of reativateperson Result Map:::"+reactivatePerResMap);
		return reactivatePerResMap;

	}
  
  public HashMap terminatePerson(String userName, String email) throws ServiceException {
		log.info("Start  terminatePerson:::"+userName);
		HashMap terPersResultMap =  new HashMap(); 
		try {
			log.info("Start  Terminate Persion::");
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			TerminatePersonInput terminatePersonInput = new TerminatePersonInput();
			terminatePersonInput.setUaasUserName("SAILPOINT");
			terminatePersonInput.setTsrNumber("SAILREQ");
			terminatePersonInput.setUserName(userName);
			// terminatePersonInput.setAdUserName("");
			// terminatePersonInput.setUnixUserName("");
			terminatePersonInput.setEmailsUserName(email);
			TerminatePersonOutput terminatePersonOutput = port.terminatePerson(terminatePersonInput);
			terPersResultMap.put("faultCode", terminatePersonOutput.getResponse().getResponseCode());
			terPersResultMap.put("faultReason", terminatePersonOutput.getResponse().getResponseDescription());
		} catch (UserNotExistFault e) {
			terPersResultMap.put("faultCode", e.getFaultcode());
			terPersResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			terPersResultMap.put("faultCode", e.getFaultcode());
			terPersResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			terPersResultMap.put("faultCode", e.getFaultcode());
			terPersResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			terPersResultMap.put("faultCode", e.getFaultcode());
			terPersResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log.info("End terminatePersonOutput result map::"+terPersResultMap);
		return terPersResultMap;
	}

  
	public HashMap updateAssociate(HashMap userDetailsMap, boolean isRehire) throws Exception, ServiceException {
		HashMap updateAssoResMap = new HashMap();
		log.info("**Start updateAssociate:::");
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			UpdateAssociateInput updateAssociateInput = new UpdateAssociateInput();
			updateAssociateInput.setUaasUserName("SAILPOINT");
			updateAssociateInput.setTsrNumber("SAILREQ");
			updateAssociateInput.setSubmitterUserName("SAILPOINT");
			boolean effDateMatched = effectiveDateValid(userDetailsMap);
			if (null != userDetailsMap.get("extended1")) {
				updateAssociateInput.setOldUserName(userDetailsMap.get("extended1").toString());
			}
			updateAssociateInput.setSkipSearch(false);
			if (isRehire) {
				updateAssociateInput.setRehire(true);
			} else {
				updateAssociateInput.setRehire(false);

			}
			EditableAssociateInformation editableAssociateInformation = new EditableAssociateInformation();

			FullName fullName = new FullName();
			if (null != userDetailsMap.get("firstName")) {
				fullName.setFirstName(userDetailsMap.get("firstName").toString());
			}
			if (null != userDetailsMap.get("lastName")) {
				fullName.setLastName(userDetailsMap.get("lastName").toString());
			}
			if (null != userDetailsMap.get("middleName")) {
				fullName.setMiddleInitial(userDetailsMap.get("middleName").toString());
			}
			editableAssociateInformation.setFullName(fullName);
     
			editableAssociateInformation.setPersonType(PersonType.Associate);
      if(null != userDetailsMap.get("employee_status")){
        String employeestatus = userDetailsMap.get("employee_status").toString();
        if(employeestatus.equalsIgnoreCase("A")){
			editableAssociateInformation.setPersonStatus(PersonStatus.active);
        }else if(employeestatus.equalsIgnoreCase("T") || employeestatus.equalsIgnoreCase("R") || employeestatus.equalsIgnoreCase("U") || employeestatus.equalsIgnoreCase("Q")) {
          editableAssociateInformation.setPersonStatus(PersonStatus.terminated);
        }else if((employeestatus.equalsIgnoreCase("P") || employeestatus.equalsIgnoreCase("L")) &amp;&amp; effDateMatched) {
          editableAssociateInformation.setPersonStatus(PersonStatus.suspended);
        }else{
          editableAssociateInformation.setPersonStatus(PersonStatus.active);
        }

      }
			if (null != userDetailsMap.get("email")) {
				editableAssociateInformation.setEmailAddress(userDetailsMap.get("email").toString());
			}
			if (null != userDetailsMap.get("extended3")) {
				String gender = userDetailsMap.get("extended3").toString();
				if (gender.equalsIgnoreCase("F")) {
					editableAssociateInformation.setGender(Gender.F);
				} else {
					editableAssociateInformation.setGender(Gender.M);

				}
			} else {
				editableAssociateInformation.setGender(Gender.M);
			}
			//editableAssociateInformation.setSocialSecurityNumber("123456");
			if (null != userDetailsMap.get("user_id")) {
				editableAssociateInformation.setUserName(userDetailsMap.get("user_id").toString());
			}
			// editableAssociateInformation.setPassword("");
			if (null != userDetailsMap.get("emp_id")) {
				editableAssociateInformation.setEmplId(userDetailsMap.get("emp_id").toString());
			}
			BusinessUnit businessUnit = businessUnitDetails(userDetailsMap);
			editableAssociateInformation.setBusinessUnit(businessUnit);

			if (null != userDetailsMap.get("locationCode")) {
				editableAssociateInformation.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			// editableAssociateInformation.setLocationCode("OWML1");

			if (null != userDetailsMap.get("managerid")) {
				editableAssociateInformation.setManagerId(userDetailsMap.get("managerid").toString());
			}
      //editableAssociateInformation.setManagerId("66000");
      
			if (null != userDetailsMap.get("extended2")) {
				editableAssociateInformation.setManagerName(userDetailsMap.get("extended2").toString());
			}
      //editableAssociateInformation.setManagerName("Maharjan");
			if (null != userDetailsMap.get("costCenter")) {
				editableAssociateInformation.setCostCenter(userDetailsMap.get("costCenter").toString());
			}
			//editableAssociateInformation.setStartDate(new Date());
       if (null != userDetailsMap.get("start_date")) {
				String effDateString = userDetailsMap.get("start_date").toString();
				SimpleDateFormat dateFormater = new SimpleDateFormat("dd/MM/yyyy");
				Date effdate = dateFormater.parse(effDateString);
        editableAssociateInformation.setStartDate(effdate);
      }else {
        editableAssociateInformation.setStartDate(new Date());
      }
			String stringEndDate = "3000-01-01";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
			Date endDate = sdf.parse(stringEndDate);
			editableAssociateInformation.setEndDate(endDate);
			updateAssociateInput.setAssociate(editableAssociateInformation);
			log.info("Before making updateAssociate Call");
			UpdateAssociateOutput updateAssociateOutput = port.updateAssociate(updateAssociateInput);
			updateAssoResMap.put("faultCode", updateAssociateOutput.getResponse().getResponseCode());
			updateAssoResMap.put("faultReason", updateAssociateOutput.getResponse().getResponseDescription());
		} catch (UserNotExistFault e) {
			// TODO Auto-generated catch block
			updateAssoResMap.put("faultCode", e.getFaultcode());
			updateAssoResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (UserAlreadyExistsFault e) {
			updateAssoResMap.put("faultCode", e.getFaultcode());
			updateAssoResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			updateAssoResMap.put("faultCode", e.getFaultcode());
			updateAssoResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (UserAlreadyExistsWarning e) {
			updateAssoResMap.put("faultCode", e.getFaultcode());
			updateAssoResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			updateAssoResMap.put("faultCode", e.getFaultcode());
			updateAssoResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			updateAssoResMap.put("faultCode", e.getFaultcode());
			updateAssoResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log.info("END update Associate updateAssoResMap is::" + updateAssoResMap);
		return updateAssoResMap;

	}



public HashMap createContractor(HashMap userDetailsMap) throws Exception, ServiceException {
		log.info("START Create Contractor:::");
		HashMap createContResMap = new HashMap();
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			CreateContractorInput createContratorInput = new CreateContractorInput();
			createContratorInput.setUaasUserName("SAILPOINT");
			createContratorInput.setTsrNumber("SAILREQ");
			createContratorInput.setSubmitterUserName("SAILPOINT");
			createContratorInput.setSkipSearch(false);
			EditableContractorInformation editableContractorInformation = new EditableContractorInformation();
			FullName fullName = new FullName();
			if (null != userDetailsMap.get("firstName")) {
				fullName.setFirstName(userDetailsMap.get("firstName").toString());
			}
			if (null != userDetailsMap.get("lastName")) {
				fullName.setLastName(userDetailsMap.get("lastName").toString());
			}
			if (null != userDetailsMap.get("middleName")) {
				fullName.setMiddleInitial(userDetailsMap.get("middleName").toString());
			}
			editableContractorInformation.setFullName(fullName);
			editableContractorInformation.setPersonType(PersonType.Contractor);
			editableContractorInformation.setPersonStatus(PersonStatus.active);
			if (userDetailsMap.get("email") != null) {
				editableContractorInformation.setEmailAddress(userDetailsMap.get("email").toString());
			}
			if (null != userDetailsMap.get("extended3")) {
				String gender = userDetailsMap.get("extended3").toString();
				if (gender.equalsIgnoreCase("F")) {
					editableContractorInformation.setGender(Gender.F);
				} else {
					editableContractorInformation.setGender(Gender.M);

				}
			} else {
				editableContractorInformation.setGender(Gender.M);
			}
		 //editableContractorInformation.setSocialSecurityNumber("123456");
			if (null != userDetailsMap.get("user_id")) {
				editableContractorInformation.setUserName(userDetailsMap.get("user_id").toString());
			}
			if (null != userDetailsMap.get("emp_id")) {
				editableContractorInformation.setEmplId(userDetailsMap.get("emp_id").toString());
			}
			if (null != userDetailsMap.get("password")) {
				editableContractorInformation.setPassword(userDetailsMap.get("password").toString());
			}
			BusinessUnit businessUnit = businessUnitDetails(userDetailsMap);
			editableContractorInformation.setBusinessUnit(businessUnit);
			if (null != userDetailsMap.get("locationCode")) {
				editableContractorInformation.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			// editableAssociateInformation.setLocationCode("OWML1");

			if (null != userDetailsMap.get("managerid")) {
				editableContractorInformation.setManagerId(userDetailsMap.get("managerid").toString());
			}
      
      //editableContractorInformation.setManagerId("66000");
			if (null != userDetailsMap.get("extended2")) {
				editableContractorInformation.setHiringManager(userDetailsMap.get("extended2").toString());
			}
      //editableContractorInformation.setHiringManager("Maharjan");
      
			if (null != userDetailsMap.get("costCenter")) {
				editableContractorInformation.setCostCenter(userDetailsMap.get("costCenter").toString());
			}
      if (null != userDetailsMap.get("alter_empid")) {
				editableContractorInformation.setContractorId(userDetailsMap.get("alter_empid").toString());
			}
			// editableContractorInformation.setContractorId("");
			// editableContractorInformation.setSupplierName("");
      if (null != userDetailsMap.get("supplier_name")) {
				editableContractorInformation.setSupplierName(userDetailsMap.get("supplier_name").toString());
			}
      
			//editableContractorInformation.setStartDate(new Date());
      if (null != userDetailsMap.get("start_date")) {
				String effDateString = userDetailsMap.get("start_date").toString();
				SimpleDateFormat dateFormater = new SimpleDateFormat("dd/MM/yyyy");
				Date effdate = dateFormater.parse(effDateString);
        editableContractorInformation.setStartDate(effdate);
      }else {
        editableContractorInformation.setStartDate(new Date());
      }
			String stringEndDate = "3000-01-01";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
			Date endDate = sdf.parse(stringEndDate);
			editableContractorInformation.setEndDate(endDate);
			//editableContractorInformation.setEndDate(new Date());
			createContratorInput.setContractor(editableContractorInformation);
			CreateContractorOutput createContractorOutput = port.createContractor(createContratorInput);
			createContResMap.put("faultCode", createContractorOutput.getResponse().getResponseCode());
			createContResMap.put("faultReason", createContractorOutput.getResponse().getResponseDescription());
		} catch (UserAlreadyExistsFault e) {
			// TODO Auto-generated catch block
			createContResMap.put("faultCode", e.getFaultcode());
			createContResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			// TODO Auto-generated catch block
			createContResMap.put("faultCode", e.getFaultcode());
			createContResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (UserAlreadyExistsWarning e) {
			// TODO Auto-generated catch block
			createContResMap.put("faultCode", e.getFaultcode());
			createContResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			// TODO Auto-generated catch block
			createContResMap.put("faultCode", e.getFaultcode());
			createContResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			// TODO Auto-generated catch block
			createContResMap.put("faultCode", e.getFaultcode());
			createContResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log.info("***END Create Contractor :::" + createContResMap);
		return createContResMap;
	}


  
  public HashMap updateContractor(HashMap userDetailsMap, boolean isRehire) throws Exception, ServiceException {
		HashMap updateConResMap = new HashMap();
		log.info("**Start updateContractor:::");
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			UpdateContractorInput updateContratcorInput = new UpdateContractorInput();
			updateContratcorInput.setUaasUserName("SAILPOINT");
			updateContratcorInput.setTsrNumber("SAILREQ");
			updateContratcorInput.setSubmitterUserName("SAILPOINT");
			updateContratcorInput.setSkipSearch(false);
			boolean effDateMatched = effectiveDateValid(userDetailsMap);
			if (null != userDetailsMap.get("extended1")) {
				updateContratcorInput.setOldUserName(userDetailsMap.get("extended1").toString());
			}
			if (isRehire) {
				updateContratcorInput.setRehire(true);
			} else {
				updateContratcorInput.setRehire(false);
			}

			EditableContractorInformation editableContractorInformation = new EditableContractorInformation();

			FullName fullName = new FullName();
			if (null != userDetailsMap.get("firstName")) {
				fullName.setFirstName(userDetailsMap.get("firstName").toString());
			}
			if (null != userDetailsMap.get("lastName")) {
				fullName.setLastName(userDetailsMap.get("lastName").toString());
			}
			if (null != userDetailsMap.get("middleName")) {
				fullName.setMiddleInitial(userDetailsMap.get("middleName").toString());
			}
			editableContractorInformation.setFullName(fullName);
			editableContractorInformation.setPersonType(PersonType.Contractor);
      if(null != userDetailsMap.get("employee_status")){
        String employeestatus = userDetailsMap.get("employee_status").toString();
        if(employeestatus.equalsIgnoreCase("A")){
			editableContractorInformation.setPersonStatus(PersonStatus.active);
        }else if(employeestatus.equalsIgnoreCase("T") || employeestatus.equalsIgnoreCase("R") || employeestatus.equalsIgnoreCase("U") || employeestatus.equalsIgnoreCase("Q")){
          editableContractorInformation.setPersonStatus(PersonStatus.terminated);
        }else if((employeestatus.equalsIgnoreCase("P") || employeestatus.equalsIgnoreCase("L")) &amp;&amp; effDateMatched){
          editableContractorInformation.setPersonStatus(PersonStatus.suspended);
        }else {
					editableContractorInformation.setPersonStatus(PersonStatus.active);
        }
      }
			if (null != userDetailsMap.get("email")) {
				editableContractorInformation.setEmailAddress(userDetailsMap.get("email").toString());
			}
			if (null != userDetailsMap.get("extended3")) {
				String gender = userDetailsMap.get("extended3").toString();
				if (gender.equalsIgnoreCase("F")) {
					editableContractorInformation.setGender(Gender.F);
				} else {
					editableContractorInformation.setGender(Gender.M);

				}
			} else {
				editableContractorInformation.setGender(Gender.M);
			}
			//editableContractorInformation.setSocialSecurityNumber("123456");
			if (null != userDetailsMap.get("user_id")) {
				editableContractorInformation.setUserName(userDetailsMap.get("user_id").toString());
			}
			if (null != userDetailsMap.get("emp_id")) {
				editableContractorInformation.setEmplId(userDetailsMap.get("emp_id").toString());
			}

			BusinessUnit businessUnit = businessUnitDetails(userDetailsMap);
			editableContractorInformation.setBusinessUnit(businessUnit);
			if (null != userDetailsMap.get("locationCode")) {
				editableContractorInformation.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			// editableAssociateInformation.setLocationCode("OWML1");

			if (null != userDetailsMap.get("managerid")) {
				editableContractorInformation.setManagerId(userDetailsMap.get("managerid").toString());
			}
      //editableContractorInformation.setManagerId("66000");
			if (null != userDetailsMap.get("extended2")) {
				editableContractorInformation.setHiringManager(userDetailsMap.get("extended2").toString());
			}
      //editableContractorInformation.setHiringManager("Maharjan");
			if (null != userDetailsMap.get("costCenter")) {
				editableContractorInformation.setCostCenter(userDetailsMap.get("costCenter").toString());
			}
      //editableContractorInformation.setStartDate(new Date());
      if (null != userDetailsMap.get("start_date")) {
				String effDateString = userDetailsMap.get("start_date").toString();
				SimpleDateFormat dateFormater = new SimpleDateFormat("dd/MM/yyyy");
				Date effdate = dateFormater.parse(effDateString);
        editableContractorInformation.setStartDate(effdate);
      }else {
        editableContractorInformation.setStartDate(new Date());
      }
			String stringEndDate = "3000-01-01";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
			Date endDate = sdf.parse(stringEndDate);
			editableContractorInformation.setEndDate(endDate);
			// editableContractorInformation.setContractorId("");
      if (null != userDetailsMap.get("alter_empid")) {
				editableContractorInformation.setContractorId(userDetailsMap.get("alter_empid").toString());
			}
      
			// editableContractorInformation.setSupplierName("");
       if (null != userDetailsMap.get("supplier_name")) {
				editableContractorInformation.setSupplierName(userDetailsMap.get("supplier_name").toString());
			}
      
			updateContratcorInput.setContractor(editableContractorInformation);
			UpdateContractorOutput updateContractorOutput = port.updateContractor(updateContratcorInput);
			updateConResMap.put("faultCode", updateContractorOutput.getResponse().getResponseCode());
			updateConResMap.put("faultReason", updateContractorOutput.getResponse().getResponseDescription());
		} catch (UserNotExistFault e) {
			// TODO Auto-generated catch block
			updateConResMap.put("faultCode", e.getFaultcode());
			updateConResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (UserAlreadyExistsFault e) {
			// TODO Auto-generated catch block
			updateConResMap.put("faultCode", e.getFaultcode());
			updateConResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			// TODO Auto-generated catch block
			updateConResMap.put("faultCode", e.getFaultcode());
			updateConResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (UserAlreadyExistsWarning e) {
			// TODO Auto-generated catch block
			updateConResMap.put("faultCode", e.getFaultcode());
			updateConResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			// TODO Auto-generated catch block
			updateConResMap.put("faultCode", e.getFaultcode());
			updateConResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			// TODO Auto-generated catch block
			updateConResMap.put("faultCode", e.getFaultcode());
			updateConResMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log.info("*END Update Contractor updateConResMap:::" + updateConResMap);
		return updateConResMap;
	}

public HashMap convertAssociateToContractor(HashMap userDetailsMap) throws Exception, ServiceException, RemoteException {
  		log.info("*START convertAssociateToContractor:::");
  		HashMap convAssToConResultMpa = new HashMap();
  		
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			ConvertAssociateToContractorInput convertAssoToContraInput = new ConvertAssociateToContractorInput();
			convertAssoToContraInput.setUaasUserName("SAILPOINT");
			convertAssoToContraInput.setSubmitterUserName("SAILPOINT");
			convertAssoToContraInput.setTsrNumber("SAILREQ");

			if (null != userDetailsMap.get("extended1")) {
				convertAssoToContraInput.setUserName(userDetailsMap.get("extended1").toString());
			}
			convertAssoToContraInput.setSkipSearch(false);
			EditableContractorInformation contractorInfo = new EditableContractorInformation();
			FullName fullName = new FullName();
			if (null != userDetailsMap.get("firstName")) {
				fullName.setFirstName(userDetailsMap.get("firstName").toString());
			}
			if (null != userDetailsMap.get("lastName")) {
				fullName.setLastName(userDetailsMap.get("lastName").toString());
			}
			if (null != userDetailsMap.get("middleName")) {
				fullName.setMiddleInitial(userDetailsMap.get("middleName").toString());
			}
			contractorInfo.setFullName(fullName);
			contractorInfo.setPersonType(PersonType.Contractor);
			contractorInfo.setPersonStatus(PersonStatus.active);
			if (null != userDetailsMap.get("email")) {
				contractorInfo.setEmailAddress(userDetailsMap.get("email").toString());
			}
			// contractorInfo.setAlternateEmailAddress("");
			// Date dateOfBirth = new Date();
			// contractorInfo.setDateOfBirth(dateOfBirth );
			// contractorInfo.setGender(Gender.M);
			if (null != userDetailsMap.get("extended3")) {
				String gender = userDetailsMap.get("extended3").toString();
				if (gender.equalsIgnoreCase("F")) {
					contractorInfo.setGender(Gender.F);
				} else {
					contractorInfo.setGender(Gender.M);

				}
			} else {
				contractorInfo.setGender(Gender.M);
			}
			//contractorInfo.setSocialSecurityNumber("123456");
			if (null != userDetailsMap.get("user_id")) {
				contractorInfo.setUserName(userDetailsMap.get("user_id").toString());
			}
			if (null != userDetailsMap.get("emp_id")) {
				contractorInfo.setEmplId(userDetailsMap.get("emp_id").toString());
			}
			BusinessUnit businessUnit = businessUnitDetails(userDetailsMap);
			contractorInfo.setBusinessUnit(businessUnit);
			if (null != userDetailsMap.get("locationCode")) {
				contractorInfo.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			// editableAssociateInformation.setLocationCode("OWML1");

			if (null != userDetailsMap.get("managerid")) {
				contractorInfo.setManagerId(userDetailsMap.get("managerid").toString());
			}
      //contractorInfo.setManagerId("66000");
      
			if (null != userDetailsMap.get("extended2")) {
				contractorInfo.setHiringManager(userDetailsMap.get("extended2").toString());
			}
      //contractorInfo.setHiringManager("Maharjan");
			if (null != userDetailsMap.get("costCenter")) {
				contractorInfo.setCostCenter(userDetailsMap.get("costCenter").toString());
			}
			//contractorInfo.setStartDate(new Date());
      if (null != userDetailsMap.get("start_date")) {
				String effDateString = userDetailsMap.get("start_date").toString();
				SimpleDateFormat dateFormater = new SimpleDateFormat("dd/MM/yyyy");
				Date effdate = dateFormater.parse(effDateString);
        contractorInfo.setStartDate(effdate);
      }else {
        contractorInfo.setStartDate(new Date());
      }
			String stringEndDate = "3000-01-01";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
			Date endDate = sdf.parse(stringEndDate);
			contractorInfo.setEndDate(endDate);
			// contractorInfo.setEndDate(new Date());
			// contractorInfo.setContractorId("");
			// contractorInfo.setSupplierName("");
      if (null != userDetailsMap.get("alter_empid")) {
				contractorInfo.setContractorId(userDetailsMap.get("alter_empid").toString());
			}
      if (null != userDetailsMap.get("supplier_name")) {
				contractorInfo.setSupplierName(userDetailsMap.get("supplier_name").toString());
			}
      
			convertAssoToContraInput.setContractor(contractorInfo);
			ConvertAssociateToContractorOutput output = port.convertAssociateToContractor(convertAssoToContraInput);
			log.info("END  In ConvertAssociateToContractorOutput ::" + output.getResponse().getResponseCode());
		} catch (UserAlreadyExistsFault e) {
			// TODO Auto-generated catch block
			convAssToConResultMpa.put("faultCode", e.getFaultcode());
	  		convAssToConResultMpa.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			// TODO Auto-generated catch block
			convAssToConResultMpa.put("faultCode", e.getFaultcode());
	  		convAssToConResultMpa.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			// TODO Auto-generated catch block
			convAssToConResultMpa.put("faultCode", e.getFaultcode());
	  		convAssToConResultMpa.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			// TODO Auto-generated catch block
			convAssToConResultMpa.put("faultCode", e.getFaultcode());
	  		convAssToConResultMpa.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return convAssToConResultMpa;
	}
 	public HashMap convertContractorToAssociateInput(HashMap userDetailsMap)
			throws Exception, ServiceException, RemoteException {
		log.info("In START convertContractorToAssociateInput::");
		HashMap convContToAssoResultMap = new HashMap();
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			ConvertContractorToAssociateInput convertContraToAssoInput = new ConvertContractorToAssociateInput();
			convertContraToAssoInput.setUaasUserName("SAILPOINT");
			convertContraToAssoInput.setSubmitterUserName("SAILPOINT");
			convertContraToAssoInput.setTsrNumber("SAILPOINT");
			if (null != userDetailsMap.get("extended1")) {
				convertContraToAssoInput.setUserName(userDetailsMap.get("extended1").toString());
			}
			convertContraToAssoInput.setSkipSearch(false);

			EditableAssociateInformation associateInput = new EditableAssociateInformation();
			FullName fullName = new FullName();
			if (null != userDetailsMap.get("firstName")) {
				fullName.setFirstName(userDetailsMap.get("firstName").toString());
			}
			if (null != userDetailsMap.get("lastName")) {
				fullName.setLastName(userDetailsMap.get("lastName").toString());
			}
			if (null != userDetailsMap.get("middleName")) {
				fullName.setMiddleInitial(userDetailsMap.get("middleName").toString());
			}

			associateInput.setFullName(fullName);
			associateInput.setPersonType(PersonType.Associate);
			associateInput.setPersonStatus(PersonStatus.active);
			if (null != userDetailsMap.get("email")) {
				associateInput.setEmailAddress(userDetailsMap.get("email").toString());
			}
			if (null != userDetailsMap.get("extended3")) {
				String gender = userDetailsMap.get("extended3").toString();
				if (gender.equalsIgnoreCase("F")) {
					associateInput.setGender(Gender.F);
				} else {
					associateInput.setGender(Gender.M);

				}
			} else {
				associateInput.setGender(Gender.M);
			}
		//associateInput.setSocialSecurityNumber("123456");
			if (null != userDetailsMap.get("user_id")) {
				associateInput.setUserName(userDetailsMap.get("user_id").toString());
			}
			// editableAssociateInformation.setPassword("");
			if (null != userDetailsMap.get("emp_id")) {
				associateInput.setEmplId(userDetailsMap.get("emp_id").toString());
			}
			BusinessUnit businessUnit = businessUnitDetails(userDetailsMap);
			associateInput.setBusinessUnit(businessUnit);
			// associateInput.setLocationCode(userDetailsMap.get("locationCode").toString());
			if (null != userDetailsMap.get("locationCode")) {
				associateInput.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			// editableAssociateInformation.setLocationCode("OWML1");

		if (null != userDetailsMap.get("managerid")) {
				associateInput.setManagerId(userDetailsMap.get("managerid").toString());
			}
      
      //associateInput.setManagerId("66000");
      
			if (null != userDetailsMap.get("extended2")) {
				associateInput.setManagerName(userDetailsMap.get("extended2").toString());
			}
      
      //associateInput.setManagerName("Maharjan");
      
			if (null != userDetailsMap.get("costCenter")) {
				associateInput.setCostCenter(userDetailsMap.get("costCenter").toString());
			}
			//associateInput.setStartDate(new Date());
      if (null != userDetailsMap.get("start_date")) {
				String effDateString = userDetailsMap.get("start_date").toString();
				SimpleDateFormat dateFormater = new SimpleDateFormat("dd/MM/yyyy");
				Date effdate = dateFormater.parse(effDateString);
        associateInput.setStartDate(effdate);
      }else {
        associateInput.setStartDate(new Date());
      }
			String stringEndDate = "3000-01-01";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
			Date endDate = sdf.parse(stringEndDate);
			associateInput.setEndDate(endDate);
			// associateInput.setEndDate(new Date());
			convertContraToAssoInput.setAssociate(associateInput);
			ConvertContractorToAssociateOutput output = port.convertContractorToAssociate(convertContraToAssoInput);
			log.info("End ConvertContractorToAssociate:::" + output.getResponse().getResponseCode());
		} catch (UserAlreadyExistsFault e) {
			// TODO Auto-generated catch block
			convContToAssoResultMap.put("faultCode", e.getFaultcode());
			convContToAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (ValidationFault e) {
			// TODO Auto-generated catch block
			convContToAssoResultMap.put("faultCode", e.getFaultcode());
			convContToAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (CiamSystemFault e) {
			// TODO Auto-generated catch block
			convContToAssoResultMap.put("faultCode", e.getFaultcode());
			convContToAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (BaseFault e) {
			// TODO Auto-generated catch block
			convContToAssoResultMap.put("faultCode", e.getFaultcode());
			convContToAssoResultMap.put("faultReason", e.getFaultReason());
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return convContToAssoResultMap;
	}
  
  public HashMap generateUserDetaislMap(String employeeID) throws GeneralException {
    
     log.info("Start  generateUserDetaislMap :::" +employeeID);
    
    HashMap userDetailsMap = new HashMap();
    
    Identity identity = context.getObjectByName(Identity.class , employeeID);
          log.info(" Native Identity : " +identity);
  String employeeType = "";
  if(identity.getAttribute("employeetype") != null){
    employeeType = identity.getAttribute("employeetype");
  }
  log.info(" employeeType:: : " +employeeType);
  				String userName= ""; 
            if(identity.getAttribute("userid") != null){
              userName = identity.getAttribute("userid");
            }
  log.info(" userName:: : " +userName);
  String firstName = "";
            if(identity.getAttribute("firstname") != null){
              firstName =  identity.getAttribute("firstname");
            }
  log.info(" firstName:: : " +firstName);
            String lastName = "";
            if(identity.getAttribute("lastname") != null){
              lastName = identity.getAttribute("lastname");
            }
  log.info(" lastName:: : " +lastName);
            String email= ""; 
            if(identity.getAttribute("email") != null){
              email = identity.getAttribute("email");
            }  
            String middleName = "";
            if(identity.getAttribute("middlename") != null){
              middleName = identity.getAttribute("middlename");
            }  
            String businessUnitCode="";
            if(identity.getAttribute("businessunit") != null){
              businessUnitCode = identity.getAttribute("businessunit");
            }
            String departmentCode="";
            if(identity.getAttribute("deptid") != null){
              departmentCode = identity.getAttribute("deptid");
            }
            String jobTitle="";
            if(identity.getAttribute("jobtitle") != null){
              jobTitle = identity.getAttribute("jobtitle");
            }
   log.info(" jobTitlejobTitle:: : " +jobTitle);
              String locationCode="";
            if(identity.getAttribute("location") != null){
              locationCode = identity.getAttribute("location");
            }
            String companyCode="";
            if(identity.getAttribute("company") != null){
              companyCode = identity.getAttribute("company");
            }
            
  
  					String eeojobgroup="";
            if(identity.getAttribute("eeojobgroup") != null){
              eeojobgroup = identity.getAttribute("eeojobgroup");
            }
  					String costcenter="";
            if(identity.getAttribute("costcenter") != null){
              costcenter = identity.getAttribute("costcenter");
            }
  log.info(" costcenter:: : " +costcenter);
						String managerid = "";
    String managerFirstName = "";
    if(null != identity.getManager()){
      Identity  managerObje = identity.getManager();
							managerid = managerObje.getName();
      managerFirstName = managerObje.getFirstname();
    }
    String password = "";
		 password = identity.getPassword();
		if(password != null){
			password  = context.decrypt(password);
		}
    String gender = "";
    if(identity.getAttribute("gender") != null){
              gender = identity.getAttribute("gender");
            }
    String employeestatus = "";
    if(identity.getAttribute("employeestatus") != null){
              employeestatus = identity.getAttribute("employeestatus");
            }
    String start_date = "";
    if(identity.getAttribute("startdate") != null){
              start_date = identity.getAttribute("startdate");
            }
    
    String supplierName  = "";
    if(identity.getAttribute("neeProviderId") != null){
              supplierName = identity.getAttribute("neeProviderId");
            }
     String description  = "";
    if(identity.getAttribute("descr") != null){
              description = identity.getAttribute("descr");
            }
    
    String alter_empid = "";
     if(identity.getAttribute("alterEmpId") != null){
              alter_empid = identity.getAttribute("alterEmpId");
            }
    String jobCode = "";
     if(identity.getAttribute("jobcode") != null){
              jobCode = identity.getAttribute("jobcode");
            }
    
userDetailsMap.put("emp_id",employeeID);
userDetailsMap.put("user_id",userName);
userDetailsMap.put("display_name","");
userDetailsMap.put("firstName",firstName);
userDetailsMap.put("lastName",lastName);
userDetailsMap.put("email",email);
userDetailsMap.put("password",password);
userDetailsMap.put("employee_type",employeeType);
userDetailsMap.put("alter_empid",alter_empid);
userDetailsMap.put("middleName",middleName);
userDetailsMap.put("business_title","");
userDetailsMap.put("departmentCode",departmentCode);
userDetailsMap.put("description",description);
userDetailsMap.put("job_code",jobCode);
userDetailsMap.put("managerid",managerid);
userDetailsMap.put("locationCode",locationCode);
userDetailsMap.put("companyCode",companyCode);
userDetailsMap.put("businessUnitCode",businessUnitCode);
userDetailsMap.put("costCenter",departmentCode);
userDetailsMap.put("mgr_pos_num","");
userDetailsMap.put("phone","");
userDetailsMap.put("jobTitle",jobTitle);
userDetailsMap.put("eeoCode",eeojobgroup);
userDetailsMap.put("employee_status",employeestatus);
userDetailsMap.put("start_date",start_date);
userDetailsMap.put("end_date","");
userDetailsMap.put("action","");
userDetailsMap.put("operation","");
userDetailsMap.put("rolename","");
userDetailsMap.put("entitlement","");
userDetailsMap.put("type","");
userDetailsMap.put("supplier_name",supplierName);
userDetailsMap.put("contractor_id","");
userDetailsMap.put("isrevoked","");
userDetailsMap.put("extended1",userName);
userDetailsMap.put("extended2",managerFirstName);
userDetailsMap.put("extended3",gender);
userDetailsMap.put("extended4","");
userDetailsMap.put("extended5","");
userDetailsMap.put("extended6","");
userDetailsMap.put("extended7","");
userDetailsMap.put("extended8","");
userDetailsMap.put("extended9","");
userDetailsMap.put("extended10","");
    
    log.info("END  generateUserDetaislMap :::" +userDetailsMap);
  
return userDetailsMap;
    
  }
  	public BusinessUnit businessUnitDetails(HashMap userDetailsMap) throws Exception {
	log.info("Start  businessUnitDetails method :::");
		BusinessUnit businessUnit = new BusinessUnit();
		try {

			if (null != userDetailsMap.get("companyCode")) {
				businessUnit.setCompanyCode(userDetailsMap.get("companyCode").toString());
			}
			if (null != userDetailsMap.get("businessUnitCode")) {
				businessUnit.setBusinessUnitCode(userDetailsMap.get("businessUnitCode").toString());
			}
			if (null != userDetailsMap.get("departmentCode")) {
				businessUnit.setDepartmentCode(userDetailsMap.get("departmentCode").toString());
			}
      
        if (null != userDetailsMap.get("description")) {
				businessUnit.setDepartmentName(userDetailsMap.get("description").toString());
			}
			// businessUnit.setDepartmentName("Care Management Admin");
			if (null != userDetailsMap.get("locationCode")) {
				businessUnit.setLocationCode(userDetailsMap.get("locationCode").toString());
			}
			if (null != userDetailsMap.get("jobTitle")) {
				businessUnit.setJobTitle(userDetailsMap.get("jobTitle").toString());
			}
			if (null != userDetailsMap.get("eeoCode")) {
				businessUnit.setEeoCode(userDetailsMap.get("eeoCode").toString());
			}
		if (null != userDetailsMap.get("job_code")) {
				businessUnit.setJobCode(userDetailsMap.get("job_code").toString());
			}

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		log.info("END  businessUnitDetails method :::");
		return businessUnit;

	}
  public boolean createCiamAuditEvent(String source, String target, String actionInterface, String action, String application, String accountName, String attributeName, String attributeValue, Map attributes, String value1, String value2, String value3, String value4){
    
	log.info("START createCiamAuditEvent method :::");
    if(Util.isNullOrEmpty(action)){
      
      return false;
    }
    if(Auditor.isEnabled(action)){
      AuditEvent auditEvent = new AuditEvent();
      auditEvent.setSource(source);
      auditEvent.setTarget(target);
      auditEvent.setInterface(actionInterface);
      auditEvent.setAction(action);
      auditEvent.setApplication(application);
      auditEvent.setAccountName(accountName);
      auditEvent.setAttributeName(attributeName);
      auditEvent.setAttributeValue(attributeValue);
      auditEvent.setString1(value1);
      auditEvent.setString2(value2);
      auditEvent.setString3(value3);
      auditEvent.setString4(value4);
      auditEvent.setAttributes(new Attributes(attributes));
      Auditor.log(auditEvent);
      context.commitTransaction();
      return true;
    }
    else{
     
      return false;
    }
	log.info("END createCiamAuditEvent method :::");
  }
  public void sendCiamFailureNotication(HashMap resultMap) {
    log.info("START  sendCiamFailureNotication method :::"+resultMap);
     String attributeNames = "Employee ID,User ID,UAAS Web Service name,faultCode,faultReason";
     ArrayList attributeList= new ArrayList(Arrays.asList(attributeNames.split(",")));
    EmailTemplate template = context.getObjectByName(EmailTemplate.class, STR_CIAM_WE_FAILURE_NOTIFICATION);
   String email = "SailPointSystem@carefirst.com";
   EmailOptions options = new EmailOptions();
  options.setTo(email);
  options.setVariable("failureDetailsMap",resultMap);
  options.setVariable("attributeList",attributeList);
  context.sendEmailNotification(template, options);
  log.info("END  sendCiamFailureNotication method :::");
  }
public boolean effectiveDateValid(HashMap userDetailsMap){
String employeeid = "";
boolean matched = false;
String effDate = "";
if (null != userDetailsMap.get("emp_id")) {
				employeeid = userDetailsMap.get("emp_id").toString();
			}
			Identity identity = context.getObjectByName(Identity.class , employeeid);
			Date actualeffdate = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy");
		if(null != identity){
		 effDate=identity.getAttribute("effdt");
		}
		if(null != effdt){
		 actualeffdate=  sdf.parse(effDate);
		 }
		Date currentDate = new Date();
        String currentDateString= sdf.format(currentDate);
        Date actualCurrentDate=  sdf.parse(currentDateString);
		if(actualCurrentDate.compareTo(actualeffdate) >= 0){
				matched=true;
		}
	return matched;		
}
  </Source>
  </Rule>
  <Rule created="1604263666835" id="0a111e5875691e4f81758590e49326d0" language="beanshell" modified="1611728923701" name="CF-CreationRule-Rule" type="IdentityCreation">
    <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="void">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation task.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application being aggregated.
        </Description>
        </Argument>
        <Argument name="account" type="ResourceObject">
          <Description>
          The resource account for the identity being created.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The identity that is being created.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import java.util.Map;
  import java.util.HashMap;
  import java.util.List;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.Attributes;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Custom;
  import java.util.Date;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;
  import org.apache.log4j.Logger;
  import sailpoint.api.PasswordGenerator;
  import sailpoint.object.PasswordPolicy;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;

    
System.out.println("Entering Rule:CF-CreationRule-Rule");
  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Creation Rule");


  String updatedUserName="";

  String actualEffectiveDate=account.getStringAttribute(ATR_EFFECTIVE_DATE).toString();
  SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
  Date effectiveDate = formatter.parse(actualEffectiveDate);
  System.out.println("actualEffectiveDate is == "+actualEffectiveDate);
  Date todayDate = new Date();
  mylogger.info(".......todayDate......" +todayDate);
  mylogger.info("effectiveDate......."+effectiveDate);
  //Password Generation Code
  String passwordnew = "";
 PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class, STR_AD_PASSWORD_POLICY);
  if(policy!=null)
  {
    passwordnew = new PasswordGenerator(context).generatePassword(policy);
    if(null != passwordnew){
      passwordnew = passwordnew.replaceAll("[^a-zA-Z0-9]", "c");
    }
  }
System.out.println("passwordnew"+passwordnew);
 /* String upperAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String lowerAlphabet = "abcdefghijklmnopqrstuvwxyz";
    String numbers = "0123456789";

    // combine all strings
    String alphaNumeric = upperAlphabet + lowerAlphabet + numbers;

    // create random string builder
    StringBuilder sb = new StringBuilder();

    // create an object of Random class
    Random random = new Random();

    // specify length of random string
    int length = 10;

    for(int i = 0; i @lt length; i++) {

      // generate random index number
      int index = random.nextInt(alphaNumeric.length());

      // get character specified by index
      // from the string
      char randomChar = alphaNumeric.charAt(index);

      // append the character to string builder
      sb.append(randomChar);
    }

    passwordnew= sb.toString();*/
    System.out.println("passwordnew is: " + passwordnew);

 
  identity.setPassword(passwordnew);


  //Updates Start Date and updates enddate to 1st jan 30

  // if((effectiveDate.compareTo(todayDate) @gt 0) @or (effectiveDate.compareTo(todayDate)== 0)){
  if(actualEffectiveDate!=null @and account.getStringAttribute(ATR_OBJ_ACTION)!=null){
    if(account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_HIR) @or account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_ADD)){
      identity.setAttribute(ATR_STARTDATE, actualEffectiveDate);
      identity.setAttribute(ATR_ENDDATE, STR_END_DATE_VALUE);
      mylogger.info("start Date set to identity");
    }
  }
  //}


  //Update Username  For CareFirst users
  mylogger.info("EmplyeeType...1111"+account.getStringAttribute(ATR_OBJ_PER_ORG));
  System.out.println("EmplyeeType..111111."+account.getStringAttribute(ATR_OBJ_PER_ORG));
  //System.out.println("EmplyeeType..111111."+account.getStringAttribute(ATR_OBJ_PER_ORG));
	//mylogger.info("COMPANY..."+account.getStringAttribute("COMPANY"));
  if(account.getStringAttribute(ATR_OBJ_PER_ORG) != null @and account.getStringAttribute("COMPANY")!=null){
    if(!(account.getStringAttribute("COMPANY").toString().equalsIgnoreCase("SBP"))){
    	if((account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase(STR_CONTRACTOR)) @or (account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase(STR_EMPLOYEE))){
      	mylogger.info("Inside Employee Type ...."+account.getStringAttribute(ATR_OBJ_PER_ORG));
System.out.println("VInside Employee Type ...."+account.getStringAttribute(ATR_OBJ_PER_ORG));
System.out.println("Before userId Generation using WSCall....");
      	//updatedUserName = sendRequest(STR_USERID_REQUESTXML,STR_USERID_ENDPOINT,"");
        
          updatedUserName = generateNextUserID();
        System.out.println("After userId Generation using WSCall ...."+updatedUserName);

       // mylogger.info("identity from SOAP"+identity.getName());

      	mylogger.info("updatedUserName from SOAP"+updatedUserName);
        System.out.println("updatedUserName ...."+updatedUserName);
     	 // identity.setName(updatedUserName);
        if("error".equalsIgnoreCase(updatedUserName)){
          EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-UserIdGeneration-Error");
         String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);
          Map args = new HashMap();
      args.put("identityName", identity.getName());
          options.setVariables(args);
      context.sendEmailNotification(template, options);
          
          ArrayList list=null;
  Custom customObj= context.getObjectByName(Custom.class,"CF-UserIDFailure-Custom");
      //should be kept in custom object
     list=customObj.get("failureList");
    
  if(list==null){
    list = new ArrayList();
    list.add(identity.getName());
    
  }
  else
    list.add(identity.getName());
          
  customObj.put("failureList",list);
      context.saveObject(customObj);
      context.commitTransaction();
          
          System.out.println("list ...."+list);
        }
        else{
      			identity.setAttribute(ATR_USERID,updatedUserName);
        }
       
      }


		
    	}
    else {    
    				System.out.println("inside else ....");
      if(account.getAttribute("USERID")!=null){
      System.out.println("account.getStringAttribute ...."+account.getStringAttribute("USERID"));
      System.out.println("account.getAttribute ...."+account.getAttribute("USERID"));
     identity.setAttribute(ATR_USERID,account.getAttribute("USERID").toString());
      }
      if(account.getAttribute("EMAIL")!=null){
        identity.setAttribute(ATR_EMAIL,account.getAttribute("EMAIL").toString());
      }
    }
    

  }</Source>
  </Rule>
  <Rule created="1604263666877" id="0a111e5875691e4f81758590e4bd26d1" language="beanshell" modified="1605017318615" name="CF-Comany-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String company = identity.getAttribute(ATR_COMPANY);
return company;</Source>
  </Rule>
  <Rule created="1604263666966" id="0a111e5875691e4f81758590e51626d2" language="beanshell" modified="1606590587904" name="CF-BuildMap-Rule" type="BuildMap">
    <Description>This rule is used by the delimited file connector to build a map representation of the delimited data.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application whose data file is being processed.
        </Description>
        </Argument>
        <Argument name="schema">
          <Description>
          The Schema currently in use.
        </Description>
        </Argument>
        <Argument name="state">
          <Description>
          A Map containing state information.
        </Description>
        </Argument>
        <Argument name="record">
          <Description>
          A List of data tokens parsed from the current line of the data file.
        </Description>
        </Argument>
        <Argument name="cols">
          <Description>
          A List of the columns to use.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="map">
          <Description>
          A Map of the resource object assembled from the data.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.connector.DelimitedFileConnector;
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;

  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Buildmap Rule");



  HashMap map = (HashMap)DelimitedFileConnector.defaultBuildMap(cols, record);
  mylogger.info("Starting Buildmap Rule"+map);


  String strAction = map.get(ATR_OBJ_ACTION);
  String strEffectiveDate = map.get(ATR_EFFECTIVE_DATE);
  mylogger.info("strEffectiveDate"+strEffectiveDate);
  Date effectiveDate =null;

  if(strEffectiveDate != null ){
    SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
    effectiveDate = formatter.parse(strEffectiveDate);
  }
  Date todayDate = new Date();
  mylogger.info("todayDate is == "+todayDate+effectiveDate );

  if(Util.isNotNullOrEmpty(strAction) &amp;&amp; effectiveDate !=null ) {
    if(strAction.equalsIgnoreCase(STR_ACTION_HIR) || strAction.equalsIgnoreCase(STR_ACTION_ADD)) {

      map.put(ATR_START_DATE,strEffectiveDate);
       map.put(ATR_END_DATE,STR_END_DATE_VALUE);
    }

  }
  //Based on effective Date updated employee status and end date
  if(effectiveDate != null &amp;&amp; todayDate != null &amp;&amp; Util.isNotNullOrEmpty(strAction)) {
 mylogger.info("SystemDate and effectiveDates are Equal or Greater Immediate Termination " +effectiveDate);
    if(todayDate.compareTo(effectiveDate) >= 0){

      if(strAction.equalsIgnoreCase(STR_ACTION_HIR)) {
        map.put(ATR_OBJ_EMP_STATUS,STR_ACTIVE);
      }
      else if(strAction.equalsIgnoreCase(STR_ACTION_TER)) {
        map.put(ATR_OBJ_EMP_STATUS,STR_TERMINATE);
        map.put(ATR_END_DATE,strEffectiveDate);
      }
      else if(strAction.equalsIgnoreCase("DTA")) {
        map.put(ATR_OBJ_EMP_STATUS,"Data Change");
      }
 else if(strAction.equalsIgnoreCase("LOA")) {
        map.put(ATR_OBJ_EMP_STATUS,"L");
      }
else if(strAction.equalsIgnoreCase("PLA")) {
        map.put(ATR_OBJ_EMP_STATUS,"P");
      }
else if((strAction.equalsIgnoreCase("RFL"))|| (strAction.equalsIgnoreCase("RFD"))) {
        map.put(ATR_OBJ_EMP_STATUS,"A");
      }
    
      else if(strAction.equalsIgnoreCase(STR_ACTION_ADD)) {
        map.put(ATR_OBJ_EMP_STATUS,STR_ACTIVE);
      }
    }

    if(todayDate.compareTo(effectiveDate) &lt; 0 &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_ADD)) {
      map.put(ATR_OBJ_EMP_STATUS,ATR_PREHIRE);
    }
    else if(todayDate.compareTo(effectiveDate) &lt; 0 &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_HIR)) {
      map.put(ATR_OBJ_EMP_STATUS,ATR_PREHIRE);
    }

  }


  //Set UserType
  if(map.get(ATR_OBJ_PER_ORG)!=null){
    if(map.get(ATR_OBJ_PER_ORG).toString().equals(STR_EMP)){
      
          map.put(ATR_OBJ_PER_ORG,STR_EMPLOYEE);
      
    }else if(map.get(ATR_OBJ_PER_ORG).toString().equals(STR_CWR)){
       
           map.put(ATR_OBJ_PER_ORG,STR_CONTRACTOR);
    
    }
    else{
      System.out.println("Not a Carefirst Associate");
    }
    
  }
  return map;</Source>
  </Rule>
  <Rule created="1604263667040" id="0a111e5875691e4f81758590e56026d3" language="beanshell" modified="1604263678554" name="CF-AD-GroupRefresh-Rule" type="GroupAggregationRefresh">
    <Description>This rule is used to set the owner or modify the account group before it is persisted to the database.</Description>
    <Signature returnType="Object">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation task.
        </Description>
        </Argument>
        <Argument name="obj" type="ResourceObject">
          <Description>
          A sailpoint.object.ResourceObject generated from the application
          and the ProvisioningPlan's ObjectRequest.
        </Description>
        </Argument>
        <Argument name="accountGroup" type="ManagedAttribute">
          <Description>
          The account group being refreshed.
        </Description>
        </Argument>
        <Argument name="groupApplication" type="Application">
          <Description>
          Application being aggregated.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="accountGroup" type="ManagedAttribute">
          <Description>
          The refreshed account group object.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>accountGroup.setRequestable(false);

context.saveObject(accountGroup);  
context.commitTransaction();</Source>
  </Rule>
  <Rule created="1604263667106" id="0a111e5875691e4f81758590e5a226d4" language="beanshell" modified="1604263678621" name="CF-AD-AfterProvisioning-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Source>import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
import sailpoint.object.ProvisioningResult;
import org.apache.log4j.Logger;
  import sailpoint.api.Provisioner;
    
Logger logger= Logger.getLogger("com.carefirst.loggers");
logger.info("Starting After Provisiioning Rule");

if(plan != null){
System.out.println("######XML PLAN is:::"+plan.toXml());
logger.info("######XML PLAN is:::"+plan.toXml());


System.out.println("######XML Identity is:::"+plan.getIdentity());
logger.info("######XML Identity is:::"+plan.getIdentity());


AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
System.out.println("######accountRequest ::::"+accountRequest);
logger.info("######accountRequest ::::"+accountRequest);

Operation operation = accountRequest.getOperation();
 System.out.println("######accountRequest operation::::"+operation);
logger.info("######accountRequest operation::::"+operation);
System.out.println("######Boolean operation::::"+operation.equals(Operation.Create));
logger.info("######Boolean operation::::"+operation.equals(Operation.Create));

if(null != operation &amp;&amp; operation.equals(Operation.Create)){
System.out.println("######In If Condition");
logger.info("######In After If Condition 111");
  Identity identity = plan.getIdentity();
  String employeestatus = identity.getAttribute("employeestatus");
  logger.info("######employeestatus:::::"+employeestatus);
  if(null != employeestatus &amp;&amp; employeestatus.equalsIgnoreCase("Pre Hire")){
    logger.info("######In Pre Hire If Condition:::::"+employeestatus);
    ProvisioningPlan disablePlan = new ProvisioningPlan();
    disablePlan.setIdentity(identity);
	logger.info("######In Pre Hire Identity :::::"+identity);
    // Disable Active Directory Account
   Application appObj  = context.getObjectByName(Application.class, "Active Directory");
    linkObj = identity.getLink(appObj);
    log.info("Inside Common Rule Library buildCustomPlan() before linkObj not check");
    if(linkObj != null){
      log.info("Inside Common Rule Library buildCustomPlan()  inside null check");
      AccountRequest adAccountReq = new AccountRequest();

      adAccountReq.setApplication("Active Directory");
      adAccountReq.setNativeIdentity(linkObj.getNativeIdentity());
      adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);
          disablePlan.add(adAccountReq);
     Provisioner  prov = new Provisioner(context);
    prov.compile(disablePlan);
    prov.execute();
    
  }
  
  
EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-EmailTemplate-ManagerEmailTemplate");

String email = "spadmin@test.com";
EmailOptions options = new EmailOptions();
Identity manager=identity.getManager();
if(manager == null){
options.setTo(email);
}else{
if(null != manager.getEmail()){
options.setTo(manager.getEmail());
}else{
options.setTo(email);
}
}
logger.info("######In After If Condition 22");

Map args = new HashMap();
args.put("identity", identity.getName());
if(null != identity.getPassword()){
args.put("password", context.decrypt(identity.getPassword()));
}else{
args.put("password", "Defalult#1234");
}
options.setVariables(args);
context.sendEmailNotification(template, options);
logger.info("######In After If Condition END");
  }
  }
}</Source>
  </Rule>
  <Rule created="1604263667165" id="0a111e5875691e4f81758590e5dd26d5" language="beanshell" modified="1604263678682" name="PowerShell Rule">
    <Source>
 

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

  return context.encrypt("Password123");
  //String command = "powershell.exe  your command";
  //Getting the version
  String command = "powershell.exe  $PSVersionTable.PSVersion";
  // Executing the command
  Process powerShellProcess = Runtime.getRuntime().exec(command);
  // Getting the results
  powerShellProcess.getOutputStream().close();
  String line;
  System.out.println("Standard Output:");
  BufferedReader stdout = new BufferedReader(new InputStreamReader(
    powerShellProcess.getInputStream()));
  while ((line = stdout.readLine()) != null) {
   System.out.println(line);
  }
  stdout.close();
  System.out.println("Standard Error:");
  BufferedReader stderr = new BufferedReader(new InputStreamReader(
    powerShellProcess.getErrorStream()));
  while ((line = stderr.readLine()) != null) {
   System.out.println(line);
  }
  stderr.close();
  System.out.println("Done");
   return "Successs";
 </Source>
  </Rule>
  <Rule created="1604263667225" id="0a111e5875691e4f81758590e61926d6" language="beanshell" modified="1609950933743" name="SP_SPNT_SNOW_INT_ServiceNow_Task_Rule" type="Workflow">
    <Source> 
   import sailpoint.object.IdentityRequest;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Custom;
  import sailpoint.object.QueryOptions;
  import java.io.BufferedReader;
  import java.io.IOException;
  import java.io.InputStreamReader;
  import java.net.HttpURLConnection;
  import java.net.MalformedURLException;
  import java.net.URL;
  import sailpoint.object.Attributes;
  import sailpoint.tools.Message;
  import sailpoint.object.TaskResult;
  import sailpoint.object.Identity;
  import sailpoint.tools.Util;
  import sailpoint.tools.GeneralException;
  import sailpoint.object.IdentityRequest;
  import sailpoint.object.IdentityRequestItem;
  import sailpoint.object.WorkflowSummary.ApprovalSummary;
  import java.util.List;
  import java.util.ArrayList;
  import sailpoint.object.ApprovalItem;
  import sailpoint.object.ApprovalSet;
  import sailpoint.tools.Message;
  import sailpoint.object.Comment;

  import org.json.JSONObject;

  import org.apache.http.auth.UsernamePasswordCredentials;
  import org.apache.http.client.CredentialsProvider;
  import org.apache.http.impl.client.BasicCredentialsProvider;
  import org.apache.http.client.HttpClient;
  import org.apache.http.client.config.RequestConfig;
  import org.apache.http.auth.AuthScope;
  import org.apache.http.impl.client.HttpClientBuilder;
  import org.apache.http.client.methods.HttpPost;
  import org.apache.http.HttpResponse;
  import org.apache.http.entity.StringEntity;
  import org.apache.http.entity.ContentType;
  import org.apache.http.StatusLine;
  import sailpoint.api.IdIterator;

  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;

  Log  log = LogFactory.getLog("SPSPNTSNOWINT.UpdateRITMStatus");

  QueryOptions qo = new QueryOptions();
  qo.add(Filter.like("IdentityRequest.source", "Service-Now")); // All Identity Requests created from 'ServiceNow Service Portal Integration' will have source set to 'Service-Now'
  qo.add(Filter.like("IdentityRequest.executionStatus", "Completed"));

  Iterator idReqs = context.search(IdentityRequest.class, qo, "id");
  IdIterator itrIdReqs = new IdIterator(context, idReqs);

  if(itrIdReqs != null){

    while(itrIdReqs.hasNext()){

      String idReqId = (String) itrIdReqs.next();      

      IdentityRequest idReq = context.getObjectById(IdentityRequest.class, idReqId);

      if(idReq.getAttribute("requestProcessed")!=null) { // All Identity Requests created from 'ServiceNow Service Portal Integration' will have requestProcessed attribute set to 'init' during creation

        if(!idReq.getAttribute("requestProcessed").toString().equals("Success")) {

          if(taskResult != null)
            taskResult.addMessage("Processing Identity Reqeust: " + idReq.getName());

          String ticket=idReq.getExternalTicketId();
          String idReqStatus=idReq.getCompletionStatus().toString();
          String snStatus = null;
          boolean approvalRejected = false;
          String approvalRejectedMsg = "";
          String approvalRejectedComments = "";

          List &lt;IdentityRequestItem> identityRequestItem = idReq.getItems();

          if(identityRequestItem!=null){
            for(IdentityRequestItem idReqItems : identityRequestItem){                  
              if(idReqItems.getApprovalState() !=null &amp;&amp; idReqItems.getApprovalState().toString() == "Rejected") {
                idReqStatus = "Incomplete";
                approvalRejected = true;
                List &lt;ApprovalSummary> appSummary = idReq.getApprovalSummaries();
                if(appSummary!=null){
                  for (ApprovalSummary appSum: appSummary){
                    if(!appSum.getRequest().startsWith("ServiceNow")){
                      ApprovalSet appSet =  appSum.getApprovalSet();
                      List &lt;ApprovalItem> appItems = appSet.getItems();
                      for (ApprovalItem approvalItems: appItems){             
                        approvalRejectedMsg = "Requested item '"+approvalItems.getDisplayableValue()+"'  " + " "+approvalItems.getState()+" by '"+appSum.getCompleter() + "' on '"+ appSum.getEndDate() +"'";
                        List approvalRejectComments = approvalItems.getComments();
                        if(approvalRejectComments != null &amp;&amp; !approvalRejectComments.isEmpty()) {
                          for(Comment cmt : approvalRejectComments)
                            approvalRejectedComments = approvalRejectedComments + cmt.getComment() + "\n";
                        }
                      }
                    }
                  }
                }
                break;
              }
            }
          }

          Custom statusMapConf=context.getObject(Custom.class, "SP_SPNT_SNOW_INT_IIQServiceNowStatusMapping");
          Map statusMap = (Map) statusMapConf.get("completionStatusMap");
          snStatus = statusMap.get(idReqStatus);

          if( snStatus != null) {

            try {  

              Custom conf=context.getObject(Custom.class, "SP_SPNT_SNOW_INT_ServiceNowCredentialConfig");
              String endpoint=conf.getString("url");

              JSONObject body = new JSONObject();

              body.put("state", snStatus);
              body.put("assignment_group", "d625dccec0a8016700a222a0f7900d06");
     					//body.put("description", "Updated 1111111");
     
              //body.put("additional_comments", "This is the updated ticket");

              if(idReq.getErrors() != null &amp;&amp; idReq.getErrors().size() > 0) {

                List messages = idReq.getErrors();

                String errorMessage = "";

                for(Message msg : messages) {

                  errorMessage = errorMessage + msg.getMessage();

                }

                body.put("error", errorMessage);

              } else if(approvalRejected) {

                body.put("error", approvalRejectedMsg + "\n" + approvalRejectedComments);

              }else
              {
                body.put("error", "");
              }

             // UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(conf.getString("username"), context.decrypt(conf.getString("password")));
              UsernamePasswordCredentials credentials = new UsernamePasswordCredentials("sa-SailpointServiceNow", "Snow@123");
              CredentialsProvider credsProvider = new BasicCredentialsProvider();
              credsProvider.setCredentials(new AuthScope (AuthScope.ANY), credentials);

              RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(120000).setConnectionRequestTimeout(120000).setSocketTimeout(120000).build();
              HttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setDefaultCredentialsProvider(credsProvider).build();

              HttpPost httpPost = null;
              HttpResponse response;
              StatusLine restStatus;

              try 
              {
                URI updateRITMStatus = URI.create(endpoint+"updateState/"+ticket);

                httpPost = new HttpPost(updateRITMStatus);

                httpPost.setHeader("Content-Type", "application/json");
                httpPost.setHeader("Accept", "application/json");

                if (null != log)
                  log.debug((Object)("JSON for RITM Update:" + body));

                httpPost.setEntity(new StringEntity(body.toString(), ContentType.APPLICATION_JSON));

                response = httpClient.execute(httpPost);

                restStatus = response.getStatusLine();

                if (restStatus.getStatusCode() != 200) {
                  idReq.getAttributes().put("requestProcessed", "Failed");
                  context.saveObject(idReq);
                  if(null != log)
                    log.debug("Failed to Update RITM Status. HTTP error code : " + restStatus.getStatusCode());  

                }else{
                idReq.getAttributes().put("requestProcessed", "Success");
                context.saveObject(idReq);
                if(null != log)
                    log.debug("Success to Update RITM Status. HTTP error code : " + restStatus.getStatusCode());
                }     
              } finally
              {			
                if(null != httpPost) { httpPost.releaseConnection(); }		
              }

            } catch (MalformedURLException e) {  
              e.printStackTrace();  
            } catch (IOException e) {  
              e.printStackTrace();  
            } 
          }
        } 
      }
    }
    context.commitTransaction();
  }

  sailpoint.tools.Util.flushIterator(itrIdReqs);
  sailpoint.tools.Util.flushIterator(idReqs);

  </Source>
  </Rule>
  <Rule created="1604263667288" id="0a111e5875691e4f81758590e65826d7" language="beanshell" modified="1604263678812" name="SampleRule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import java.util.HashMap;
  import java.util.List;
  import java.text.DateFormat;  
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  import sailpoint.api.RequestManager;
  import sailpoint.object.Attributes;
  import sailpoint.object.Identity;
  import sailpoint.object.Request;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.api.Provisioner;
  import sailpoint.object.RequestDefinition;
  import sailpoint.object.Workflow;
  import sailpoint.object.Attributes;
  import org.apache.log4j.Logger;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  
  
 Identity identity = context.getObjectByName(Identity.class,"100427");
  //return identity.getAttribute(ATR_EMPLOYEETYPE);
// return  buildMoverPlan(identity);
  return  singleAccountAggregation("Active Directory","CN=Bobble.John,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
  
  Logger log = Logger.getLogger("com.carefirst.EnableAccountRule");
  log.info("Inside EnableAccount Rule ");
   EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-EmailTemplate-Reminders-Resources");
     EmailOptions options = new EmailOptions();
  if(template != null){

      String email = "Naresh.Chennuri@carefirst.com";
   
   
          options.setTo(email);
      
      }
      log.info("Inside Common Rule Library sendEmailNotification() "); 

      Map args = new HashMap();
      args.put("year","2020");
    args.put("month","July");

      options.setVariables(args);
      context.sendEmailNotification(template, options);
  return "Success";
  Attributes attributes = new Attributes();
  attributes.put("Test1","User1");
  attributes.put("Test2","User2");
  createAuditEvent("TestAudit",null,null,"TestAudit",null,"AAB8401",null,null,attributes,null,null,null,null);
                   return "Audit Sent";
                   try{


                     Identity identity = null;
                     ProvisioningPlan plan = null;
                     Date date = new Date(); 
                     DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");  
                     String strDate = dateFormat.format(date);  
                     Filter startDateFilter = Filter.eq("startdate",strDate);
                     Filter actionFilter = Filter.eq("action","HIR");
                     Filter andFilter = Filter.and(startDateFilter,actionFilter);
                     List identitiesList = context.getObjects(Identity.class,new QueryOptions().addFilter(startDateFilter));

                     //return identitiesList;
                     for (identity: identitiesList) {


                       plan = createEnablePlan(identity);
                       Provisioner  prov = new Provisioner(context);
                       prov.compile(plan);
                       prov.execute();

                       identity.setInactive(false);
                       identity.setAttribute("employeestatus","Active");
                       context.saveObject(identity);
                       context.commitTransaction();
                       sendEmailNotification(identity,"CareFirst-EmailTemplate-EnableAccount");
                       /*

      HashMap launchArgsMap = new HashMap();
      launchArgsMap.put("launcher","spadmin");
      launchArgsMap.put("approvalScheme", "none");
      Workflow wf = (Workflow) context.getObjectByName(Workflow.class, "Workflow-CareFirst-EnableAccount");
      log.info("Inside EnableAccount Rule  wf is "+wf.getName());
      Request req = new Request();
      RequestDefinition reqdef = context.getObject( RequestDefinition.class, "Workflow Request" );
      req.setDefinition(reqdef);
      Attributes allArgs = new Attributes();
      allArgs.put( "workflow", wf.getId() );
      allArgs.put("identity", identity);
      allArgs.put("identityName", identity.getName());
      allArgs.putAll(launchArgsMap);
      Identity id = context.getObjectByName(Identity.class, "AAB8401");
      req.setOwner(id);
      req.setAttributes( reqdef, allArgs );
      RequestManager.addRequest(context, req); */

                     }
                     return   false;
                   }		
                   catch(Exception e){
                     e.printStackTrace();
                   }


                   </Source>
  </Rule>
  <Rule created="1604263667361" id="0a111e5875691e4f81758590e6a126d8" language="beanshell" modified="1616767512834" name="CareFirst-Rule-RLOA-Trigger" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  import java.util.Calendar;
  import java.util.*;
  import java.text.SimpleDateFormat; 
  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Carefirst RLOA Trigger Rule");
  try{
    if(newIdentity != null &amp;&amp; previousIdentity != null){
      String strAction = newIdentity.getAttribute("action") != null ? newIdentity.getAttribute("action") : "";
      String strPrevAction = previousIdentity.getAttribute("action") != null ? previousIdentity.getAttribute("action") : "";
      if((previousIdentity.isInactive())){

        if(!(newIdentity.getAttribute("company").equals("SBP"))){
          SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy");

          String effDate=newIdentity.getAttribute("effdt");
          System.out.println("Inside RLOA------"+effDate);
          Date actualeffdate=  sdf.parse(effDate);
          Date currentDate = new Date();
          String currentDateString= sdf.format(currentDate);
          Date actualCurrentDate=  sdf.parse(currentDateString);
          System.out.println("Inside RLOA------"+actualeffdate+actualCurrentDate);


          mylogger.info("Starting Carefirst RLOA Trigger Rule Action is "+strAction);
          if(Util.isNotNullOrEmpty(strAction)&amp;&amp;  Util.isNotNullOrEmpty(strPrevAction)) {

            if((strAction.equalsIgnoreCase("RFD") || strAction.equalsIgnoreCase("RFL"))&amp;&amp; (actualCurrentDate.compareTo(actualeffdate) >= 0)&amp;&amp; (newIdentity.getAttribute("employeestatus").equals("A"))){
              mylogger.info("Starting Carefirst RLOA Trigger Rule Inside return if ");
              return true;  
            }else{
              return false;
            }
          }else{
            return false;
          }

        }

        else{
          return false;
        }
      }
    }else{
      return false;
    }
  }
  catch(Exception e){
    return false;
  }</Source>
  </Rule>
  <Rule created="1604263667428" id="0a111e5875691e4f81758590e6e426d9" language="beanshell" modified="1604263678941" name="CF-ProxyAddress-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import sailpoint.object.*;

String firstname =  identity.getFirstname();
String lastname =  identity.getLastname();
String email = firstname+"."+lastname+STR_CAREFIRST_MAIL;
  

  int count = 1;
  Identity identity = null; 
  Filter emailFilter= null;
    emailFilter = Filter.eq("email",email);
   identity = context.getUniqueObject(Identity.class,emailFilter);
  if(identtiy != null){
    
      while(true){
      email =   firstname+"."+lastname+ count+ STR_CAREFIRST_MAIL;
        emailFilter= Filter.eq("email",email);
       identity = context.getUniqueObject(Identity.class,emailFilter);
        count ++;
        if(identity == null){
        
          break;
      }
      }
  }
return email;
  </Source>
  </Rule>
  <Rule created="1604263667500" id="0a111e5875691e4f81758590e72c26da" language="beanshell" modified="1605520366000" name="CF-CountryCode-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String country= identity.getAttribute(ATR_COUNTRY);



return country;</Source>
  </Rule>
  <Rule created="1604263667560" id="0a111e5875691e4f81758590e76826db" language="beanshell" modified="1604263679074" name="CF-ManagerApprovalAssignment-Rule" type="ApprovalAssignment">
    <Description>This example rule switches all of the owners to spadmin. The idea
    of this rule is to allow some customization of the approvals
    so the ownership can be calculated for cases where you might
    use and extended attribute or some other means outside our
    default mechanisms to derive the owner of the Approval.

    This rule is typically configured on the Approval Step
    in the LCM Provisioning Workflow or can be set on any
    steps based on the "Provisioning Approval" step
    library.

    Since 6.2</Description>
    <Signature returnType="null">
      <Inputs>
        <Argument type="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument type="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument type="approvals">
          <Description>
          List of approvals generated by the approvalScheme, maybe null if there were no
          approvals enabled.
        </Description>
        </Argument>
        <Argument type="approvalSet">
          <Description>
          Representation of the cart, also found on the approvals generated by the
          default schemes.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument type="newApprovals">
          <Description>
          Return a lIst of Workflow.Approval objects that should be included
          during the approval process.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  /*******
    * *
    * *
    * Rule: Approval Assignment Template *
    * Description: Approval Assignment Template *
    * Inputs: *
    * log - The log object associated with the SailPointContext. *
    * context - A sailpoint.api.SailPointContext object that can be used to query the database if necessary. *
    * approvals - List of approvals generated by the approvalScheme, maybe null if there were no *
    * approvals enabled. *
    * approvalSet - Representation of the cart, also found on the approvals generated by the *
    * default schemes. *
    * Returns: *
    * newApprovals - Return a lIst of Workflow.Approval objects that should be included *
    * during the approval process. *
    ******/


  import sailpoint.object.ApprovalSet;
  import sailpoint.object.ApprovalItem;
  import sailpoint.object.Workflow.Approval;
  import sailpoint.object.Workflow.Arg;
  import sailpoint.tools.xml.XMLObjectFactory;
  import sailpoint.workflow.IdentityApprovalGenerator;
  import sailpoint.api.ManagedAttributer;
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
  import sailpoint.object.*;
  import java.util.*;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
	Logger log = Logger.getLogger("com.carefirst.ApprovalAssignmentRule");

  log.error("Inside ApprovalAssignmentRule");

Map approvalMap = new HashMap();
  //List newApprovals = new ArrayList();
  List approvalItems = approvalSet.getItems();
  Identity targetUser = context.getObjectByName(Identity.class,identityName);
  log.info("identityName :::"+identityName);
  log.info("targetUser :::"+targetUser);
  Identity managerObj=targetUser.getManager();
  log.info("managerObj :::"+managerObj);


  String approverName = managerObj.getName();
  String secondApprover = "spadmin";
  String thirdApprover = "spadmin";
  log.info("In Manager assignemnet rule approverName :::"+approverName);
  for(ApprovalItem item : approvalItems)
  {
    String requestedEntitlement ="";
    
    if (item.getDisplayValue() != null )
    {
   
      requestedEntitlement = item.getDisplayValue().trim();
      Bundle roleObject = context.getObjectByName(Bundle.class,requestedEntitlement);
      log.info("roleObject :::"+roleObject);
      String approvalFlow = roleObject.getAttribute("approvalFlow");
      log.info("In Manager assignemnet rule approval flow :::"+approvalFlow);
      //Identity roleOwner = roleObject.getOwner();
      //secondApprover = roleOwner.getName();
      //secondApprover = "33134";
      
      
      if(null != approvalFlow &amp;&amp; approvalFlow.contains(",")){
        if(approvalFlow.contains("manager")) 
        {
          ApprovalSet newSet = approvalMap.get(approvalFlow);
          log.info(" In Manager assignemnet rule newSet :::"+newSet);

    		if (newSet == null)
    		{
      		newSet = new ApprovalSet();
    		}
    		newSet.add(XMLObjectFactory.getInstance().clone(item, context));
        //approvalMap.put("100414",newSet);
          
      	approvalMap.put(approverName,newSet);
      
          }
        
      }
      
    }

  }

  //===== Generate the approval list from the approval map ====
  log.info("In Manager assignemnet rule Final Approval Map approvalMap :::"+approvalMap);

  IdentityApprovalGenerator iag = new IdentityApprovalGenerator(wfcontext);
  newApprovals = iag.buildApprovalsFromMap(approvalMap, null);
  return newApprovals;
  </Source>
  </Rule>
  <Rule created="1604263667627" id="0a111e5875691e4f81758590e7ab26dc" language="beanshell" modified="1604263679140" name="CF-RoleOwnerApprovalAssignment-Rule" type="ApprovalAssignment">
    <Description>This example rule switches all of the owners to spadmin. The idea
    of this rule is to allow some customization of the approvals
    so the ownership can be calculated for cases where you might
    use and extended attribute or some other means outside our
    default mechanisms to derive the owner of the Approval.

    This rule is typically configured on the Approval Step
    in the LCM Provisioning Workflow or can be set on any
    steps based on the "Provisioning Approval" step
    library.

    Since 6.2</Description>
    <Signature returnType="null">
      <Inputs>
        <Argument type="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument type="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument type="approvals">
          <Description>
          List of approvals generated by the approvalScheme, maybe null if there were no
          approvals enabled.
        </Description>
        </Argument>
        <Argument type="approvalSet">
          <Description>
          Representation of the cart, also found on the approvals generated by the
          default schemes.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument type="newApprovals">
          <Description>
          Return a lIst of Workflow.Approval objects that should be included
          during the approval process.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  /*******
    * *
    * *
    * Rule: Approval Assignment Template *
    * Description: Approval Assignment Template *
    * Inputs: *
    * log - The log object associated with the SailPointContext. *
    * context - A sailpoint.api.SailPointContext object that can be used to query the database if necessary. *
    * approvals - List of approvals generated by the approvalScheme, maybe null if there were no *
    * approvals enabled. *
    * approvalSet - Representation of the cart, also found on the approvals generated by the *
    * default schemes. *
    * Returns: *
    * newApprovals - Return a lIst of Workflow.Approval objects that should be included *
    * during the approval process. *
    ******/


  import sailpoint.object.ApprovalSet;
  import sailpoint.object.ApprovalItem;
  import sailpoint.object.Workflow.Approval;
  import sailpoint.object.Workflow.Arg;
  import sailpoint.tools.xml.XMLObjectFactory;
  import sailpoint.workflow.IdentityApprovalGenerator;
  import sailpoint.api.ManagedAttributer;
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
  import sailpoint.object.*;
  import java.util.*;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
	Logger log = Logger.getLogger("com.carefirst.ApprovalAssignmentRule");

  log.error("Inside ApprovalAssignmentRule");

Map approvalMap = new HashMap();
  //List newApprovals = new ArrayList();
  List approvalItems = approvalSet.getItems();
  Identity targetUser = context.getObjectByName(Identity.class,identityName);
  log.info("identityName :::"+identityName);
  log.info("targetUser :::"+targetUser);
  Identity managerObj=targetUser.getManager();
  log.info("managerObj :::"+managerObj);


  String approverName = managerObj.getName();
  String secondApprover = "spadmin";
  String thirdApprover = "spadmin";
  log.info("approverName :::"+approverName);
  for(ApprovalItem item : approvalItems)
  {
    String requestedEntitlement ="";
    
    if (item.getDisplayValue() != null )
    {
   
      requestedEntitlement = item.getDisplayValue().trim();
      Bundle roleObject = context.getObjectByName(Bundle.class,requestedEntitlement);
      log.info("roleObject :::"+roleObject);
      String approvalFlow = roleObject.getAttribute("approvalFlow");
      log.info("First Step approvalFlow :::"+approvalFlow);
      Identity roleOwner = roleObject.getOwner();
      secondApprover = roleOwner.getName();
      //secondApprover = "33134";
      
      
      if(null != approvalFlow &amp;&amp; approvalFlow.contains(",")){
        if(approvalFlow.contains("roleOwner")) 
        {
          
      
          
      		
    //===== for adding role owner approver for specific entitlements ===
        ApprovalSet newSetForSecondApprover = approvalMap.get(approvalFlow);
        if (newSetForSecondApprover == null)
        {
          newSetForSecondApprover = new ApprovalSet();
        }
        newSetForSecondApprover.add(XMLObjectFactory.getInstance().clone(item, context));
          //approvalMap.put("33134",newSetForSecondApprover);
       
        approvalMap.put(secondApprover,newSetForSecondApprover);
          
          
       
        }
        
      }
      
    }

  }

  //===== Generate the approval list from the approval map ====
  log.info("In Role owner Final Approval Map is :::"+approvalMap);

  IdentityApprovalGenerator iag = new IdentityApprovalGenerator(wfcontext);
  newApprovals = iag.buildApprovalsFromMap(approvalMap, null);
  return newApprovals;
  </Source>
  </Rule>
  <Rule created="1604263667691" id="0a111e5875691e4f81758590e7eb26dd" language="beanshell" modified="1604263679205" name="PowerShell-Test" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
//return context.decrypt("1:ACP:Jij32w72mtAMXxRx5Bk5Ll+e/5rki+PMvVWfzPAl7zI=");
//Add-type -path  E:\IQService\utils.dll

  
   try{
    
    ECHO "Testing Folder creation****" |Add-Content -path E:\Test\TestNewFile.txt -FORCE
      new-item  E:\Test\TestFolder  -itemtype directory
         ECHO "Test Folder created***" |Add-Content -path E:\Test\TestNewFile.txt -FORCE
 }
   

  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Error.txt -FORCE
  }

  return "Succes";
  </Source>
  </Rule>
  <Rule created="1604263667781" id="0a111e5875691e4f81758590e84526de" language="beanshell" modified="1618230982567" name="LaunchPowerShellRule">
    <Source>
  import sailpoint.object.Application;


  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;


  public void runPowershell(String ruleName,String identityName){
  String strADAppName = "Active Directory";

  // Fake account request
  AccountRequest accountRequest = new AccountRequest();
  accountRequest.setApplication("IIQ");
  accountRequest.setNativeIdentity(identityName);
  accountRequest.setOperation(AccountRequest.Operation.Modify);
  accountRequest.add(new AttributeRequest("identityName",ProvisioningPlan.Operation.Set,identityName));

  Map data = new HashMap();
  Rule ruleObj = context.getObjectByName(Rule.class,ruleName);
 // Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedriveAndHomedirectoryProvision-Rule");
  //return ruleObj;
  data.put("postScript",ruleObj);
  Application appObj = context.getObjectByName(Application.class, strADAppName);
  data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  String IQServiceServer = "sv-spidsvc-d1";
  int IQServicePort = 5050;
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
  //return data;
  RpcResponse response = service.execute(request);
 // return response;
  }
  </Source>
  </Rule>
  <Rule created="1604263667845" id="0a111e5875691e4f81758590e88526df" language="beanshell" modified="1606728006808" name="AAA-Test" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
//return context.decrypt("1:ACP:Jij32w72mtAMXxRx5Bk5Ll+e/5rki+PMvVWfzPAl7zI=");
  //return context.decrypt("1:ACP:UJP9NaTu6SxJIAy7SE4bROfWcu7bLmJ1XKSSxeL4WMc=");
  
 //return  context.decrypt("1:ACP:UJP9NaTu6SxJIAy7SE4bROfWcu7bLmJ1XKSSxeL4WMc="); 
    
  
   try{
    
    ECHO "Execution Started****" |Add-Content -path E:\Test\Create.txt -FORCE
 }
   


  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Error.txt -FORCE
  }

  return "Succes";
  </Source>
  </Rule>
  <Rule created="1604263667907" id="0a111e5875691e4f81758590e8c326e0" language="beanshell" modified="1604263679394" name="testPowershell" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="120"/>
      </Map>
    </Attributes>
    <Description>  
  This example is for IQService Script.    
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="email">
          <Description>
            Email address to call powershell script 
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="response">
          <Description>
            Response of the Powershell script.
          </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
Add-type -path "C:\Program Files\IQS\Utils.dll";

# Read the environment variables
$sReader = New-Object System.IO.StringReader([System.String]$env:Request);
   
$xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
$requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
$resultObject = New-Object Sailpoint.Utils.objects.ServiceResult;

#Check if the request was processed successfully
foreach ($attribute in $requestObject.AttributeRequests){
	if($attribute.Name -eq "email"){
		$attribute.Value |  Out-File -filepath C:\Scripts\email.txt
		$result=C:\Scripts\charlietest.ps1 $attribute.Value
	}
}

"Result IS $result $args" | Out-File -filepath C:\Scripts\homedirresult.txt
[System.Collections.ArrayList]$messagesList = @()

if($result -ne 0) {
	$messagesList.Add("An error occured");
	$messagesList.Add($result);
	"ResultObject is $resultObject" | Out-File -Append -filepath C:\Scripts\result.txt
	$resultObject.Errors = $messagesList
	$resultObject.toxml() | Out-File -Append -filepath C:\Scripts\result.txt
}
  
$env:Result = $resultObject.toxml()
$PSCommandPath = $MyInvocation.MyCommand.Path
$PSCommandPath = $PSCommandPath.replace(".ps1",".tmp")
$resultObject.toxml()
$resultObject.toxml() | Out-File -FilePath $PSCommandPath -Append;
  </Source>
  </Rule>
  <Rule created="1604263667970" id="0a111e5875691e4f81758590e90226e1" language="beanshell" modified="1605187724723" name="CF-UserPrincipalName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

String userid = identity.getAttribute(ATR_USERID);


String userPrincipalName=userid+STR_CAREFIRST_MAIL;



return userPrincipalName;</Source>
  </Rule>
  <Rule created="1604263668036" id="0a111e5875691e4f81758590e94426e2" language="beanshell" modified="1614775994203" name="CF-UserType-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
String usertype="";
  if(identity.getAttribute(ATR_EMPLOYEETYPE)!=null){
			usertype= identity.getAttribute(ATR_EMPLOYEETYPE).toLowerCase();
  }
  
return usertype;</Source>
  </Rule>
  <Rule created="1604263668098" id="0a111e5875691e4f81758590e98226e3" language="beanshell" modified="1618230982567" name="CF-CommonWebServiceLibrary-Rule" type="ConnectorAfterCreate">
    <Source>
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
  import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import com.carefirst.www.ciam.services.uaas.UAASLocator;
import com.carefirst.www.ciam.services.uaas.UAASPort;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDOutput;

public String GenerateNextID() throws RemoteException, ServiceException {
	

		UAASLocator uaas = new UAASLocator();
		uaas.setUAASPortEndpointAddress("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
		UAASPort port = uaas.getUAASPort();
		GenerateNextUserIDInput input = new GenerateNextUserIDInput();
		input.setUaasAdminUserID("SAILPOINT");
		GenerateNextUserIDOutput output = port.generateNextUserID(input);
		System.out.println(output.getAvailableUserID());
  String nextUserId = output.getAvailableUserID();
		
return nextUserId;

}

  
  public String sendRequest(String requestXml, String endpoint, String soapAction) throws Exception {
                             String responseXML = null;
    													String output = "";
                             try {
                                           URL url = new URL(endpoint);
                                           HttpURLConnection rc = (HttpURLConnection) url.openConnection();
                                           rc.setRequestMethod("POST");
                                           rc.setDoOutput(true);
                                           rc.setDoInput(true);
                                           rc.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
                                           System.out.println("Endpoint:" + endpoint);
                                           System.out.println("soapAction:" + soapAction);
                                           int len = requestXml.length();
                                           rc.setRequestProperty("Content-Length", Integer.toString(len));
                                           rc.setRequestProperty("SOAPAction", "\"" + soapAction + "\"");
                                           rc.setRequestProperty("Connection", "Keep-Alive");

                                           rc.connect();
                                           OutputStreamWriter out = new OutputStreamWriter(rc.getOutputStream());
                                           out.write(requestXml, 0, len);
                                           out.flush();
                                           InputStreamReader read = null;
																						boolean flag = true; 
                                           try {
                                                          read = new InputStreamReader(rc.getInputStream());
                                           } catch (Exception exception) {
                                                          // if something wrong instead of the output, read the error
                                                          read = new InputStreamReader(rc.getErrorStream());
                                             							flag= false;
                                           }
                                           StringBuilder sb = new StringBuilder();
                                           int ch = read.read();
                                           while (ch != -1) {
                                                          sb.append((char) ch);
                                                          ch = read.read();
                                           }
                                           responseXML = sb.toString();
                                           System.out.println("SOAP Response : " + responseXML);
                               if(flag){
                                 output = responseXML.substring(560, 567);
                               }
                               else{
                                 output = "error";
                               }
                               
                             } catch (MalformedURLException e) {
                                           throw new Exception(e);
                             } catch (ProtocolException e) {
                                           throw new Exception(e);
                             } catch (IOException e) {
                                           throw new Exception(e);
                             }
                             //return responseXML.substring(560, 567);
    													 return output;
              }


 
  </Source>
  </Rule>
  <Rule created="1604263668161" id="0a111e5875691e4f81758590e9c126e4" language="beanshell" modified="1617222621963" name="Test Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e98226e3" name="CF-CommonWebServiceLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e84526de" name="LaunchPowerShellRule"/>
    </ReferencedRules>
    <Source>
  
   
  
  
  
   import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.*;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  
 // Identity identity = context.getObjectByName(Identity.class, "aaM6570");
  
   

    String message = "";


    Application appObj = context.getObjectByName(Application.class, "FEPOC AD DEV - Read Only");

    //return appObj.getAttributes().get("domainSettings").get(0).get("password");
    //  return appObj.getAttributes().get("domainSettings").get(0).get("servers").get(0);
    // return appObj.getAttributes().get("searchDNs").get(0).get("searchDN");
    //String LDAP_URL = "ldap://SV-ADBI-T1.bizappstest.local:389";
    //String LDAP_URL = "ldap://172.29.218.128:389";

    String LDAP_URL = "ldap://"+appObj.getAttributes().get("domainSettings").get(0).get("servers").get(0)+":"+appObj.getAttributes().get("domainSettings").get(0).get("port");
 // return LDAP_URL;
    String SECURITY_AUTH = "simple";
    String CTXT_FACTORY = "com.sun.jndi.ldap.LdapCtxFactory";

    try
    {
      Hashtable ldapEnv = new Hashtable(11);
      ldapEnv.put(Context.INITIAL_CONTEXT_FACTORY, CTXT_FACTORY);
      ldapEnv.put(Context.PROVIDER_URL, LDAP_URL);
      ldapEnv.put(Context.SECURITY_AUTHENTICATION, SECURITY_AUTH);
      //ldapEnv.put(Context.SECURITY_PRINCIPAL, "bizappstest\\ciam-service" );
      //ldapEnv.put(Context.SECURITY_CREDENTIALS, context.decrypt("1:ACP:Zjnc4TF7sXHf1+cdvzIENoXATMQ5hzFUuVmcA6nqbl0="));
      ldapEnv.put(Context.SECURITY_PRINCIPAL,appObj.getAttributes().get("domainSettings").get(0).get("user"));
      ldapEnv.put(Context.SECURITY_CREDENTIALS, context.decrypt(appObj.getAttributes().get("domainSettings").get(0).get("password")));
      //return ldapEnv;
      DirContext ldapContext = new InitialDirContext(ldapEnv);
      //return ldapContext;
      int count = 0;

      // Create the search controls         
      SearchControls searchCtls = new SearchControls();

      //Specify the attributes to return
      String [] returnedAtts={"samaccountname"};
      searchCtls.setReturningAttributes(returnedAtts);

      //Specify the search scope
      searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

      //specify the LDAP search filter
      String searchFilter = "(employeeID="+"123456"+")";
      //String searchFilter = "CN=Bobby Mathaudhu";
      // String searchFilter = empID;

      //Specify the Base for the search

      //initialize counter to total the results
      int totalResults = 0;
      //String searchBase = "DC=bizappstest,DC=local";
      //String searchBase = "CN=Users, DC=fepocdev,DC=com";
      String searchBase = appObj.getAttributes().get("searchDNs").get(0).get("searchDN");
      // Search for objects using the filter
      NamingEnumeration answer = ldapContext.search(searchBase, searchFilter, searchCtls);
	return answer;
      //Loop through the search results
      boolean flag;
      /*while (answer.hasMoreElements())
          {
            SearchResult sr = (SearchResult) answer.next();      
            Attributes attrs = sr.getAttributes();
            count++;
            if (attrs != null)
            {
                NamingEnumeration ne = attrs.getAll();
                while (ne.hasMore())
                {
                  Attribute attr = (Attribute) ne.next();


                }
                ne.close();
              }
            flag= true;
          }*/

      if(answer.hasMoreElements()){
        while (answer.hasMoreElements())
        {
          SearchResult sr = (SearchResult) answer.next();      
          javax.naming.directory.Attributes attrs = sr.getAttributes();
          count++;
          if (attrs != null)
          {
            NamingEnumeration ne = attrs.getAll();
            while (ne.hasMore())
            {
              javax.naming.directory.Attribute attr = (Attribute) ne.next();
              log.info("Attribute  :: " + attr);
              message= message+attr.toString();
              //message=message.substring(message.indexOf(":")+2);
            }
            ne.close();
          }

        }

        // message= "Success";
      }

      else
        message= "Not found";

      /*  Custom customObj= context.getObjectByName(Custom.class,"CF-FEPOC AD Proxy-Custom");

   if(customObj.get(empID+"_"+returnedAtts[0])!=null)
     message=customObj.get(empID+"_"+returnedAtts[0]);
    else
      message="Not found"; 
*/
    }catch(NamingException e){
      e.printStackTrace();
      return e.toString();
    } catch (Exception e){
      e.printStackTrace();
      return e.toString();
    }
    return message;
  
  
  String upn = getMailFromFEPOC("035480");
	return upn;
  
        Filter useridFilter = Filter.eq("userid","aaM6570");

        if(useridFilter != null){

          System.out.println("Filter is not null");

          QueryOptions options = new QueryOptions().addFilter(useridFilter);

          if (options != null){
            objects = context.getObjects(Identity.class, options);
            System.out.println("objects"+objects);
            if(objects.isEmpty()){
              objects=null;
            }
          }
        }
  return objects.get(0);

        if(objects!=null)
        {
          for(Identity identity:objects)
          {
            //Identity identity = context.getObjectByName(Identity.class,currentUser);

            
          }
        }
  return identity;
  
  List l= identity.getLinks();
  for(Link m :l){
   // return "fff";
    
    return m.getApplicationName();
  }
      
      
      
   return ".";   
  
  
  ProvisioningPlan plan = new ProvisioningPlan();

HashMap launchArgsMap = new HashMap(); 

//Add needed Workflow Launch Variables to map of name/value pairs



launchArgsMap.put("identityName","390186");





/*launchArgsMap.put("trace","true");

sailpoint.object.ProvisioningPlan spPlan = new sailpoint.object.ProvisioningPlan();

spPlan.fromMap(plan.toMap());

launchArgsMap.put("plan", spPlan);*/

//Create WorkflowLaunch and set values

WorkflowLaunch wflaunch = new WorkflowLaunch();

Workflow wf = (Workflow) context.getObjectByName(Workflow.class,"CF-Joiner-Workflow");

wflaunch.setWorkflowName(wf.getName());

wflaunch.setWorkflowRef(wf.getName());

//wflaunch.setCaseName("IdentityUpdate");

wflaunch.setVariables(launchArgsMap);

//Create Workflower and launch workflow from WorkflowLaunch

Workflower workflower = new Workflower(context);

WorkflowLaunch launch = workflower.launch(wflaunch);
  return "ok";
  
  /*Identity identity = context.getObjectByName(Identity.class, "390122");
  
  List l=identity.getLinks();
  return l.size();
  
  /*Identity identity = context.getObjectByName(Identity.class, "009412");
    ProvisioningPlan plan = null;
  
      plan = createEnablePlan(identity);
      Provisioner  prov = new Provisioner(context);
      prov.compile(plan);
      prov.execute();
      
  return "succes";*/
  o
EmailTemplate template = context.getObjectByName(EmailTemplate.class, "careFirst-MoverProvisioningSuccess-EmailTemplate");
  String email = "kousika.harini@carefirst.com";
      EmailOptions options = new EmailOptions();
      Identity manager=identity.getManager();
      if(manager == null){
        options.setTo(email);
      }else{
        if(null != manager.getEmail()){
          options.setTo(manager.getEmail());
        }else{
          options.setTo(email);
        }
      }
      
      Map args = new HashMap();
      

      options.setVariables(args);
      context.sendEmailNotification(template, options);
  
  
  
  return "ddddd";

     String aa="hhhhh.eeeee.uuuu@caref.com";
  
  String[] bb =aa.split("@");
  
 String name= bb[0];
   int count = 0;    
  
  
  
  
  
       for(int i = 0; i @lt name.length(); i++) {   
         
         char ch=name.charAt(i);//returns the char value at the 4th index
String a=String.valueOf(ch);
         
         System.out.println(a);
  if(a.equals(".")) { 
count =count+1;
}
        
            
         } 
  return count;
     
 //return name; 
  Identity identity = context.getObjectByName(Identity.class, "370571");
   
  ProvisioningPlan p = new ProvisioningPlan();
  p.setIdentity(identity);
  AccountRequest adAccountReq = new AccountRequest();
   adAccountReq.setApplication("IIQ");
      adAccountReq.setNativeIdentity(identity.getName());
  adAccountReq.setOperation(AccountRequest.Operation.Modify);
  //return existingRA;
  
     List bundles = identity.getAssignedRoles();
  //return bundles;

 // AttributeRequest attributeRequest = new AttributeRequest();

  //attributeRequest.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);
 

  //attributeRequest.setOperation(ProvisioningPlan.Operation.Remove);
  //for(Bundle bundle:bundles){
    AttributeRequest attributeRequest = new AttributeRequest();

        attributeRequest.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);

        attributeRequest.setOperation(ProvisioningPlan.Operation.Remove);

        attributeRequest.setValue("test");
      adAccountReq.add(attributeRequest);
  //}

   p.add(adAccountReq);
  
  
  
   List attributeRequest1=p.getAccountRequests("IIQ");
  
  for(AccountRequest aa:attributeRequest1){
    
    //getAttributeRequest(java.lang.String name) 
  return aa.getAttributeRequest("assignedRoles").getValue();
  }
  
  
  import sailpoint.object.Custom;
            import java.util.*;



            
            Map map = new HashMap();
 // Map app=new HashMap();
            Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
      //should be kept in custom object
  
  
  if (customObj.get("NASCO DB2 Table Access") !=null){
  map=customObj.get("NASCO DB2 Table Access");
  //for (String  key : map.keySet()) {
    
    //if(key.equals("NASCO DB2 Table Access")){
      String a =map.get("Approval2");
    
    return a;
   // }
    
//}
  }
    
  
  /*import sailpoint.object.*;
  import java.util.*;
  
   Identity identity = identity = getIdentityObj("370575");
   
     List linkList=identity.getLinks();

      for(Link l:linkList){  
        if(l.getApplicationName().equals("Active Directory")){
          
          
          return l.getAttribute("mail");
        }
        }

    return "v";*/
  
   return  singleAccountAggregation("Active Directory","	"CN=Vasavi\\, Ramya,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
  
    String comments="test update";
          updateTicket("RITM1109890",comments);
  
  
 /* import sailpoint.connector.DelimitedFileConnector;
  import java.text.*;
  import java.util.*;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  import sailpoint.api.TaskManager;
  
  TaskManager tm = new TaskManager(context);
  
  HashMap h= new HashMap();
  String s="name ==\"100315\"";
  h.put("filter",s);
  int i=0;
  
  while(i @lt 2){
  
TaskResult result = tm.runSync("CF-ProvisionAssignments-RefreshIdentityCube-TaskDefinition",h);
    i++;
  }

  return "dddddddddddddddddd";*/
  
  /*DateFormat originalFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
DateFormat targetFormat = new SimpleDateFormat("dd-MMM-yy");
Date date = originalFormat.parse("efectivedate value.....");
String formattedDate = targetFormat.format(date);
  return formattedDate;*/
 // return context.decrypt("1:ACP:83UUNja58ZDbE3RBO7bpQ/8xi+brxHrebcadVcfycME=");

  /*Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Buildmap Rule");



 
  String strEffectiveDate = "10/10/2020";


 
    SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
 // String  effectiveDate = formatter.parse(strEffectiveDate);
  return formatter.parse(strEffectiveDate);
 
  
 /* import java.util.*;  
        import sailpoint.object.Identity;
        import sailpoint.object.Application;
import sailpoint.object.TaskDefinition;
  import sailpoint.api.TaskManager;
import sailpoint.object.Attributes;
        import sailpoint.object.Rule;
        import sailpoint.object.RpcRequest;
        import sailpoint.object.RpcResponse;
        import sailpoint.connector.RPCService;

        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.ProvisioningProject;

        import org.apache.log4j.Logger;
  String hLocation="\\\\carefirst.com\\corp\\cdchome\\";
    
  //  return context.decrypt("1:ACP:UJP9NaTu6SxJIAy7SE4bROfWcu7bLmJ1XKSSxeL4WMc=");
  
		TaskManager taskManger = new TaskManager(context);
		TaskDefinition taskDef = context.getObjectByName(TaskDefinition.class, "Refresh Identity Cube");
		//attrs.
		//TaskDefinition taskDef = context.getObjectByName(TaskDefinition.class, "");
		Attributes  arguments = taskDef.getArguments();
// return arguments;
   Map map = arguments.getMap();
	  
	  String name ="100100";
	  String filterValue ="name== \""+name+"\"";
	  map.put("filter",filterValue);
	  arguments.setMap(map);
	  taskDef.setArguments(arguments);
		return taskDef.getArguments();
       String mgrUserId = "";
        String userid = "";
  String identityName = "100182";
        Identity identity= getIdentityObj(identityName);
        if(identity != null){
        userid=  identity.getAttribute("userid") != null ? identity.getAttribute("userid") : "";
        Identity manager=identity.getManager();
        if(manager == null){
        mgrUserId = "";
        }else{
        mgrUserId =  manager.getAttribute("userid") != null ? manager.getAttribute("userid") : "";

        }
        try{
      
        AccountRequest accountRequest = new AccountRequest();
        accountRequest.setApplication("Active Directory");
        accountRequest.setNativeIdentity(identityName);
        accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        accountRequest.add(new AttributeRequest("identityName",ProvisioningPlan.Operation.Set,userid));
        accountRequest.add(new AttributeRequest("manageruserid",ProvisioningPlan.Operation.Set,mgrUserId));
        System.out.println("HomeDriveReassign Step accountRequest is "+accountRequest);
          //return accountRequest;
        Map data = new HashMap();
        Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomeDirectoryReassign-Rule");
        Application appProdObj = context.getObjectByName(Application.class, "Active Directory");
        if(ruleObj != null &amp;&amp; appProdObj != null &amp;&amp; accountRequest != null){
        System.out.println("HomeDriveReassign Step Inside If App,Rule,AccReq not null is ");
        data.put("postScript",ruleObj);

        data.put("Application", appProdObj.getAttributes());
        data.put("Request", accountRequest);

        String IQServiceServer = "sv-spidsvc-t3.carefirsttest.com";
        // String IQServiceServer = "SV-SPIDSVC-D3.carefirsttest.com";
        int IQServicePort = 5050;
        RPCService service = new RPCService(IQServiceServer,IQServicePort);
        service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
        RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
        System.out.println("HomeDriveCreation Step Before Executing Powershell Rule data :::  "+data);
        // System.out.println("HomeDriveReassign Step Before Executing Powershell Rule request :::  "+request.toXml());
        RpcResponse response = service.execute(request);
        System.out.println("HomeDriveCreation Step After Executing Powershell Rule ");
        }else{
        System.out.println("Rule,Application is not found in IIQ in HomeDriveReassign Step ");
        }

        }
        catch(Exception e){
        }

        }
  
  return "success";
  
  /*  public boolean dnValidation(String dn) {
     if (dn != null) {
	QueryOptions qo = new QueryOptions();
	qo.addFilter(Filter.eq("nativeIdentity", dn));
	qo.addFilter(Filter.eq("application.name", "Active Directory"));
	
	if (context.countObjects(Link.class, qo) > 0) {
	System.out.println("..................................................");
  //  return "d";
    return false;
  }else{
    System.out.println("Inside Rule: CF-DN-Rule, inside method: dnValidation, inside if block, DN available.");
    return true;
  }
}
   } 
  
  
boolean kk= dnValidation("CN=Trivikrama1\\,Vamana1,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
  if(!kk){
    return "ll";
  }
  /* import java.util.*;
   import java.text.*;
  	 Date cDate = new Date();
		// Date effectiveDate = new SimpleDateFormat("dd-MMM-yy").parse(strEffectiveDate);
 
		 // System.out.println("effectiveDate-------"+effectiveDate);
	SimpleDateFormat sd = new SimpleDateFormat("dd-MMM-yy");
  String hh=sd.format(cDate);
   Date ooooo=sd.parse(hh);
    
  return ooooo;
  /*  import java.util.*;
   char x='A';
      x=(char)(x + 1);
  String oo=Character.toString(x)+" "+"kkk";
//  System.out.println("chareter"+x);
    return oo;
  // System.out.println(x);
 // String comments="test update";
          																//	updateTicket("RITM1109327",comments);

/*  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.*;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;


     

 
  Identity identity = context.getObjectByName(Identity.class, "1000374");
   
  ProvisioningPlan p = new ProvisioningPlan();
  p.setIdentity(identity);
  AccountRequest adAccountReq = new AccountRequest();
   adAccountReq.setApplication("IIQ");
      adAccountReq.setNativeIdentity(identity.getName());
  adAccountReq.setOperation(AccountRequest.Operation.Modify);
  //return existingRA;
  
     List bundles = identity.getAssignedRoles();
  //return bundles;

 // AttributeRequest attributeRequest = new AttributeRequest();

  //attributeRequest.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);
 

  //attributeRequest.setOperation(ProvisioningPlan.Operation.Remove);
  for(Bundle bundle:bundles){
    AttributeRequest attributeRequest = new AttributeRequest();

        attributeRequest.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);

        attributeRequest.setOperation(ProvisioningPlan.Operation.Remove);

        attributeRequest.setValue(bundle.getName());
      adAccountReq.add(attributeRequest);
  }

   p.add(adAccountReq);
  Provisioner  prov = new Provisioner(context);
  prov.compile(p);
  prov.execute();
  context.commitTransaction();
  context.saveObject(identity);


  return prov.getProject();*/

//One thi
  // ProvisioningPlan p= changeOU(identity,"OU=Termed Users,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
  /*ProvisioningPlan p = new ProvisioningPlan();
  p.setIdentity(identity);
  AccountRequest adAccountReq = new AccountRequest();




  List bundles = identity.getAssignedRoles();
  //return bundles;

  AttributeRequest attributeRequest = new AttributeRequest();

  //attributeRequest.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);
 

  attributeRequest.setOperation(ProvisioningPlan.Operation.Remove);
  for(Bundle bundle:bundles){
    if(bundle.getName() !=null){

 // attributeRequest.setValue(bundle.getName());
       p.add("IIQ", identity,"assignedRoles", ProvisioningPlan.Operation.Remove, bundle.getName().toString());
    }
   // return bundle.getName();
  
  //adAccountReq.add(attributeRequest);
  }
 // p.add(adAccountReq);
  Provisioner  prov = new Provisioner(context);
  prov.compile(p);
  prov.execute();
  context.saveObject(identity);

context.commitTransaction();
  return prov.getProject();
  /* Identity identity =context.getObjectByName(Identity.class,"1000373");
  List listofApplications= identity.getLinks();
        for(Link l:listofApplications){

        if(l.getApplicationName().equals("Active Directory")){
       String[] dn= l.getAttribute("distinguishedName").split(",OU");
        String aa= dn[0]+"termou";
          return aa;
        }
        }
  return aa;
  //String s = "CN=Daniel\,Larry,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com"; 
 // return s;
//split string delimited by comma 
 //String s1= s.replaceFirst("'\\,'", "iii");
//return s1;
//String[] stringarray = s.split(",");
  //return stringarray[0];

 // return stringarray[0].replaceFirst("\\\,", "iii");




  

  </Source>
  </Rule>
  <Rule created="1604263668207" id="0a111e5875691e4f81758590e9ef26e5" language="beanshell" modified="1604321290876" name="CF-BizADDN-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;


 


	
return "CN="+identity.getAttribute("userid")+","+"OU=Users,OU=Corporate,DC=bizappstest,DC=local";</Source>
  </Rule>
  <Rule created="1604263668276" id="0a111e5875691e4f81758590ea3426e6" language="beanshell" modified="1604263679738" name="CF-ImportITRoles-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";

    Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
    if (null == role) {
      System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
      role = new sailpoint.object.Bundle();
    }   
    if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
      role.setName(strCiamITRoleName);
      role.setDisplayName(strCiamITRoleName);
      role.setType("it");
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessROleID,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      // role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
      // unused attributes
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
    }


    if(Util.isNotNullOrEmpty(strITRoleDesc)) {
      Map descMap  = new HashMap();
      descMap.put("en_US", strITRoleDesc);
      role.setDescriptions(descMap);
    }

    String roleOwner = "";
    Identity ownerId = context.getObject(Identity.class, roleOwner);
    if (null == ownerId) {
      System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
      ownerId = context.getObject(Identity.class, "spadmin");
    }
    role.setOwner(ownerId);



    // Lookup the application for the role, if one is required.
    Application appObj = null;
    if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
      appObj = context.getObject(Application.class, appName);
      if (null == appObj) {
        System.out.println("ERROR: Could not find application: " + appName);
        System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
        Application ciamAppObj = context.getObject(Application.class, "CIAM_USER_ROLE_SYNC");
        ManagedAttribute ma=new ManagedAttribute();
        ma.setDisplayName(entsList);
        ma.setValue(entsList);
        ma.setApplication(ciamAppObj);
        ma.setAttribute("entitlement");
        ma.setType("Entitlement");
        ma.setRequestable(false);
        context.saveObject(ma);
        context.commitTransaction();
        appObj = ciamAppObj; 
        //  return;		 

      }
    }

    String entAttrName = "";
    // Make sure the application (if specified) has the specified entitlement.
    if (null != appObj) {
      Schema appSchema = appObj.getSchema("account");
      if (null != appSchema) {
        List entAttrNames = appSchema.getEntitlementAttributeNames();
        if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
          // Deterministic single entitlement name.
          entAttrName = entAttrNames.get(0);
          if (!entAttrName.equals(attrName)) {
            System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
            attrName = entAttrName;
          } 

        }
      }
    }

    // Convert the entitlements list into a java.util.List object.
    if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
      entsList = entsList.replace("\\/", "/");
    }
    // RFC4180LineParser entParser = new RFC4180LineParser("|");
    // List entitlements = entParser.parseLine(entsList);


    // Handle IT-role specifc build out options here.


    // Clear out the previous profiles on the role.
    if (null != role.getProfiles()) {
      // role.getProfiles().clear();
    }	  
    List entitlements = new ArrayList();
    Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
    if(newRole != null){
      entitlements = getEntValues(newRole);
    }
    entitlements.add(entsList);
    // Build the filterString for entitlements matching this IT role.
    String comma = "";
    String filterString = attrName + ".containsAllIgnoreCase({";
    for (String entValue : entitlements) {
      filterString += comma + "\"" + entValue + "\"";
      comma = ",";
    }
    filterString += "})";

    Filter filter = Filter.compile(filterString);   
    List filterList = new ArrayList();
    filterList.add(filter);
System.out.println("Inside create IT Role Method 111111111111111111");
 /*  if(role.getProfiles() != null){
      System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
      List profiles = role.getProfiles();

      for (Profile prof : profiles) {
        if(null != prof.getApplication()){
          System.out.println("Inside create IT Role Method 333333333333333333333333333");
        Application profileObj = prof.getApplication();
          
        if(profileObj.getName().equalsIgnoreCase(appObj.getName())){
        //  prof.setConstraints(filterList);
          System.out.println("Inside iff Application name is same");
          List constraints = prof.getConstraints();
			for (Filter filter : constraints) {
				if(filter instanceof Filter.LeafFilter){
          System.out.println("Inside create IT Role Method 444444444444444444");

				//	filter.getExpression();
					((Filter.LeafFilter) filter).setValue(entitlements);
          System.out.println("Inside create IT Role Method 555555555555555555555");
				prof.addConstraint(filter);
          role.add(prof);
          System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
			}
		}
          //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        //profile.setApplication(appObj);
         // profile.addConstraint(filter);
          //role.add(prof);
        }
        }

      }
    }  
   else
   { */
     System.out.println("Inside create IT Role Method 7777777777777777777");
      Profile profile = new Profile();
      profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
      profile.setApplication(appObj);
      //profile.addConstraint(filter);
      profile.setConstraints(filterList);
      role.add(profile);
     System.out.println("Inside create IT Role Method 88888888888888888888");

   // }

    System.out.println("role: " + role.toXml());
    context.saveObject(role);
    context.commitTransaction();

    return;
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CiamBulkITRole.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263668338" id="0a111e5875691e4f81758590ea7226e7" language="beanshell" modified="1604263679799" name="CF-ImportBusinessRoles-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  //Getting the attribute values from assignement rule
  public List getAttrValues(Bundle bundle, String attributeName){
List valuesList = new ArrayList();
    if(null != bundle){
      if( null != bundle.getSelector()){
        IdentitySelector selector = bundle.getSelector();
        MatchExpression matchExpression = selector.getMatchExpression();

        List terms = matchExpression.getTerms();
        
        for (MatchTerm matchTerm : terms) {

          if(matchTerm.isContainer()){

            List children = matchTerm.getChildren();
            for (MatchTerm matchTerm2 : children) {
              String atrName = matchTerm2.getName();
              if(atrName.equalsIgnoreCase(attributeName)){
                valuesList.add(matchTerm2.getValue());
              }  
            }

          }

        }
      }
      return valuesList; 
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);

    String strAssignmentRule  = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
    String strCatagory  = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamRoleID  = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

    String strCiamBusinessITRoleName  = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strRoleName  = (String) roleHash.get("Business Role Name") != null ?   (String) roleHash.get("Business Role Name"): "";
    String strRoleOwner  = (String) roleHash.get("Business Role Owner") != null ?  (String) roleHash.get("Business Role Owner"): "";
    String strRoleDesc  = (String) roleHash.get("Role Description") != null ?   (String) roleHash.get("Role Description") : "";
    String subRoles  = (String) roleHash.get("Sub Roles/IT Roles") != null ?  (String) roleHash.get("Sub Roles/IT Roles"): "";
    String strBussinessUnit  = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
    String strDeptCode  = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
    String strJobCode  = (String) roleHash.get("JOB_CD  (Job Code)") != null ? (String) roleHash.get("JOB_CD  (Job Code)") : "";
    String strEeoCode  = (String) roleHash.get("EEO_CD (EEO Code)") != null ?   (String) roleHash.get("EEO_CD (EEO Code)") : "";
    String strCompanyCode  = (String) roleHash.get("CO_CD (Company Code)") != null ?   (String) roleHash.get("CO_CD (Company Code)") : "";
    String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ?   (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
    String strCostCenter  = (String) roleHash.get("COST_CENTER (Cost Center)") != null ?  (String) roleHash.get("COST_CENTER (Cost Center)") : "";
    String strMgrPositionNumber  = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ?  (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
    String strPositionNumber  = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
    String strLocationCode  = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ?  (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
    String strSupplierName  = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ?  (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";


    //String classificationName  = (String) roleHash.get("Classification");
    // String isRequestable  = (String) roleHash.get("Requestable Role");

    // boolean isRequestable  = (Boolean) roleHash.get("Requestable Role");
    //String assignRule  = (String) roleHash.get("AssignmentRule");
    //String costCentre  = (String) roleHash.get("costcenter");
    //String jobCode  = (String) roleHash.get("jobcode");


    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);


    Bundle role = context.getObject(Bundle.class, strRoleName);
    if (null == role) {
      System.out.println(" - role does not exist, creating new: " + roleName);
      role = new sailpoint.object.Bundle();
    }   
    if(Util.isNotNullOrEmpty(strRoleName)) {
      role.setName(strRoleName);
      role.setDisplayName(strRoleName);
      role.setType("business");
      role.setAttribute("category", strCatagory);
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      role.setAttribute("ciamRoleID", strCiamRoleID);
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
    }
    if(Util.isNotNullOrEmpty(strRoleDesc)) {
      Map descMap  = new HashMap();
      descMap.put("en_US", strRoleDesc);
      role.setDescriptions(descMap);
    }



    Identity ownerId = context.getObject(Identity.class, strRoleOwner);
    if (null == ownerId) {
      System.out.println(" - WARNING: Could not find owner [" +  strRoleOwner + "] using 'spadmin' instead.");
      ownerId = context.getObject(Identity.class, "spadmin");
    }
    role.setOwner(ownerId);

    System.out.println("role: " + role.toXml());
    if(Util.isNotNullOrEmpty(strAssignmentRule)&amp;&amp;strAssignmentRule.equalsIgnoreCase("Mandatory") ){
      // Creating the Assignement Rule with below attributes 
      IdentitySelector idSelector = new IdentitySelector();
      MatchExpression matExp = new MatchExpression();
      MatchTerm matchTerm = null;
      matExp.setAnd(true);
      if(Util.isNotNullOrEmpty(strJobCode)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("jobcode");
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strJobCode);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strBussinessUnit)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("businessunit");
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strBussinessUnit);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strDeptCode)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("deptid");
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strDeptCode);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strEeoCode)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("eeojobgroup");
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strEeoCode);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strCompanyCode)) {

        matchTerm = new MatchTerm();
        List companyList = new ArrayList();
        matchTerm.setContainer(true);
        Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
        if(newRole != null){
          companyList = getAttrValues(role,"company");
        }
        companyList.add(strCompanyCode);
        for(String strCompany : companyList){	                                   

          MatchTerm matchTerm1 = new MatchTerm();
          matchTerm1.setName("company");
          matchTerm1.setType(Type.IdentityAttribute);
          matchTerm1.setValue(strCompany);
          matchTerm.addChild(matchTerm1);

        }


        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strMgrCostCenter)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("mgrCostcenter");  // which attribute we have to take  here 
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strMgrCostCenter);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strCostCenter)) {
        matchTerm = new MatchTerm();
        List costCenterList = new ArrayList();
        matchTerm.setContainer(true);
        costCenterList = getAttrValues(role,"costcenter");
        costCenterList.add(strCostCenter);
        for(String strCost : costCenterList){	                                   

          MatchTerm matchTerm1 = new MatchTerm();
          matchTerm1.setName("costcenter");
          matchTerm1.setType(Type.IdentityAttribute);
          matchTerm1.setValue(strCost);
          matchTerm.addChild(matchTerm1);

        }


        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strMgrPositionNumber)) {
    
          matchTerm = new MatchTerm();
        List mgrposList = new ArrayList();
        matchTerm.setContainer(true);
        Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
        if(newRole != null){
          mgrposList = getAttrValues(role,"managerposnum");
        }
        mgrposList.add(strMgrPositionNumber);
        for(String strMgrpos : mgrposList){	                                   

          MatchTerm matchTerm1 = new MatchTerm();
          matchTerm1.setName("managerposnum");
          matchTerm1.setType(Type.IdentityAttribute);
          matchTerm1.setValue(strMgrpos);
          matchTerm.addChild(matchTerm1);

        }


        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strPositionNumber)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("positionNumber"); // need to create the iddentity attribute
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strPositionNumber);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strLocationCode)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("location");
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strLocationCode);
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(strSupplierName)) {
        matchTerm = new MatchTerm();
        matchTerm.setName("supplierName"); // need to create the identity attribute for suppliier name 
        matchTerm.setType(Type.IdentityAttribute);
        matchTerm.setValue(strSupplierName);
        matExp.addTerm(matchTerm);
      }


      idSelector.setMatchExpression(matExp);
      role.setSelector(idSelector); 
    }
    // Convert the sub-roles list into a java.util.List object.
    RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
    List subRolesList = subRolePaser.parseLine(subRoles);

    System.out.println("subRolesList: " + subRolesList);
    // Add the required IT roles for this business role.
    if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
      for (String subRoleName : subRolesList) {

        Bundle requiredRole = context.getObjectByName(Bundle.class, subRoleName);
        if (null == requiredRole) {
          System.out.println(" - ERROR: Required role not found: " + subRoleName);
        } else {
          role.addRequirement(requiredRole);
        }         	  

      }	 
    }
    context.saveObject(role);
    context.commitTransaction();

    return;
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CareFirst_Role_Ciam.csv";

  //return csvFileName;

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");
  //return csvFileName;
  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      //return lineHash;
      buildRole(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263668399" id="0a111e5875691e4f81758590eaaf26e8" language="beanshell" modified="1604263679861" name="CF-SP-CIAM-WebService-AfterProvisioning-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Source>import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
import sailpoint.object.ProvisioningResult;
import org.apache.log4j.Logger;
  import sailpoint.api.Provisioner;
  import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
    
Logger logger= Logger.getLogger("com.carefirst.loggers");
public static String sendRequest(String requestXml, String endpoint, String soapAction) throws Exception {
		String responseXML = null;
		try {
			URL url = new URL(endpoint);
			HttpURLConnection rc = (HttpURLConnection) url.openConnection();
			rc.setRequestMethod("POST");
			rc.setDoOutput(true);
			rc.setDoInput(true);
			rc.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
			System.out.println("Endpoint:" + endpoint);
			System.out.println("soapAction:" + soapAction);
			int len = requestXml.length();
			rc.setRequestProperty("Content-Length", Integer.toString(len));
			rc.setRequestProperty("SOAPAction", "\"" + soapAction + "\"");
			rc.setRequestProperty("Connection", "Keep-Alive");

			rc.connect();
			OutputStreamWriter out = new OutputStreamWriter(rc.getOutputStream());
			out.write(requestXml, 0, len);
			out.flush();
			InputStreamReader read = null;

			try {
				read = new InputStreamReader(rc.getInputStream());
			} catch (Exception exception) {
				// if something wrong instead of the output, read the error
				read = new InputStreamReader(rc.getErrorStream());
			}
			StringBuilder sb = new StringBuilder();
			int ch = read.read();
			while (ch != -1) {
				sb.append((char) ch);
				ch = read.read();
			}
			responseXML = sb.toString();
			System.out.println("SOAP Response : " + responseXML);
		} catch (MalformedURLException e) {
			throw new Exception(e);
		} catch (ProtocolException e) {
			throw new Exception(e);
		} catch (IOException e) {
			throw new Exception(e);
		}
		return responseXML;
	}
 String genNextUserIDInputXml = "&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:uaas=\"http://www.carefirst.com/ciam/services/uaas\" xmlns:uaas1=\"http://associate.insidecarefirst.com/ciamservices/service/uaas_types\">"
			+"   &lt;soapenv:Header/>       "
			+"   &lt;soapenv:Body> "
			+"      &lt;uaas:generateNextUserIDInput>  "
			+"         &lt;uaas1:uaasAdminUserID>aac5790&lt;/uaas1:uaasAdminUserID> "
			+"      &lt;/uaas:generateNextUserIDInput> "
			+"   &lt;/soapenv:Body> "
			+"&lt;/soapenv:Envelope>" ;
  
  String createAssociateInputXML = "&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:uaas=\"http://www.carefirst.com/ciam/services/uaas\" xmlns:uaas1=\"http://associate.insidecarefirst.com/ciamservices/service/uaas_types\">"
				+ "   &lt;soapenv:Header/>       " + "   &lt;soapenv:Body> " + "  &lt;uaas:createAssociateInput>"
				+ " &lt;uaas1:uaasUserName>aac5790&lt;/uaas1:uaasUserName>" + " &lt;uaas1:tsrNumber>SAILREQ&lt;/uaas1:tsrNumber>"
				+ " &lt;uaas1:submitterUserName>aac5790&lt;/uaas1:submitterUserName>"
				+ " &lt;uaas1:skipSearch>false&lt;/uaas1:skipSearch>" + " &lt;uaas1:associate>" + " &lt;fullName>"
				+ " &lt;firstName>SPTestFNameJG&lt;/firstName>"

				+ " &lt;middleInitial>M&lt;/middleInitial>" + " &lt;lastName>JTestingTwoJ&lt;/lastName>" + " &lt;/fullName>"
				+ " &lt;personType>Associate&lt;/personType>" + " &lt;personStatus>active&lt;/personStatus>"
				+ " &lt;emailAddress>SPTestFNamemailGJ2.assocaa@carefirsttest.com&lt;/emailAddress>"

				+ " &lt;gender>M&lt;/gender>" + "  &lt;socialSecurityNumber>123456&lt;/socialSecurityNumber>"

				+ " &lt;userName>aaa5075&lt;/userName>"

				+ " &lt;emplId>895690&lt;/emplId>"

				+ "&lt;businessUnit>"

				+ "&lt;companyCode>BCS&lt;/companyCode>"

				+ "&lt;businessUnitCode>COMKT&lt;/businessUnitCode> "

				+ "&lt;departmentCode>14111&lt;/departmentCode>"

				+ "&lt;departmentName>Care Management Admin&lt;/departmentName>"

				+ "&lt;locationCode>OWML1&lt;/locationCode>"

				+ "&lt;jobTitle>Manager&lt;/jobTitle>"

				+ "&lt;eeoCode>110&lt;/eeoCode>" + "&lt;/businessUnit>"

				+ "&lt;locationCode>OWML1&lt;/locationCode>"

				+ " &lt;managerId>66000&lt;/managerId>" + "&lt;managerName>Maharjan&lt;/managerName>"

				+ "&lt;costCenter>002K3&lt;/costCenter>"

				+ "&lt;startDate>2019-12-09&lt;/startDate>"

				+ "&lt;endDate>3000-01-01&lt;/endDate>" + " &lt;/uaas1:associate>" + "&lt;/uaas:createAssociateInput>"
				+ "&lt;/soapenv:Body>" + "&lt;/soapenv:Envelope>";
		
	
		 String  endpoint = "http://associatett.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort";

		String soapAction = "";
		String  responsIs =  sendRequest(genNextUserIDInputXml,endpoint,soapAction);
			
return responsIs;
	
	
</Source>
  </Rule>
  <Rule created="1604263668519" id="0a111e5875691e4f81758590eb2726e9" language="beanshell" modified="1604263680018" name="CF-AutoRoleOwnerChane-Rule">
    <Source>
  
  import sailpoint.api.IncrementalObjectIterator;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Bundle;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;

  try{
    int count = 0;
    QueryOptions options = new QueryOptions();
    options.setCloneResults(true);
    options.addFilter(Filter.eq("type", "business"));
    options.addFilter(Filter.notnull("owner.name"));
    IncrementalObjectIterator bundles = new IncrementalObjectIterator(context, Bundle.class, options);
    while(null != bundles &amp;&amp; bundles.hasNext()){
      Bundle bundle = (Bundle) bundles.next();
      //  return bundle;
      String ownerName = bundle.getOwner().getName();
      Identity identity = context.getUniqueObject(Identity.class, Filter.eq("name", ownerName));
      if(null != identity @and identity.isDisabled() || identity.isInactive()){
        count ++;
        if( null != identity.getManager()){
          bundle.setOwner(identity.getManager());
          context.saveObject(bundle);


          EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CF-AutoRoleOwnerChange-Emailtemplate");


          if(template != null ){

            String email = "Admin@carefirst.com";
            EmailOptions options = new EmailOptions();
            Identity manager=identity.getManager();
            if(manager == null){
              options.setTo(email);
            }else{
              if(null != manager.getEmail()){
                options.setTo(manager.getEmail());
              }else{
                options.setTo(email);
              }
            }
            log.info("Inside AutoROleOwner change Rule sendEmailNotification() "); 

            Map args = new HashMap();
            args.put("roleName", bundle.getName());
            args.put("oldManager",bundle.getOwner().getAttribute("userid"));

            options.setVariables(args);
            context.sendEmailNotification(template, options);
          }else{
            throw new GeneralException("TemplateName is not found in SIQ "+templateName);
          }

        }

        if(0 == (count % 10)){

          context.commitTransaction();
          context.decache();
        }
      }
      context.commitTransaction();
      context.decache();
    }
  }
  catch(Exception e){
  }
  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263668605" id="0a111e5875691e4f81758590eb7d26ea" language="beanshell" modified="1604263680136" name="CF-HomedriveAndHomedirectoryProvision-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  #Add-type -path E:\sailpoint\IQService\utils.dll
    Add-type -path E:\IQService\utils.dll
      
        try{
    
    ECHO "**** Testing Homedrive and Homedirectory creation****" |Add-Content -path E:\Test\TestNewFile.txt -FORCE
      
#Import-Module ActiveDirectory
$path = "E:\Test\"

     # $path = "\\carefirst.com\corp\cdchome\"

     foreach ($attribute in $requestObject.AttributeRequests){
     if($attribute.Name -eq "sAMAccountName"){
        [string]$newFolderName = $attribute.Value
      }
   }

    $newFolderFull = $path + 'SPF9469'
      
      ECHO "@@@@@@@@@@ Homedir path: ****" +$newFolderFull |Add-Content -path E:\Test\TestNewFile.txt -FORCE
  
Write-Output "Add Folder.."
New-Item $newFolderFull -ItemType Directory
#Write-Output "Remove Inheritance.."
#icacls $newFolderFull /inheritance:d

    
  
  $acl = Get-Acl E:\Test\SPF9469
          $AccessRuleSetPerm = New-Object System.Security.AccessControl.FileSystemAccessRule('BCBSMD\AD - Security Admins','FullControl','Allow')
         $acl.SetAccessRule($AccessRuleSetPerm)
              $acl | Set-Acl
    
    
    $acl2 = Get-Acl E:\Test\SPF9469
    $AccessRuleRemPerm = New-Object System.Security.AccessControl.FileSystemAccessRule('$tim_user@carefirsttest.com','FullControl','Allow')
         $acl2.RemoveAccessRule($AccessRuleRemPerm)  
           $acl2 | Set-Acl
      
      
      $acl3 = Get-Acl E:\Test\SPF9469
   				 $acl3.SetOwner('AAC6374');
    $acl3 | Set-Acl
    
	   
 }
   

  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Error.txt -FORCE
  }

  return "Success";
	   
  </Source>
  </Rule>
  <Rule created="1604263668694" id="0a111e5875691e4f81758590ebd626eb" language="beanshell" modified="1604318774996" name="CF-ExchangePowerShell-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
//return context.decrypt("1:ACP:Jij32w72mtAMXxRx5Bk5Ll+e/5rki+PMvVWfzPAl7zI=");
//Add-type -path  E:\IQService\utils.dll

  
   try{

      ECHO "Starting exchange script***" |Add-Content -path E:\Test\Exchange.txt -FORCE
    Set-ExecutionPolicy -ExecutionPolicy remotesigned -Force -Scope CurrentUser
ECHO "sysout 0***" |Add-Content -path E:\Test\Exchange.txt -FORCE
$s=New-PSSession -ConfigurationName microsoft.exchange -ConnectionUri "http://sv-exmail16-t1.carefirsttest.com/powershell"
Import-PSSession $s -WarningAction silentlycontinue -ErrorAction silentlycontinue -AllowClobber -DisableNameChecking -commandname enable-remotemailbox
        
ECHO "sysout 1***" |Add-Content -path E:\Test\Exchange.txt -FORCE
  
$secpasswd = ConvertTo-SecureString "Here2dayGone2morrow" -AsPlainText -Force
$mycreds = New-Object System.Management.Automation.PSCredential -ArgumentList "tim_o365@carefirsttest.com", $secpasswd
  
ECHO "sysout 2***" |Add-Content -path E:\Test\Exchange.txt -FORCE
  
$os=New-PSSession -ConfigurationName microsoft.exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -AllowRedirection -Credential $mycreds -Authentication Basic
Import-PSSession $os -WarningAction silentlycontinue -ErrorAction silentlycontinue -DisableNameChecking -AllowClobber -commandname get-mailbox,set-mailbox,set-casmailbox

  ECHO "sysout 3***" |Add-Content -path E:\Test\Exchange.txt -FORCE
    
function Pause ($Message)
{
Write-Host -NoNewLine $Message
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
Write-Host ""
}

#$ADID = 'ciamad2'



    $ADID = 'aaa5232'
  ECHO "User adid ***"+$ADID |Add-Content -path E:\Test\Exchange.txt -FORCE
    $DC = 'SV-ADCFTEST-t2.carefirsttest.com'
  ECHO "User DC ***"+$DC |Add-Content -path E:\Test\Exchange.txt -FORCE
    $UPN = $ADID +"@carefirsttest.com"
    ECHO "User UPN ***"+$UPN |Add-Content -path E:\Test\Exchange.txt -FORCE
    Write-Host $ADID
    $user = Get-mailbox -Identity $UPN -erroraction silentlycontinue
  	ECHO "User ***"+$user |Add-Content -path E:\Test\Exchange.txt -FORCE
    if ($user)
      {
       Write-Host $ADID
       Set-CASMailbox -Identity $UPN -ImapEnabled $false -PopEnabled $false -SmtpClientAuthenticationDisabled $true
       set-mailbox -identity $upn -litigationholdenabled $true -AuditEnabled $true -AuditLogAgeLimit 180 -AuditAdmin Update, MoveToDeletedItems, SoftDelete, HardDelete, SendAs, SendOnBehalf, Create, UpdateFolderPermission -AuditDelegate Update, SoftDelete, HardDelete, SendAs, Create, UpdateFolderPermissions, MoveToDeletedItems, SendOnBehalf -AuditOwner UpdateFolderPermission, MailboxLogin, Create, SoftDelete, HardDelete, Update, MoveToDeletedItems
       enable-remotemailbox -identity $ADID -Archive
          ECHO "enabled remote mailbox***" |Add-Content -path E:\Test\Exchange.txt -FORCE
      }
 }
   

  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Error.txt -FORCE
  }

  return "Succes";
  </Source>
  </Rule>
  <Rule created="1604263668758" id="0a111e5875691e4f81758590ec1626ec" language="beanshell" modified="1617958398184" name="CF-ADUserPrincipalName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;
String userPrincipalName = "";
String userid = identity.getAttribute("userid");
if(null != userid)
	userPrincipalName=userid.toUpperCase()+STR_CAREFIRST_MAIL;
return userPrincipalName;
  </Source>
  </Rule>
  <Rule created="1604263668827" id="0a111e5875691e4f81758590ec5b26ed" language="beanshell" modified="1604263680443" name="cf-servicenow-firstname" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

 String firstname =  identity.getFirstname();
System.out.println("Servicenow:::"+firstname);

return firstname;
</Source>
  </Rule>
  <Rule created="1604263668887" id="0a111e5875691e4f81758590ec9726ee" language="beanshell" modified="1604263680505" name="UpdatePolicy-test">
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;


  /*Identity identity = new Identity();
  identity.setName("zzz111");
  identity.setFirstname("1111");
  identity.setLastname("zzz");
  identity.setEmail("zzz111@carefirst.com");
  context.saveObject(identity);
 context.commitTransaction();
 // return identity; */

  Identity identityObject =context.getObjectByName(Identity.class,"100011");
  
  
   //return identityObject.toXml();


    ProvisioningPlan plan = new ProvisioningPlan();
    //log.info("Employee... Create plan."+plan);                                       

    List accreqs = new ArrayList(); 
    AccountRequest acctReq1 = new AccountRequest(); 

    acctReq1.setOperation(AccountRequest.Operation.Modify); 

    acctReq1.setApplication("OneStopSand-ServiceNow");
   // acctReq1.add(new AttributeRequest("EMPLID",identityName)); 
     acctReq1.setNativeIdentity("8d487084f4639890912c538e3e7c0a1f");
 // acctReqIIQ.setNativeIdentity(identityObject.getName());
      //Check User Type
   

    acctReq1.add(new AttributeRequest("first_name",ProvisioningPlan.Operation.Set,"Rheniuss8"));

    accreqs.add(acctReq1); 



    plan.setAccountRequests(accreqs); 

    plan.setIdentity(identityObject); 
    Provisioner provisioner= new Provisioner(context);
    provisioner.setNoLocking(true);
    provisioner.setOptimisticProvisioning(true);
    ProvisioningProject project =  provisioner.compile(plan);

    provisioner.execute(plan);
  return project.toXml();

  </Source>
  </Rule>
  <Rule created="1604263668947" id="0a111e5875691e4f81758590ecd326ef" language="beanshell" modified="1609926970627" name="CF-Test-Snowticket">
    <Source>
  import sailpoint.object.IdentityRequest;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Custom;
  import sailpoint.object.QueryOptions;
    import java.util.ArrayList;
  import sailpoint.api.IdIterator;
  import org.json.JSONObject;
  import java.net.MalformedURLException;
   import java.io.IOException;
  import java.net.URL;
  import java.net.URI;

  import org.apache.http.auth.UsernamePasswordCredentials;
  import org.apache.http.client.CredentialsProvider;
  import org.apache.http.impl.client.BasicCredentialsProvider;
  import org.apache.http.client.HttpClient;
  import org.apache.http.client.config.RequestConfig;
  import org.apache.http.auth.AuthScope;
  import org.apache.http.impl.client.HttpClientBuilder;
  import org.apache.http.client.methods.HttpPost;
  import org.apache.http.HttpResponse;
  import org.apache.http.entity.StringEntity;
  import org.apache.http.entity.ContentType;
  import org.apache.http.StatusLine;
  import sailpoint.api.IdIterator;

   import org.apache.log4j.Logger;
  Logger log = Logger.getLogger("com.carefirst.SNOWTicketTest");
   String CSV = "ln,fn";
  String[] values = CSV.split(",");
  String test="";
  test=values[1]+" "+values[0];
  
  return test;
  
  /*QueryOptions qo = new QueryOptions();
  qo.add(Filter.like("IdentityRequest.source", "Service-Now")); // All Identity Requests created from 'ServiceNow Service Portal Integration' will have source set to 'Service-Now'
  qo.add(Filter.like("IdentityRequest.executionStatus", "Completed"));
	log.error("filter = " + qo.getFilters());
  Iterator idReqs = context.search(IdentityRequest.class, qo, "id");
ArrayList list = new ArrayList();
  IdIterator itrIdReqs = new IdIterator(context, idReqs);
  String testStatus="";

  if(itrIdReqs != null){

    while(itrIdReqs.hasNext()){

      String idReqId = (String) itrIdReqs.next();      

      IdentityRequest idReq = context.getObjectById(IdentityRequest.class, idReqId);
      
      if(idReq.getAttribute("requestProcessed")!=null) { // All Identity Requests created from 'ServiceNow Service Portal Integration' will have requestProcessed attribute set to 'init' during creation

        if(!idReq.getAttribute("requestProcessed").toString().equals("Success")) {
          
						list.add(idReqId);
  
        }
      }
      
    }
  }
   try {  

              Custom conf=context.getObject(Custom.class, "SP_SPNT_SNOW_INT_ServiceNowCredentialConfig");
              String endpoint=conf.getString("url");
     //testStatus=conf.getString("url");
							log.error("url = " + endpoint);
              JSONObject body = new JSONObject();

              body.put("state", "4");
     					body.put("assignment_group", "d625dccec0a8016700a222a0f7900d06");
     					//body.put("description", "Updated 1111111");
     
              body.put("additional_comments", "This is the updated ticket");
      			body.put("error", "testing closed trying to update additional comments");
      				     			

              /*if(idReq.getErrors() != null &amp;&amp; idReq.getErrors().size() > 0) {

                List messages = idReq.getErrors();

                String errorMessage = "";

                for(Message msg : messages) {

                  errorMessage = errorMessage + msg.getMessage();

                }

                body.put("error", errorMessage);

              } else if(approvalRejected) {

                body.put("error", approvalRejectedMsg + "\n" + approvalRejectedComments);

              }else
              {
                body.put("error", "");
              }*/
								//testStatus=conf.getString("username");	
              //UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(conf.getString("username"), context.decrypt(conf.getString("password")));
     					/*UsernamePasswordCredentials credentials = new UsernamePasswordCredentials("sa-SailpointServiceNow", "Snow@123");
              CredentialsProvider credsProvider = new BasicCredentialsProvider();
              credsProvider.setCredentials(new AuthScope (AuthScope.ANY), credentials);

              RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(120000).setConnectionRequestTimeout(120000).setSocketTimeout(120000).build();
              HttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setDefaultCredentialsProvider(credsProvider).build();

              HttpPost httpPost = null;
              HttpResponse response;
              StatusLine restStatus;

              try 
              {
                String ticket="RITM1109037";
                URI updateRITMStatus = URI.create(endpoint+"updateState/"+ticket);

                httpPost = new HttpPost(updateRITMStatus);

                httpPost.setHeader("Content-Type", "application/json");
                httpPost.setHeader("Accept", "application/json");

                if (null != log)
                  log.debug((Object)("JSON for RITM Update:" + body));

                httpPost.setEntity(new StringEntity(body.toString(), ContentType.APPLICATION_JSON));

                response = httpClient.execute(httpPost);

                restStatus = response.getStatusLine();
                testStatus = restStatus.getStatusCode()+"";

               if (restStatus.getStatusCode() != 200) {
                  //idReq.getAttributes().put("requestProcessed", "Failed");
                  //context.saveObject(idReq);
                  if(null != log)
                    log.debug("Failed to Update RITM Status. HTTP error code : " + restStatus.getStatusCode());  

                }else{
                //idReq.getAttributes().put("requestProcessed", "Success");
                //context.saveObject(idReq);
                if(null != log)
                    log.debug("Success to Update RITM Status. HTTP error code : " + restStatus.getStatusCode());
                }  
                
              } finally
              {			
                if(null != httpPost) { httpPost.releaseConnection(); }		
              }
     

            } catch (MalformedURLException e) {  
              e.printStackTrace();
     
            } catch (IOException e) {  
              e.printStackTrace();    
            }
  return testStatus;*/

  </Source>
  </Rule>
  <Rule created="1604263669008" id="0a111e5875691e4f81758590ed1026f0" language="beanshell" modified="1608804687569" name="CF-ADSkypeSipAddress-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;
 /* if(identity.getAttribute("company").equalsIgnoreCase("SBP")){
    return;
  }
  else{
return "sip:"+identity.getAttribute(ATR_USERID)+STR_CAREFIRST_MAIL;
  }*/
  
  return "sip:"+identity.getAttribute(ATR_USERID)+STR_CAREFIRST_MAIL;
  </Source>
  </Rule>
  <Rule created="1604263669092" id="0a111e5875691e4f81758590ed6426f1" language="beanshell" modified="1604263680709" name="CF-AD-SkypeProxyAddresses-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
String userProxyAddresses = identity.getAttribute(ATR_EMAIL);
System.out.println("**** Skype testing - userProxyAddresses: "+userProxyAddresses);
return userProxyAddresses;</Source>
  </Rule>
  <Rule created="1604263669164" id="0a111e5875691e4f81758590edac26f2" language="beanshell" modified="1604263680787" name="CF-CreationRulewithCustomObj-Rule" type="IdentityCreation">
    <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="void">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation task.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application being aggregated.
        </Description>
        </Argument>
        <Argument name="account" type="ResourceObject">
          <Description>
          The resource account for the identity being created.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The identity that is being created.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import java.util.Map;
  import java.util.HashMap;
  import java.util.List;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
 import sailpoint.object.Attributes;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Custom;
  import java.util.Date;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;
  import org.apache.log4j.Logger;
  import sailpoint.api.PasswordGenerator;
  import sailpoint.object.PasswordPolicy;


  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Creation Rule");


  String updatedUserName="";
  List objects =null;
  int count=2;
  int numberSufix=0;
  String suffixToBeReplacedinCustomFile="";


  

  String actualEffectiveDate=account.getStringAttribute(ATR_EFFECTIVE_DATE).toString();
  SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
  Date effectiveDate = formatter.parse(actualEffectiveDate);
  System.out.println("actualEffectiveDate is == "+actualEffectiveDate);
  Date todayDate = new Date();
  mylogger.info(".......todayDate......" +todayDate);
  mylogger.info("effectiveDate......."+effectiveDate);
  //Password Generation Code
  String passwordnew = null;
  PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class, STR_AD_PASSWORD_POLICY);
  if(policy!=null)
  {
    passwordnew = new PasswordGenerator(context).generatePassword(policy);
    if(null != passwordnew){
    passwordnew = passwordnew.replaceAll("[^a-zA-Z0-9]", "c");
    }
  }
  identity.setPassword(passwordnew);


//Updates Start Date and updates enddate to 1st jan 30

  // if((effectiveDate.compareTo(todayDate) @gt 0) @or (effectiveDate.compareTo(todayDate)== 0)){
  if(actualEffectiveDate!=null){
    if(account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_HIR) @or account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_ADD)){
      identity.setAttribute(ATR_STARTDATE, actualEffectiveDate);
      identity.setAttribute(ATR_ENDDATE, STR_END_DATE_VALUE);
      mylogger.info("start Date set to identity");
    }
  }
  //}


  //Update Username  For CareFirst users
  mylogger.info("EmplyeeType..."+account.getStringAttribute(ATR_OBJ_PER_ORG));

  if(account.getStringAttribute(ATR_OBJ_PER_ORG) != null){
    if((account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase(STR_CONTRACTOR)) @or (account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase(STR_EMPLOYEE))){
      mylogger.info("Inside Employee Type ...."+account.getStringAttribute(ATR_OBJ_PER_ORG));




      Custom customObj= context.getObjectByName(Custom.class,STR_USERID_CUSTOM_OBJ);
      //should be kept in custom object
      String prefix=customObj.get(STR_CUSTOM_CONSTANT);
      Attributes attrs =new Attributes();
      Map mapObj = new HashMap();
      numberSufix=Integer.parseInt(customObj.get(STR_CUSTOM_VALUE))+1;
      suffixToBeReplacedinCustomFile= numberSufix.toString();
      
      //IF CONSTANT WAS 1000 THEN AAB SEQUENCE WILL BE STARTED and constant value will be set to 1000
      if(numberSufix == 10000){
        char[] prefixSplit=prefix.substring(prefix.length()-1).toCharArray();
        char lastchar=prefixSplit[0];
        char replaced=lastchar+1;
        prefix=prefix.substring(0,prefix.length()-1)+replaced;
        int l=1000;
        suffixToBeReplacedinCustomFile=l.toString();
        mapObj.put(STR_CUSTOM_CONSTANT,prefix);
        numberSufix=1000;
      }else{
        mapObj.put(STR_CUSTOM_CONSTANT,prefix);
      }




      updatedUserName=prefix+numberSufix;
      //Will check whether use exists in IIQ if yes then then it will choose another constant value(value will be incremeted)
      //checks whther userlogin present in iiq
      Filter useridFilter = Filter.eq(ATR_USERID,updatedUserName);

      if(useridFilter != null){

        System.out.println("Filter is not null");

        QueryOptions options = new QueryOptions().addFilter(useridFilter);

        if (options != null){
          objects = context.getObjects(Identity.class, options);
          System.out.println("objects"+objects);
          if(objects.isEmpty()){
            objects=null;
          }
        }
      }

      while(objects !=null){

        if(numberSufix == 10000){
          char[] prefixSplit=prefix.substring(prefix.length()-1).toCharArray();
          char prefixLastChar=prefixSplit[0];
          char replaced=prefixLastChar+1;
          System.out.println(prefixLastChar);
          prefix=prefix.substring(0,prefix.length()-1)+replaced;


          mapObj.put(STR_CUSTOM_VALUE,"1000");
          mapObj.put(STR_CUSTOM_CONSTANT,prefix);
          numberSufix=1000;
          suffixToBeReplacedinCustomFile=numberSufix.toString();

        }else{
          numberSufix=Integer.parseInt(customObj.get(STR_CUSTOM_VALUE))+count;
          count++;
          suffixToBeReplacedinCustomFile=numberSufix.toString();
        }

        updatedUserName=prefix+numberSufix;
        useridFilter = Filter.eq(ATR_USERID,updatedUserName);

        if(useridFilter != null){

          System.out.println("Filter is not null");

          options = new QueryOptions().addFilter(useridFilter);

          if (options != null){
            objects = context.getObjects(Identity.class, options);


          }
          if(objects.isEmpty()){
            objects=null;
          }


        }


      }
      mylogger.info("updatedUserName"+updatedUserName);
      // identity.setName(updatedUserName);
      System.out.println("Before userId Generation using WSCall....");
      	
          updatedUserName = generateNextUserID();
        System.out.println("After userId Generation using WSCall ...."+updatedUserName);
      identity.setAttribute(ATR_USERID,updatedUserName);
      //Sets Value in Custom Object
      mapObj.put(STR_CUSTOM_VALUE,suffixToBeReplacedinCustomFile);
      attrs.setMap(mapObj);
      customObj.setAttributes(attrs);
      context.saveObject(customObj);
      context.commitTransaction();


    }

  }</Source>
  </Rule>
  <Rule created="1604263669240" id="0a111e5875691e4f81758590edf726f3" language="beanshell" modified="1617902400653" name="Carefirst-LifeCycleEvents-RehireCondition" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.tools.Util;
import org.apache.log4j.Logger;


Logger mylogger = Logger.getLogger("com.carefirst.loggers");
System.out.println("Starting Carefirst Rehire Trigger Rule");
  try{
    if(newIdentity != null &amp;&amp; previousIdentity != null){
  String strAction = newIdentity.getAttribute(ATR_ACTION) != null ? newIdentity.getAttribute(ATR_ACTION) : "";
  System.out.println("********NewIdentity Action name***************"+strAction);
	 String strPrevAction = previousIdentity.getAttribute(ATR_ACTION) != null ? previousIdentity.getAttribute(ATR_ACTION) : "";
  System.out.println("********PreviousIdentity Action name***************"+strPrevAction);
  String strEmpStatus_old = previousIdentity.getAttribute("employeestatus") != null ? previousIdentity.getAttribute("employeestatus") : "";
  System.out.println("********PreviousIdentity Employee Status***************"+strEmpStatus_old);
String strEmpStatus = newIdentity.getAttribute("employeestatus") != null ? newIdentity.getAttribute("employeestatus") : "";
  System.out.println("********NewIdentity Employee Status***************"+strEmpStatus);
	
    
    List usersList = new ArrayList();
    System.out.println("********************Rehire Rule1******************"+strAction);
    System.out.println("********************Rehire Rule2******************"+strPrevAction);
    System.out.println("********************Rehire Rule3******************"+strEmpStatus_old);
    System.out.println("********************Rehire Rule4******************"+strEmpStatus);

 /*usersList.add("032067");
 usersList.add("032322");
 usersList.add("028671");
 usersList.add("032835"); */

 //below lines to be deleted
  /*if(usersList.contains(newIdentity.getName())){
    return true;
  }
  else{
    return false;
  }*/
  //till above line to be deleted 
    
    
//	if(newIdentity != null &amp;&amp; previousIdentity != null){
    System.out.println("********************Rehire Rule newIdentity and previousIdentity are not null******************");
    
if(!((strPrevAction.equalsIgnoreCase(ATR_REH) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_A) ) || (strPrevAction.equalsIgnoreCase(STR_ACTION_HIR) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_A))|| (strPrevAction.equalsIgnoreCase(STR_ACTION_ADD) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_A) ))){
  
  System.out.println("********************Rehire Rule OuterIf loop******************");
  if((strAction.equalsIgnoreCase(ATR_REH) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_A) ) || (previousIdentity != null &amp;&amp;strAction.equalsIgnoreCase(STR_ACTION_HIR) &amp;&amp; strEmpStatus.equalsIgnoreCase(STR_EMPSTATUS_A))|| (previousIdentity != null &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_ADD) &amp;&amp; strEmpStatus_old.equalsIgnoreCase(STR_EMPSTATUS_A) )){
    
    System.out.println("********************Rehire Rule InnerIf loop******************");
	 
     		return true;
	
	 }
     else{
	 return false;
	 }
	 
}else{
 return false;
}
//}else{
 //return false;
//}

}else{
 return false;
}
  }
	catch(Exception e){
return false;
	}</Source>
  </Rule>
  <Rule created="1604263669308" id="0a111e5875691e4f81758590ee3b26f4" language="beanshell" modified="1615987987922" name="CF-RehireScheduler-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import java.util.HashMap;
  import java.util.List;
  import java.text.DateFormat;  

  import sailpoint.api.RequestManager;
  import sailpoint.object.Attributes;
  import sailpoint.object.*;
  import sailpoint.api.*;
  import sailpoint.object.Request;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.api.Provisioner;
  import sailpoint.object.RequestDefinition;
  import sailpoint.object.Workflow;
  import org.apache.log4j.Logger;
  import sailpoint.api.Terminator;

  Logger log = Logger.getLogger("com.carefirst.RehireSchedulerRule");
  log.info("Inside RehireScheduler Rule ");
  try{


    Identity identity = null;

    ProvisioningPlan plan = null;
    SimpleDateFormat sdf = new SimpleDateFormat(STR_DATE_FORMAT);

    Filter actionrehFilter = Filter.eq(ATR_ACTION,STR_REH);
   /* Filter actionrflFilter = Filter.eq("action","RFL");
    Filter actionrfdFilter = Filter.eq("action","RFD");
     Filter orFilter =Filter.or(actionrfdFilter,actionrflFilter);
    Filter actionFilter = Filter.or(orFilter,actionrehFilter);*/
    
    //(i.getAttribute("action").equals("RFL"))@or(i.getAttribute("action").equals("RFD")
    boolean b="false";

    List identitiesList = context.getObjects(Identity.class,new QueryOptions().addFilter(actionrehFilter));
    log.info("identitiesList"+identitiesList);
    Date currentDate = new Date();
     log.info("currentDate"+currentDate);
    String currentDateString= sdf.format(currentDate);
     log.info("currentDateString"+currentDateString);
    Date actualCurrentDate=  sdf.parse(currentDateString);
     log.info("currentDateString"+actualCurrentDate);
    // return identitiesList;

log.info("identitiesList"+identitiesList);
    
    for (Identity i: identitiesList) {
      
      String effDate=i.getAttribute("effdt");
     
      if(effDate !=null @and i.getAttribute(ATR_EMPLOYEESTATUS) !=null @and effDate.contains("-")){

        // System.out.println("effffffff"+effDate+i+i.getAttribute(ATR_EMPLOYEESTATUS)+actualCurrentDate+actualeffdate);
      Date actualeffdate=  sdf.parse(effDate);
 System.out.println("actualeffdate-----------------------------"+actualeffdate+actualCurrentDate+i.getAttribute(ATR_EMPLOYEESTATUS)+ATR_ACTIVE_A);


//System.out.println("identitiesList-------------"+identitiesList+i.getAttribute(ATR_EMPLOYEESTATUS)+ATR_ACTIVE+actualCurrentDate+actualeffdate);
      //return identitiesList;
        List listOFApp=i.getLinks();
  
      if(i.getAttribute(ATR_EMPLOYEESTATUS).equals(ATR_ACTIVE_A) @and actualCurrentDate.compareTo(actualeffdate) == 0  ){
          for(Link m :listOFApp){
   // return "fff";
    
            if(m.getApplicationName().equals("Active Directory")){
              
              b="true";
            
            }
  }
     
        
        if(b){
        System.out.println("-------------------------------------------------------"+i);
        //  return "99";
        plan=createEnablePlan(i);
         Provisioner  prov = new Provisioner(context);
        prov.compile(plan);
        prov.execute();
        i.setAttribute("inactive","false");
        sendEmailNotification(i.getName().toString(),STR_PROVISIONING_SUCCESS_EMAIL_TEMPLATE_REHIRE,"");
        createAuditEvent("Carefirst-Delete-ProvisioingSuccess",null,null,"Carefirst-Delete-ProvisioingSuccess",null,i.getName().toString(),null,null,null,null,null,null,null);
     
        }
        else{
      
      HashMap launchArgsMap = new HashMap(); 

launchArgsMap.put("identityName",i.getName());

WorkflowLaunch wflaunch = new WorkflowLaunch();

Workflow wf = (Workflow) context.getObjectByName(Workflow.class,"CF-Joiner-Workflow");

wflaunch.setWorkflowName(wf.getName());

wflaunch.setWorkflowRef(wf.getName());



wflaunch.setVariables(launchArgsMap);


Workflower workflower = new Workflower(context);

WorkflowLaunch launch = workflower.launch(wflaunch);
      
      
      }
        }
    }
    }

  }		
  catch(Exception e){
    e.printStackTrace();
  }
/*else if(i.getAttribute(ATR_EMPLOYEESTATUS).equals(STR_TERMINATE) @and actualeffdate.compareTo(actualCurrentDate) @lt 0){//lessthan
        plan = buildAccountDeletePlan(i);
        Provisioner  prov = new Provisioner(context);
        prov.compile(plan);
        prov.execute();
        Terminator t = new Terminator(context);
        //return i;
        t.deleteObject(i);
         
        
      }*/

  </Source>
  </Rule>
  <Rule created="1604263669372" id="0a111e5875691e4f81758590ee7c26f5" language="beanshell" modified="1604263680995" name="TestDeleteProvisioning">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;

  Identity identity =context.getObjectByName(Identity.class,"100019");
  if(identity !=null ){
	
		ProvisioningPlan plan = buildAccountDeletePlan(identity);
    Provisioner  prov = new Provisioner(context);
    prov.compile(plan);
    prov.execute();
    //return prov.getProject();
    return plan;
  }
/*else 
  return "noidentity";*/
  </Source>
  </Rule>
  <Rule created="1604263669439" id="0a111e5875691e4f81758590eebf26f6" language="beanshell" modified="1604263681065" name="CF-UserIDErrorHandling-Test-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e98226e3" name="CF-CommonWebServiceLibrary-Rule"/>
    </ReferencedRules>
    <Source>

 /* import sailpoint.api.Aggregator;
  import sailpoint.api.SailPointContext;
  import sailpoint.connector.Connector;
  import sailpoint.connector.ConnectorException;
  import sailpoint.object.Application;
  import sailpoint.object.Attributes;
  import sailpoint.object.ResourceObject;
  import sailpoint.object.*;
  import sailpoint.tools.GeneralException;
  import org.apache.log4j.Logger;
  import java.util.*;
  import java.sql.DriverManager;

  import sailpoint.api.PasswordGenerator;
    import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import sailpoint.object.PasswordPolicy;
  import java.sql.Connection;

  import sailpoint.object.Identity;

  import sailpoint.object.EmailOptions;

  import sailpoint.object.EmailTemplate;

import sailpoint.tools.Util;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Identity i= getIdentityObj("100012");
  //return i;
        return i.getAttribute("startdate").getClass();

    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");

  

        Date currentDate = new Date();
  return currentDate;
        System.out.println(dateFormat.format(currentDate));

        // convert date to calendar
        Calendar c = Calendar.getInstance();
        c.setTime(currentDate);

        // manipulate date
       
        c.add(Calendar.DATE, 60); //same with c.add(Calendar.DAY_OF_MONTH, 1);
   
      

        // convert calendar to date
        Date currentDatePlusOne = c.getTime();
  String a= Util.dateToString(currentDatePlusOne, "yyyy/MM/dd") ;
  return a;

       // System.out.println(dateFormat.format(currentDatePlusOne));

   



  Identity identity = context.getObjectByName(Identity.class, "100012");	
  
  //return  singleAccountAggregation("Active Directory","CN=Daniel.Larry,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
       //ProvisioningPlan plan = buildMoverPlan(identity);
 // return plan;
  // Provisioner  prov = new Provisioner(context);
   // prov.compile(plan);
    //prov.execute();
   // return prov.getProject();
  
 // return  singleAccountAggregation("Active Directory","CN=Daniel.Larry,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
  return  context.decrypt("1:ACP:KDp97r97pKBh5JLWqqtZso8r8x0E8Y45aY4oUytDzao=");
  //return identity.getDisplayName();*/
 /* import java.util.Map;
  import java.util.HashMap;
  import java.util.List;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
 import sailpoint.object.Attributes;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Custom;
  import java.util.Date;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;
  import org.apache.log4j.Logger;
  
 /* ArrayList list=null;
  Custom customObj= context.getObjectByName(Custom.class,"CF-UserIDFailure-Custom");
      //should be kept in custom object
     list=customObj.get("errorMap");
  
  
  if(list==null){
    list = new ArrayList();
    list.add("1");
    list.add("2");
    customObj.put("errorMap",list);
      context.saveObject(customObj);
      context.commitTransaction();
  }
  else
    list.add("4");
  customObj.put("errorMap",list);
      context.saveObject(customObj);
      context.commitTransaction();*/
  /* ArrayList list=null;
  Custom customObj= context.getObjectByName(Custom.class,"CF-UserIDFailure-Custom");
      //should be kept in custom object
     list=customObj.get("failureList");
    
  if(list==null){
    list = new ArrayList();
    list.add("4");
    
  }
  else{
    list.add(identity.getName());
  }        
  customObj.put("failureList",list);
      context.saveObject(customObj);
      context.commitTransaction();
 
return list;*/
 /* boolean flag=false;
  
  if(flag){
    createAuditEvent(STR_AUDIT_JOINER_SUCESS_NOTIFICATION,null,null,STR_AUDIT_JOINER_SUCESS_NOTIFICATION,null,"100090",null,null,null,null,null,null,null);
  }
  else{
    createAuditEvent(STR_AUDIT_JOINER_SUCESS_NOTIFICATION,null,null,STR_AUDIT_JOINER_SUCESS_NOTIFICATION,null,"100090",null,null,null,"Triggered from Mover",null,null,null);
  }*/
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  
  EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-FEPOC-AD-Error");
         String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);                
          options.setVariable("identityName", "100092");
      context.sendEmailNotification(template, options);
  

  </Source>
  </Rule>
  <Rule created="1604263669500" id="0a111e5875691e4f81758590eefc26f7" language="beanshell" modified="1604263681129" name="CF-HRAferProv-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>System.out.println("plan---------"+plan);</Source>
  </Rule>
  <Rule created="1604263669600" id="0a111e5875691e4f81758590ef6026f8" language="beanshell" modified="1604263681195" name="CF-HomedirectoryDelete-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
    Remove-Item E:\Test\Shubham\TestDelete
  </Source>
  </Rule>
  <Rule created="1604263669730" id="0a111e5875691e4f81758590efe226f9" language="beanshell" modified="1616869503759" name="CF-LaunchPowerShellRuleLeaverOperation-Rule">
    <Source>
  import sailpoint.object.Application;


  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;


 
  //public RpcResponse LaunchPowerShellRule(String ruleName,String manageruserid,String userid){

  // Fake account request
  AccountRequest accountRequest = new AccountRequest();
  accountRequest.setApplication("IIQ");
  accountRequest.setNativeIdentity("SPF9485");
  accountRequest.setOperation(AccountRequest.Operation.Modify);
 accountRequest.add(new AttributeRequest("displayName",ProvisioningPlan.Operation.Set,"Name"));
    accountRequest.add(new AttributeRequest("manageruserid",ProvisioningPlan.Operation.Set,"SPF9486"));
     accountRequest.add(new AttributeRequest("identityName",ProvisioningPlan.Operation.Set,"SPF9485"));

  Map data = new HashMap();
     String strADAppName = "Active Directory";
  //Rule ruleObj = context.getObjectByName(Rule.class,"CF-Exchange-PowerShell-Rule");
 // Rule ruleObj = context.getObjectByName(Rule.class,ruleName);
  //Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedirectoryDelete-Rule");
  Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomeDirectoryReassign-Rule");
  //return ruleObj;
  data.put("postScript",ruleObj);
  Application appObj = context.getObjectByName(Application.class, strADAppName);
  data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  String IQServiceServer = "SV-SPIDSVC-D3.carefirsttest.com";
  int IQServicePort = 5050;
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
  //return data;
  RpcResponse response = service.execute(request);
  return response;
  //}
  </Source>
  </Rule>
  <Rule created="1604263669849" id="0a111e5875691e4f81758590f05926fa" language="beanshell" modified="1604263681323" name="Carefirst-Affilate-FormLogic" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.Custom;
import java.util.Map;
  import java.util.HashMap;
  import java.util.List;
   import sailpoint.object.Attributes;


 Custom c= context.getObjectByName(Custom.class,"CareFirst-AffilateUsers-CustomObject");
  String prefix=c.get("constant");
 int numberSufix=0;
String suffixToBeReplacedinCustomFile="";
     
    
      numberSufix=Integer.parseInt(c.get("Value"))+1;
      suffixToBeReplacedinCustomFile= numberSufix.toString();

String op=prefix.concat(suffixToBeReplacedinCustomFile);

return op;</Source>
  </Rule>
  <Rule created="1604263669998" id="0a111e5875691e4f81758590f0ee26fb" language="beanshell" modified="1604263681395" name="CF-MailboxDeletion-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
	Remove-Mailbox -Identity "(Identity name inside double quotes)" -Permanent $true
  </Source>
  </Rule>
  <Rule created="1604263670111" id="0a111e5875691e4f81758590f15f26fc" language="beanshell" modified="1610113136107" name="CF-MailboxReassign-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="8000"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
   Add-type -path  E:\IQService\utils.dll


  try{
    
ECHO "Before creating the Variables 11222211****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
  
     $secpasswd = ConvertTo-SecureString "Here2dayGone2morrow" -AsPlainText -Force
$mycreds = New-Object System.Management.Automation.PSCredential -ArgumentList "tim_o365@carefirsttest.com", $secpasswd
Connect-exchangeonline -Credential $mycreds -CommandName Add-MailboxPermission
  
    $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    ECHO "after sreader  ****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
        ECHO "after xmlreader  ****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
    
    ECHO "Declared OOB Varaibles ****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
      
    
foreach ($attribute in $requestObject.AttributeRequests){

    if($attribute.Name -eq "identityName"){
      $userID  = $attribute.Value
      
    }
      if($attribute.Name -eq "manageruserid"){
     $managerUserID  = $attribute.Value
      
    }
  }
  	Add-MailboxPermission -Identity $userID -User  $managerUserID -AccessRights FullAccess
      
 }
  
  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\mailboxReassignError.txt -FORCE
  }


  </Source>
  </Rule>
  <Rule created="1604263670242" id="0a111e5875691e4f81758590f1e226fd" language="beanshell" modified="1607426390186" name="CF-HomeDirectoryReassign-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
 Add-type -path  E:\IQService\utils.dll


  try{
    
ECHO "Before creating the Variables 11222211****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
    $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    ECHO "after sreader  ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
        ECHO "after xmlreader  ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
    
    ECHO "Declared OOB Varaibles ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
      
     #Below two lines to be deleted when moving to Prod
     [string] $userID = "E:\Test\"
     [string]  $managerUserID = "E:\Test\"
      
      #Below two lines to be uncommented when moving to Prod
     #[string] $userID = "\\carefirst.com\corp\cdchome\"  
     #[string]  $managerUserID = "\\carefirst.com\corp\cdchome\" 
      
      
foreach ($attribute in $requestObject.AttributeRequests){

    if($attribute.Name -eq "identityName"){
      $userID  = $userID+$attribute.Value
          $sAMAccountName = $attribute.Value
      
    }
      if($attribute.Name -eq "manageruserid"){
     $managerUserID  = $managerUserID+$attribute.Value
        $managerName = $attribute.Value
      
    }
  }
   Move-Item -Path $userID -Destination $managerUserID
        ECHO "user folder is moved to manager folder ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
                $slash = "\"
        $homeDirectory =  $managerUserID + $slash + $sAMAccountName
        ECHO " Current Homedirectory ****" $homeDirectory |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
          $currentACL = Get-ACL -path $homeDirectory
         
          $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($managerName,"Read","Allow")
          $currentACL.SetAccessRule($AccessRule)
          $currentACL | Set-Acl -path $homeDirectory 
          ECHO "Manager added in User folder ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
     
   
 }
  
  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\homedriveReassignError.txt -FORCE
  }


  </Source>
  </Rule>
  <Rule created="1604263670486" id="0a111e5875691e4f81758590f2d626fe" language="beanshell" modified="1616149642688" name="CF-DeleteTrigger-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.tools.Util;
import org.apache.log4j.Logger;
import java.text.*;
import java.util.Calendar;
  import java.util.Date;
  import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
  import java.time.temporal.ChronoUnit;

Logger mylogger = Logger.getLogger("com.carefirst.loggers");
mylogger.info("Starting Carefirst Leaver Trigger Rule");
	try{
	 String strAction = newIdentity.getAttribute(ATR_ACTION) != null ? newIdentity.getAttribute(ATR_ACTION) : "";
   String actionDate = newIdentity.getAttribute("termdate") != null ? newIdentity.getAttribute("termdate") : "";
    
   mylogger.info("Starting Carefirst Delete Trigger Rule Action is "+strAction);
    mylogger.info("Starting Carefirst Delete Trigger Rule ActionDate is "+actionDate);
    
	 if(newIdentity != null &amp;&amp; previousIdentity != null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp;  Util.isNotNullOrEmpty(actionDate)) {
             
		Date actDate = new SimpleDateFormat("dd-MMM-yy").parse(actionDate);
   	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-dd-MM");
    
    DateTimeFormatter sdf = DateTimeFormatter.ofPattern("yyyy-dd-MM HH:mm");
		LocalDateTime ldt = LocalDateTime.parse(sdf1.format(actDate)+" 17:00",sdf);
     mylogger.info("Starting Carefirst Delete Trigger Rule Converted ActionDate is "+ldt);
     System.out.println("Starting Carefirst Delete Trigger Rule Converted ActionDate is "+ldt);
     if(newIdentity.isInactive() &amp;&amp; previousIdentity.isInactive() &amp;&amp;  strAction.equalsIgnoreCase(STR_ACTION_TER) || (strAction.equalsIgnoreCase(STR_ACTION_COM ))){
			mylogger.info("Starting Carefirst Delete Trigger Rule Inside return if ");
       long daysCount = ChronoUnit.DAYS.between(ldt, LocalDateTime.now());
	   mylogger.info("Starting Carefirst Delete Trigger Rule Days Count are: "+daysCount);
 System.out.println("Starting Carefirst Delete Trigger Rule Days Count are: "+daysCount);
	   if(daysCount>60){
        mylogger.info("Starting Carefirst Delete Trigger Rule Trigger will start now after Date Comparison "); 
				return true;  
       }
	  }
	 }
	}
	catch(Exception e){
	}</Source>
  </Rule>
  <Rule created="1604263670797" id="0a111e5875691e4f81758590f40d26ff" language="beanshell" modified="1604263681666" name="CF-Mover-Old-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>if(previousIdentity != null @and newIdentity !=null){
  if(previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase(STR_EMPLOYEE) ){
    if(newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase("Contractor") ){
      return true;
    }
  }
  else if((previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase("Contractor"))@and (newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase(STR_EMPLOYEE) ) ){
    return true;

  }
  else if((previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase(STR_FEPOC_ASSOCIATE))@and (newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase(STR_FEPOC_CONTRACTOR) ) ){
    return true;

  }else if((previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase("STR_FEPOC_CONTRACTOR"))@and (newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase(STR_FEPOC_ASSOCIATE) ) ){
    return true;

  }else if((previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE).startsWith("Carefirst"))@and (newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase("FEPOC") ) ){
    return true;

  }else if((previousIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and previousIdentity.getAttribute(ATR_EMPLOYEETYPE).startsWith("FEPOC"))@and (newIdentity.getAttribute(ATR_EMPLOYEETYPE) !=null @and newIdentity.getAttribute(ATR_EMPLOYEETYPE).equalsIgnoreCase("Carefirst") ) ){
    return true;

  }
  else{
    return false;
  }
}</Source>
  </Rule>
  <Rule created="1604263670998" id="0a111e5875691e4f81758590f4d62700" language="beanshell" modified="1604263681736" name="SupportRuleIDXCK">
    <Source>

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Map;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import oracle.jdbc.driver.OracleConnection;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import sailpoint.tools.Message;
import sailpoint.tools.Util;
import sailpoint.Version;

Log log = LogFactory.getLog("sailpoint.rule.SupportRuleIDXCK");

///
/// for tracing purposes, add line to "log4j.properites" file 
/// log4j trace: log4j.logger.sailpoint.rule.SupportRuleIDXCK=all
///
/// @version: $Revision: 53008 $; $Date: 2019-04-04 13:26:20 -0500 (Thu, 04 Apr 2019) $;
/////////////////////////////////////////////////////////////////////////////////////
/// TOUCH ABOVE THIS LINE AT OWN PERIL!!!

///
/// OPTION 1) flag to control read-only mode
/// false - scan only, do NOT build SQL Update statments to fix errors (default)
/// true - build SQL Update statments to modify DB (proabably run them too)
///

boolean flagFix = false; // true updates IIQ tables !!!

///
/// OPTION 2) flag to select table coverage
/// false - process "usual suspects", subset of tables w/IDX key-column
/// true - process all tables w/IDX key-column (default)
///

boolean flagAllTbls = true; // true processes all IDX tables

///
/// OPTION 3) flag to override table coverage
/// false - use tbl info from rule (default)
/// true - use (user-cfged) table
/// (optional "strValueOverride" to scan only rows w/parent-column value)
///

boolean flagOverrideTbl = false; // true uses "override" strings
String strTblOverride = "SPT_TABLENAME";
String strValueOverride = ""; // empty checks all parent values

///
/// OPTION 4) flag to fix all tbl entries (w/single SQL stmt)
/// false - only fix parent-rows w/mis-ordered idx-values (default)
/// true - recompute all rows when finding any mis-ordered row
///

boolean flagFixAllRows = false; // true recalculates all IDX values

///
/// OPTION 5) flag to not run SQL stmts
/// false - execute SQL Select,Update stmts (default)
/// true - do NOT execute SQL stmts
///
/// log4j-level INFO outputs SQL stmts (for DBA review/execution)
///

boolean flagNoRunSQL = false; // true doesn't execute SQL stmts

///
/// OPTION 6) string to use in place of runtime IIQ version
/// empty string gets version from runtime IIQ env (default)
/// "6.4","7.0","7.1","7.2","7.3","8.0"
///

String strIIQVerOverride = ""; // non-empty string skips getVersion() call

///
/// OPTION 7) string to use in place of runtime DB vendor
/// flavors SQL "UPDATE" syntax to suit RDBMS taste
///
/// empty string pulls DB vendor from runtime IIQ env (default)
/// "mysql","sqlserver","oracle","db2"
///

String strSQLSyntaxOverride = ""; // non-empty string skips SQL meta-data

///
/// OPTION 8) flag to process null-valued parent key-columns
///
/// false - do not find rows w/null-valued "parent" key-column
/// true - include "parent" key-column in processing steps
/// WARNING: fix to null-valued "parent" key-column deletes table entry (ie DATA-LOSS)
///

boolean flagParentCol = false; // true processes "parent" key-column values

///
///
/// TOUCH BELOW THIS LINE AT OWN PERIL!!!
/////////////////////////////////////////////////////////////////////////////////////
///

///
/// (private) global flag for executions with TaskResult (vs rule's direct invocation)
///
boolean flagTaskResult = ((void != taskResult) &amp;&amp; (null != taskResult)) ? true : false;

///
///
/// funcALst_CfgTblIDX()
/// check to build array with "override" settings
/// else build array of IDX table,key,column triples for many IIQ versions
/// return array
///
/// arraylist holds (version-specific) table,column names w/IDX feature
/// always add table,primary-key,column names as ordered triplets !!!
/// BeanShell barfs on ArrayList&lt;String,String,String> or Arrays.asArrayList() !!!
///
/// shell cmd to find idx-tables from major release DDL:
/// awk 'tolower($1) ~ /create/ &amp;&amp; tolower($2) ~ /table/ { tmpStr = $3; }
///      tolower($1) ~ /idx/ &amp;&amp; tolower($2) ~ /integer/ { print tmpStr; }'
///      create_identityiq_tables-N.N.mysql | sort
///
ArrayList funcALst_CfgTblIDX(String argVer) {
  ArrayList tmpArray = new ArrayList();

  log.debug("IIQ version [" +argVer+ "]");

  if ((void != flagAllTbls) &amp;&amp; !flagAllTbls &amp;&amp; (void != flagOverrideTbl) &amp;&amp; !flagOverrideTbl) {
    tmpArray.add("spt_certification"); tmpArray.add("id"); tmpArray.add("parent");
    tmpArray.add("spt_certification_item"); tmpArray.add("id"); tmpArray.add("certification_entity_id");
    tmpArray.add("spt_mitigation_expiration"); tmpArray.add("id"); tmpArray.add("identity_id");
    tmpArray.add("spt_remediation_item"); tmpArray.add("id"); tmpArray.add("work_item_id");
    if (argVer.equals("6.4") || argVer.equals("7.0") || argVer.equals("7.1") || argVer.equals("7.2")) {
      tmpArray.add("spt_certification_entity"); tmpArray.add("id"); tmpArray.add("certification_id");
      if (argVer.equals("6.4") || argVer.equals("7.0")) {
      tmpArray.add("spt_link"); tmpArray.add("id"); tmpArray.add("identity_id");
    }}
  } else if (argVer.equals("6.4") || argVer.equals("7.0") || argVer.equals("7.1") || argVer.equals("7.2") || argVer.equals("7.3") || argVer.equals("8.0")) {
    tmpArray.add("spt_account_group_inheritance"); tmpArray.add("account_group"); tmpArray.add("account_group");
    tmpArray.add("spt_account_group_perms"); tmpArray.add("accountgroup"); tmpArray.add("accountgroup");
    tmpArray.add("spt_account_group_target_perms"); tmpArray.add("accountgroup"); tmpArray.add("accountgroup");
    tmpArray.add("spt_activity_constraint"); tmpArray.add("id"); tmpArray.add("policy");
    tmpArray.add("spt_activity_data_source"); tmpArray.add("id"); tmpArray.add("application");
    tmpArray.add("spt_activity_time_periods"); tmpArray.add("application_activity"); tmpArray.add("application_activity");
    tmpArray.add("spt_app_dependencies"); tmpArray.add("application"); tmpArray.add("application");
    tmpArray.add("spt_app_secondary_owners"); tmpArray.add("application"); tmpArray.add("application");
    tmpArray.add("spt_application_remediators"); tmpArray.add("application"); tmpArray.add("application");
    tmpArray.add("spt_application_schema"); tmpArray.add("id"); tmpArray.add("application");
    tmpArray.add("spt_arch_cert_item_apps"); tmpArray.add("arch_cert_item_id"); tmpArray.add("arch_cert_item_id");
    tmpArray.add("spt_archived_cert_item"); tmpArray.add("id"); tmpArray.add("parent_id");
    tmpArray.add("spt_authentication_answer"); tmpArray.add("id"); tmpArray.add("identity_id");
    tmpArray.add("spt_batch_request_item"); tmpArray.add("id"); tmpArray.add("batch_request_id");
    tmpArray.add("spt_bundle_children"); tmpArray.add("bundle"); tmpArray.add("bundle");
    tmpArray.add("spt_bundle_permits"); tmpArray.add("bundle"); tmpArray.add("bundle");
    tmpArray.add("spt_bundle_requirements"); tmpArray.add("bundle"); tmpArray.add("bundle");
    tmpArray.add("spt_capability_children"); tmpArray.add("capability_id"); tmpArray.add("capability_id");
    tmpArray.add("spt_capability_rights"); tmpArray.add("capability_id"); tmpArray.add("capability_id");
    tmpArray.add("spt_cert_action_assoc"); tmpArray.add("parent_id"); tmpArray.add("parent_id");
    tmpArray.add("spt_cert_item_applications"); tmpArray.add("certification_item_id"); tmpArray.add("certification_item_id");
    tmpArray.add("spt_certification"); tmpArray.add("id"); tmpArray.add("parent");
    tmpArray.add("spt_certification_def_tags"); tmpArray.add("cert_def_id"); tmpArray.add("cert_def_id");
    tmpArray.add("spt_certification_groups"); tmpArray.add("certification_id"); tmpArray.add("certification_id");
    tmpArray.add("spt_certification_item"); tmpArray.add("id"); tmpArray.add("certification_entity_id");
    tmpArray.add("spt_certification_tags"); tmpArray.add("certification_id"); tmpArray.add("certification_id");
    tmpArray.add("spt_certifiers"); tmpArray.add("certification_id"); tmpArray.add("certification_id");
    tmpArray.add("spt_child_certification_ids"); tmpArray.add("certification_archive_id"); tmpArray.add("certification_archive_id");
    tmpArray.add("spt_dictionary_term"); tmpArray.add("id"); tmpArray.add("dictionary_id");
    tmpArray.add("spt_dynamic_scope_exclusions"); tmpArray.add("dynamic_scope_id"); tmpArray.add("dynamic_scope_id");
    tmpArray.add("spt_dynamic_scope_inclusions"); tmpArray.add("dynamic_scope_id"); tmpArray.add("dynamic_scope_id");
    tmpArray.add("spt_entitlement_group"); tmpArray.add("id"); tmpArray.add("identity_id");
    tmpArray.add("spt_entitlement_snapshot"); tmpArray.add("id"); tmpArray.add("certification_item_id");
    tmpArray.add("spt_generic_constraint"); tmpArray.add("id"); tmpArray.add("policy");
    tmpArray.add("spt_group_permissions"); tmpArray.add("entitlement_group_id"); tmpArray.add("entitlement_group_id");
    tmpArray.add("spt_identity_assigned_roles"); tmpArray.add("identity_id"); tmpArray.add("identity_id");
    tmpArray.add("spt_identity_bundles"); tmpArray.add("identity_id"); tmpArray.add("identity_id");
    tmpArray.add("spt_identity_capabilities"); tmpArray.add("identity_id"); tmpArray.add("identity_id");
    tmpArray.add("spt_identity_controlled_scopes"); tmpArray.add("identity_id"); tmpArray.add("identity_id");
    tmpArray.add("spt_identity_request_item"); tmpArray.add("id"); tmpArray.add("identity_request_id");
    tmpArray.add("spt_identity_role_metadata"); tmpArray.add("identity_id"); tmpArray.add("identity_id");
    tmpArray.add("spt_identity_workgroups"); tmpArray.add("identity_id"); tmpArray.add("identity_id");
    tmpArray.add("spt_jasper_files"); tmpArray.add("result"); tmpArray.add("result");
    tmpArray.add("spt_managed_attr_inheritance"); tmpArray.add("managedattribute"); tmpArray.add("managedattribute");
    tmpArray.add("spt_managed_attr_perms"); tmpArray.add("managedattribute"); tmpArray.add("managedattribute");
    tmpArray.add("spt_managed_attr_target_perms"); tmpArray.add("managedattribute"); tmpArray.add("managedattribute");
    tmpArray.add("spt_mitigation_expiration"); tmpArray.add("id"); tmpArray.add("identity_id");
    tmpArray.add("spt_password_policy_holder"); tmpArray.add("id"); tmpArray.add("application");
    tmpArray.add("spt_profile"); tmpArray.add("id"); tmpArray.add("bundle_id");
    tmpArray.add("spt_profile_constraints"); tmpArray.add("profile"); tmpArray.add("profile");
    tmpArray.add("spt_profile_permissions"); tmpArray.add("profile"); tmpArray.add("profile");
    tmpArray.add("spt_remediation_item"); tmpArray.add("id"); tmpArray.add("work_item_id");
    tmpArray.add("spt_request_arguments"); tmpArray.add("signature"); tmpArray.add("signature");
    tmpArray.add("spt_request_definition_rights"); tmpArray.add("request_definition_id"); tmpArray.add("request_definition_id");
    tmpArray.add("spt_request_returns"); tmpArray.add("signature"); tmpArray.add("signature");
    tmpArray.add("spt_rule_dependencies"); tmpArray.add("rule_id"); tmpArray.add("rule_id");
    tmpArray.add("spt_rule_signature_arguments"); tmpArray.add("signature"); tmpArray.add("signature");
    tmpArray.add("spt_rule_signature_returns"); tmpArray.add("signature"); tmpArray.add("signature");
    tmpArray.add("spt_schema_attributes"); tmpArray.add("applicationschema"); tmpArray.add("applicationschema");
    tmpArray.add("spt_scope"); tmpArray.add("id"); tmpArray.add("parent_id");
    tmpArray.add("spt_sign_off_history"); tmpArray.add("id"); tmpArray.add("certification_id");
    tmpArray.add("spt_snapshot_permissions"); tmpArray.add("snapshot"); tmpArray.add("snapshot");
    tmpArray.add("spt_sodconstraint"); tmpArray.add("id"); tmpArray.add("policy");
    tmpArray.add("spt_sodconstraint_left"); tmpArray.add("sodconstraint"); tmpArray.add("sodconstraint");
    tmpArray.add("spt_sodconstraint_right"); tmpArray.add("sodconstraint"); tmpArray.add("sodconstraint");
    tmpArray.add("spt_sync_roles"); tmpArray.add("config"); tmpArray.add("config");
    tmpArray.add("spt_target_sources"); tmpArray.add("application"); tmpArray.add("application");
    tmpArray.add("spt_task_definition_rights"); tmpArray.add("task_definition_id"); tmpArray.add("task_definition_id");
    tmpArray.add("spt_task_signature_arguments"); tmpArray.add("signature"); tmpArray.add("signature");
    tmpArray.add("spt_task_signature_returns"); tmpArray.add("signature"); tmpArray.add("signature");
    tmpArray.add("spt_work_item"); tmpArray.add("id"); tmpArray.add("certification_ref_id");
    tmpArray.add("spt_work_item_comments"); tmpArray.add("work_item"); tmpArray.add("work_item");
    tmpArray.add("spt_work_item_owners"); tmpArray.add("config"); tmpArray.add("config");
    tmpArray.add("spt_workflow_rule_libraries"); tmpArray.add("rule_id"); tmpArray.add("rule_id");
    tmpArray.add("spt_workflow_target"); tmpArray.add("id"); tmpArray.add("workflow_case_id");

    if (!argVer.equals("8.0")) {
      tmpArray.add("spt_dashboard_content_rights"); tmpArray.add("dashboard_content_id"); tmpArray.add("dashboard_content_id");
      tmpArray.add("spt_dashboard_reference"); tmpArray.add("id"); tmpArray.add("identity_dashboard_id");
      if (!argVer.equals("7.3")) { tmpArray.add("spt_certification_entity"); tmpArray.add("id"); tmpArray.add("certification_id");
        if (!argVer.equals("7.2")) {
          tmpArray.add("spt_process_application"); tmpArray.add("process"); tmpArray.add("process");
          tmpArray.add("spt_process_bundles"); tmpArray.add("process"); tmpArray.add("process");
          if (!argVer.equals("7.1")) { tmpArray.add("spt_link"); tmpArray.add("id"); tmpArray.add("identity_id");
            if (!argVer.equals("7.0")) { tmpArray.add("spt_quick_link_dynamic_scopes"); tmpArray.add("quick_link_id"); tmpArray.add("quick_link_id"); }
          }
        }
      }
    }
  } else { log.error("IIQ version unmatched [" +argVer+ "]"); }

  if ((void != flagOverrideTbl) &amp;&amp; flagOverrideTbl) {
    ArrayList tmpArrayOverride = new ArrayList();
    if ((void != strTblOverride) &amp;&amp; (null != strTblOverride) &amp;&amp; (0 &lt; strTblOverride.length())) {
      strTblOverride = strTblOverride.trim().toLowerCase();
      for (int i = 0; i+2 &lt; tmpArray.size(); i+=3) {
        if (strTblOverride.equals(tmpArray.get(i))) {
          tmpArrayOverride.add(strTblOverride);
          tmpArrayOverride.add(tmpArray.get(i+1));
          tmpArrayOverride.add(tmpArray.get(i+2));
          break;
        }
      }
    }
    tmpArray = tmpArrayOverride;
  }

  return tmpArray;
}


///
///
/// funcStr_SetSQLSyntax()
/// build DB connection to use metadata to find vendor
/// return stringname of RDBMS vendor
///
String funcStr_SetSQLSyntax() {

  String tmpDB = "";
  Connection tmpConn;

    if ((void != strSQLSyntaxOverride) &amp;&amp; (0 &lt; strSQLSyntaxOverride.length()))
      tmpDB = strSQLSyntaxOverride;
    else {
      try {
          log.debug("connecting to SQL metadata");
          tmpConn = context.getConnection(); // when running in "direct" datasource envs (sailpointcontext)
          DatabaseMetaData tmpDBinfo = tmpConn.getMetaData();
          String tmpStr = tmpDBinfo.getDatabaseProductName();

          log.debug("finding SQL metadata [" +tmpStr+ "]");

          /// assign SQL Syntax based on initial company name
          if (tmpStr.startsWith("MySQL")) tmpDB = "mysql";
          else if (tmpStr.startsWith("Microsoft")) tmpDB = "sqlserver";
          else if (tmpStr.startsWith("Oracle")) tmpDB = "oracle";
          else tmpDB = "db2";

      } catch(java.sql.SQLException e) {
        log.error("finding SQL metadata failed: ", e);
        throw e;
      }
  }

  log.info("using SQL syntax: " +tmpDB);
  return tmpDB;
}


///
///
/// funcInt_CountNullParentCols()
/// run SQL stmt to count parent columns w/null value
///
/// SELECT COUNT(+strKey+) FROM +strTbl+ WHERE (+strCol+ IS null)
///
int funcInt_CountNullParentCols(String argTbl, String argKey, String argCol) {

  Connection tmpConn;
  ArrayList tmpLst = new ArrayList();
  String tmpSQL = "";
  String tmpRet = "-1";

  tmpSQL = "SELECT COUNT("+argKey+") FROM "+argTbl+" WHERE ("+argCol+" IS null)";

  try {
    log.info("executing parent COUNT on [" +argTbl+ ":" +argKey+ ":" +argCol+ "]");

    if ((void != flagNoRunSQL) &amp;&amp; flagNoRunSQL) {
      log.debug("skipping parent COUNT");
      if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Info, tmpSQL, null));
    } else {
      log.debug("connecting parent COUNT");
      tmpConn = context.getConnection(); // when running in "direct" datasource envs (sailpointcontext)
      if (tmpConn instanceof OracleConnection) ((OracleConnection)tmpConn).setStatementCacheSize(0);

      log.debug("preparing parent COUNT");
      PreparedStatement tmpStmt = tmpConn.prepareStatement(tmpSQL);

      try {
        log.debug("executing parent COUNT");
        ResultSet tmpRS = tmpStmt.executeQuery();
        if (tmpRS.next()) tmpRet = tmpRS.getString(1);		
        try { tmpRS.close(); } catch(Exception ignore) {}
      } finally { try { tmpStmt.close(); } catch(Exception ignore) {} }
    }
  } catch(java.sql.SQLException e) {
    log.error("executing parent COUNT failed: ", e);
    throw e;
  }

  log.info("returning parent COUNT: " +tmpRet);
  return Integer.parseInt(tmpRet);
}


///
///
/// funcALst_SelectBadIDXCols()
/// run first SQL stmt to find (non-null) columns w/null IDX-values
/// run second SQL stmt to find columns w/(non-null) IDX-value having duplicates
/// run third SQL stmt to find columns w/(non-null) IDX-value having gaps
/// union merges results (String-valued) column w/bad IDX values
///
/// notes: ignore entries w/null values in both column,idx (ala spt_entitlement_snapshot)
/// yoohoo ANSI!!! DB2,MySQL,MS-MySQL,Oracle execute same SELECT stmts
///
/// SELECT +strCol+ FROM +strTbl+
///   WHERE ((+strCol+ IS not null)
///     AND ( +strCol+  = ' +strValueOverride+ ')  &lt;&lt;&lt;&lt; optional specific idx-set
///     AND (idx IS null))
/// UNION SELECT +strCol+ FROM +strTbl+
///   WHERE ( +strCol+  = ' +strValueOverride+ ')  &lt;&lt;&lt;&lt; optional specific idx-set
///   GROUP BY +strCol+, idx HAVING (COUNT(*) &lt;> 1)
/// UNION SELECT +strCol+ FROM +strTbl+
///   WHERE ( +strCol+  = ' +strValueOverride+ ')  &lt;&lt;&lt;&lt; optional specific idx-set
///   GROUP BY +strCol+ HAVING (MIN(idx) &lt;> 0) OR ((COUNT(+strCol+) - MAX(idx))&lt;>1)
///
ArrayList funcALst_SelectBadIDXCols(String argTbl, String argKey, String argCol) {

  String tmpSQL = "";
  ArrayList tmpLst = new ArrayList();
  PreparedStatement tmpStmt = null;
  ResultSet tmpRS = null;

  if ((void == flagOverrideTbl) || (false == flagOverrideTbl) || (void == strValueOverride) || (null == strValueOverride) || (0 == strValueOverride.length())) {
    tmpSQL = "SELECT "+argCol+" FROM "+argTbl+" WHERE (("+argCol+" IS NOT null) AND (idx IS null))";
    tmpSQL += " UNION SELECT "+argCol+" FROM "+argTbl+" GROUP BY "+argCol+", idx HAVING (COUNT(*)&lt;>1)";
    tmpSQL += " UNION SELECT "+argCol+" FROM "+argTbl+" GROUP BY "+argCol+" HAVING (MIN(idx)&lt;>0) OR ((COUNT("+argCol+") - MAX(idx))&lt;>1)";
  } else {
    tmpSQL = "SELECT "+argCol+" FROM "+argTbl+" WHERE (("+argCol+" IS NOT null) AND ("+argCol+" = '"+strValueOverride+"') AND (idx IS null))";
    tmpSQL += " UNION SELECT "+argCol+" FROM "+argTbl+" WHERE ("+argCol+" = '"+strValueOverride+"') GROUP BY "+argCol+", idx HAVING (COUNT(*)&lt;>1)";
    tmpSQL += " UNION SELECT "+argCol+" FROM "+argTbl+" WHERE ("+argCol+" = '"+strValueOverride+"') GROUP BY "+argCol+" HAVING (MIN(idx)&lt;>0) OR ((COUNT("+argCol+") - MAX(idx))&lt;>1)";
  }

  try {
    log.info("executing idx SELECT [" +tmpSQL+ "] on [" +argTbl+ ":" +argKey+ ":" +argCol+ "]");

    if ((void != flagNoRunSQL) &amp;&amp; flagNoRunSQL) {
      log.debug("skipping idx SELECT [" +argTbl+ ":" +argKey+ ":" +argCol+ "]");
      if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Info, tmpSQL, null));
    } else {
      log.debug("connecting idx SELECT");
      Connection tmpConn = context.getConnection(); // when running in "direct" datasource envs (sailpointcontext)
      if (tmpConn instanceof OracleConnection) ((OracleConnection)tmpConn).setStatementCacheSize(0);

      log.debug("preparing idx SELECT");
      tmpStmt = tmpConn.prepareStatement(tmpSQL);

      log.debug("executing idx SELECT");
      tmpRS = tmpStmt.executeQuery();

      if (null != tmpRS) while (tmpRS.next()) {
        String tmpCol = (String) tmpRS.getString(1);
        if ((null != tmpCol) &amp;&amp; (0 &lt; tmpCol.length())) tmpLst.add(tmpCol);
      }
    }
  } catch(Exception e) { log.error("executing idx SELECT failed: ", e); throw e; 
  } finally {
    try { tmpRS.close(); } catch(Exception ignore) {}
    try { tmpStmt.close(); } catch(Exception ignore) {}
  }

  log.info("returning SQL select: " +tmpLst.toString());
  return tmpLst;
}

///
///
/// funcVoid_UpdateIDXVals()
/// run SQL stmt to fix mis-ordered columns
/// ALL) single SQL stmt to re-calculate IDX on all entries
/// ONE) extra WHERE clause to filter by specific column
///
/// DB2,Oracle allows reference in assignment, yet no JOINS
/// MySQL blocks table reference inside assignment, so must JOIN new idxvalues
/// java.sql.SQLException: You can't specify target table 'tblB' for update in FROM clause
/// SQLServer requires worst parts from MySQL,Oracle
///
/// SQL stmts for tables w/(non-composite) primary-key "id"
///
/// "UPDATE +strTbl+ tblB SET tblB.idx = (
///       SELECT COUNT(*) FROM +strTbl+ tblA
///         WHERE ((tblA.+strCol+ = tblB.+strCol+) AND (tblA.id &lt; tblB.id))
///     )
///     WHERE (tblB.+strCol+ = '+strColVal+')" &lt;&lt;&lt; difference btwn (ALL),(ONE)
///
/// "UPDATE +strTbl+ tblD
///   JOIN (SELECT tblB.id,
///       ( SELECT COUNT(*) FROM +strTbl+ tblA
///         WHERE ((tblA.+strCol+ = tblB." +strCol+) AND (tblA.id &lt; tblB.id))
///       ) AS idxValue
///       FROM +strTbl+ tblB
///       WHERE (tblB.+strCol+ = '+strColVal+') &lt;&lt;&lt; difference btwn (ALL),(ONE)
///     ) tblC ON tblD.id = tblC.id
///   SET tblD.idx = tblC.idxValue"
///
/// "UPDATE tblD SET tblD.idx = tblC.idxValue
///   FROM +strTbl+ tblD
///   JOIN (SELECT tblB.id,
///       ( SELECT COUNT(*) FROM +strTbl+ tblA
///         WHERE ((tblA.+strCol+ = tblB." +strCol+) AND (tblA.id &lt; tblB.id))
///       ) AS idxValue
///       FROM +strTbl+ tblB
///       WHERE (tblB.+strCol+ = '+strColVal+') &lt;&lt;&lt; difference btwn (ALL),(ONE)
///     ) tblC ON tblD.id = tblC.id"
///
/// SQL stmts for tables w/composite primary-key "parent","idx"
/// note: IDX issues only w/gaps (no nulls,duplicates)
///
/// "UPDATE +strTbl+ tblB SET tblB.idx = (
///       SELECT COUNT(*) FROM +strTbl+ tblA
///         WHERE ((tblA.+strCol+ = tblB.+strCol+) AND (tblA.idx &lt; tblB.idx))
///     )
///     WHERE (tblB.+strCol+ = '+strColVal+')" &lt;&lt;&lt; difference btwn (ALL),(ONE)
///
/// "UPDATE +strTbl+ tblD
///   JOIN (
///     SELECT tblB.+strCol+, tblB.idx, (
///         SELECT COUNT(*) FROM +strTbl+ tblA
///           WHERE ((tblA.+strCol+ = tblB.+strCol+) AND (tblA.idx &lt; tblB.idx))
///       ) AS idxNew
///       FROM +strTbl+ tblB
///       WHERE (tblB.+strCol+ = '+strColVal+') &lt;&lt;&lt; difference btwn (ALL),(ONE)
///   ) tblC ON tblD.+strCol+ = tblC.+strCol+ AND tblD.idx = tblC.idx
///   SET tblD.idx = tblC.idxNew"
///
/// "UPDATE tblD
///   SET tblD.idx = tblC.idxNew
///   FROM +strTbl+ tblD
///   JOIN (
///     SELECT tblB.+strCol+, tblB.idx, (
///         SELECT COUNT(*) FROM +strTbl+ tblA
///           WHERE ((tblA.+strCol+ = tblB.+strCol+) AND (tblA.idx &lt; tblB.idx))
///       ) AS idxNew
///       FROM +strTbl+ tblB
///       WHERE (tblB.+strCol+ = '+strColVal+') &lt;&lt;&lt; difference btwn (ALL),(ONE)
///   ) tblC ON tblD.+strCol+ = tblC.+strCol+ AND tblD.idx = tblC.idx"
///
void funcVoid_UpdateIDXVals(String argDB, String argTbl, String argKey, String argCol, String argColVal) {
  String tmpSQL = "";
  boolean tmpFlagAutoCommit = true;

///
/// table w/"id" as (simple) primary-key (basic SQL UPDATE stmt)
/// nulls or dups or gaps could occur among idx values
/// assign SQL UPDATE stmt based on RDBMS setting (or cross fingers w/Oracle)
///
  if (argKey.equals("id")) {
    if (argDB.equals("mysql")) {
      tmpSQL = (null == argColVal)
        ? ("UPDATE " +argTbl+ " tblD JOIN (SELECT tblB.id, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.id &lt; tblB.id))) AS idxValue FROM " +argTbl+ " tblB) tblC ON tblD.id = tblC.id SET tblD.idx = tblC.idxValue")
        : ("UPDATE " +argTbl+ " tblD JOIN (SELECT tblB.id, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.id &lt; tblB.id))) AS idxValue FROM " +argTbl+ " tblB WHERE (tblB." +argCol+ " = '" +argColVal+ "')) tblC ON tblD.id = tblC.id SET tblD.idx = tblC.idxValue") ;
    } else if (argDB.equals("sqlserver")) {
      tmpSQL = (null == argColVal)
        ? ("UPDATE tblD SET tblD.idx = tblC.idxValue FROM " +argTbl+ " tblD JOIN (SELECT tblB.id, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.id &lt; tblB.id))) AS idxValue FROM " +argTbl+ " tblB) tblC ON tblD.id = tblC.id")
        : ("UPDATE tblD SET tblD.idx = tblC.idxValue FROM " +argTbl+ " tblD JOIN (SELECT tblB.id, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.id &lt; tblB.id))) AS idxValue FROM " +argTbl+ " tblB WHERE (tblB." +argCol+ " = '" +argColVal+ "')) tblC ON tblD.id = tblC.id") ;
    }
    else {
      tmpSQL = (null == argColVal)
        ? ("UPDATE " +argTbl+ " tblB SET tblB.idx = ( SELECT COUNT(tblA.id) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.id &lt; tblB.id))) ")
        : ("UPDATE " +argTbl+ " tblB SET tblB.idx = ( SELECT COUNT(tblA.id) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.id &lt; tblB.id))) WHERE (tblB." +argCol+ " = '" +argColVal+ "') ") ;
    }
  }
///
/// table w/"idx" in (composite) primary-key (alternate SQL UPDATE stmt)
/// only gaps occur (no nulls or dups) when IDX in primary key
/// assign SQL UPDATE stmt based on RDBMS vendor (or cross fingers w/Oracle)
///
  else {
    if (argDB.equals("mysql")) {
      tmpSQL = (null == argColVal)
        ? ("UPDATE " +argTbl+ " tblD JOIN ( SELECT tblB." +argCol+ ", tblB.idx, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.idx &lt; tblB.idx))) AS idxNew FROM " +argTbl+ " tblB) tblC ON tblD." +argCol+ " = tblC." +argCol+ " AND tblD.idx = tblC.idx SET tblD.idx = tblC.idxNew")
        : ("UPDATE " +argTbl+ " tblD JOIN ( SELECT tblB." +argCol+ ", tblB.idx, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.idx &lt; tblB.idx))) AS idxNew FROM " +argTbl+ " tblB WHERE (tblB." +argCol+ " = '" +argColVal+ "')) tblC ON tblD." +argCol+ " = tblC." +argCol+ " AND tblD.idx = tblC.idx SET tblD.idx = tblC.idxNew");
    } else if (argDB.equals("sqlserver")) {
      tmpSQL = (null == argColVal)
        ? ("UPDATE tblD SET tblD.idx = tblC.idxNew FROM " +argTbl+ " tblD JOIN ( SELECT tblB." +argCol+ ", tblB.idx, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.idx &lt; tblB.idx))) AS idxNew FROM " +argTbl+ " tblB) tblC ON tblD." +argCol+ " = tblC." +argCol+ " AND tblD.idx = tblC.idx")
        : ("UPDATE tblD SET tblD.idx = tblC.idxNew FROM " +argTbl+ " tblD JOIN ( SELECT tblB." +argCol+ ", tblB.idx, ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.idx &lt; tblB.idx))) AS idxNew FROM " +argTbl+ " tblB WHERE (tblB." +argCol+ " = '" +argColVal+ "')) tblC ON tblD." +argCol+ " = tblC." +argCol+ " AND tblD.idx = tblC.idx");
    }
    else {
      tmpSQL = (null == argColVal)
        ? ("UPDATE " +argTbl+ " tblB SET tblB.idx = ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.idx &lt; tblB.idx)))")
        : ("UPDATE " +argTbl+ " tblB SET tblB.idx = ( SELECT COUNT(*) FROM " +argTbl+ " tblA WHERE ((tblA." +argCol+ " = tblB." +argCol+ ") AND (tblA.idx &lt; tblB.idx))) WHERE (tblB." +argCol+ " = '" +argColVal+ "')");
    }
  }

  log.info("executing idx UPDATE [" +tmpSQL+ "] on [" +argTbl+ ":" +argKey+ ":" +argCol+ "]");
  try {
    if ((void != flagNoRunSQL) &amp;&amp; flagNoRunSQL) {
      log.debug("skipping idx UPDATE");
      if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Info, tmpSQL, null));
    } else {
      log.debug("connecting idx UPDATE");
      Connection tmpConn = context.getConnection();

//
// handle special DB cfgs (enable auto-commit, zero-out Oracle stmt-cache)
//
      tmpFlagAutoCommit = tmpConn.getAutoCommit();
      if (!tmpFlagAutoCommit) tmpConn.setAutoCommit(true);
      if (tmpConn instanceof OracleConnection) ((OracleConnection)tmpConn).setStatementCacheSize(0);

      log.debug("preparing idx UPDATE");
      PreparedStatement tmpStmt = tmpConn.prepareStatement(tmpSQL);

      log.debug("executing idx UPDATE");
      tmpStmt.executeUpdate();
    }
  } catch(java.sql.SQLException e) {
    log.error("executing idx UPDATE failed: ", e);
    throw e;
  } finally {
//
// restore DB cfgs (optionally disable auto-commit)
//
      if (!tmpFlagAutoCommit) tmpConn.setAutoCommit(false);
  }
  log.info("exiting idx UPDATE");
}


///
///
/// funcVoid_HandleRunRuleExec()
/// detect ruleexecutor invocation and update options
/// note: "sailpoint.task.RuleExecutor" passes "config" as built-in map
/// note: option0 confirms "config" type
///
void funcVoid_HandleRunRuleExec() {
  if ((void != config) &amp;&amp; (config instanceof Map)) {
    String UI_CFG_KEY_0 = "SupportRuleIDXCK";
    String UI_CFG_KEY_1 = "flagFix";
    String UI_CFG_KEY_2 = "flagAllTbls";
    String UI_CFG_KEY_3 = "strTblOverride";
    String UI_CFG_KEY_4 = "flagFixAllRows";
    String UI_CFG_KEY_5 = "flagNoRunSQL";
    String UI_CFG_KEY_6 = "strIIQVerOverride";
    String UI_CFG_KEY_7 = "strSQLSyntaxOverride";
    String UI_CFG_KEY_8 = "flagParentCol";

    log.debug("ruleconfig = " + config.toString());

    if ((null == config.get(UI_CFG_KEY_0)) || !Boolean.parseBoolean((String) config.get(UI_CFG_KEY_0))) return;

    if (null != config.get(UI_CFG_KEY_1)) flagFix = Boolean.parseBoolean((String) config.get(UI_CFG_KEY_1));
    if (null != config.get(UI_CFG_KEY_2)) flagAllTbls = Boolean.parseBoolean((String) config.get(UI_CFG_KEY_2));
    if (null != config.get(UI_CFG_KEY_3)) {
      String tmpTblOverride = ((String) config.get(UI_CFG_KEY_3)).trim().toLowerCase();
      if (null != tmpTblOverride &amp;&amp; (0 &lt; tmpTblOverride.length())) {
         flagOverrideTbl = true; strValueOverride = ""; strTblOverride = tmpTblOverride;
      }
    }
    if (null != config.get(UI_CFG_KEY_4)) flagFixAllRows = Boolean.parseBoolean((String) config.get(UI_CFG_KEY_4));
    if (null != config.get(UI_CFG_KEY_5)) flagNoRunSQL = Boolean.parseBoolean((String) config.get(UI_CFG_KEY_5));
    if (null != config.get(UI_CFG_KEY_6)) strIIQVerOverride = ((String) config.get(UI_CFG_KEY_6)).trim();
    if (null != config.get(UI_CFG_KEY_7)) strSQLSyntaxOverride = ((String) config.get(UI_CFG_KEY_7)).trim().toLowerCase();
    if (null != config.get(UI_CFG_KEY_8)) flagParentCol = Boolean.parseBoolean((String) config.get(UI_CFG_KEY_8));
  }
}

///
///
/// main()
///
/// initialize options
/// build list of tables to check
/// scan/repair tables in list (give progress/results along the way)
///
/// uncomment following line to output stack trace
/// new Exception().printStackTrace(System.out);
///
    funcVoid_HandleRunRuleExec();

    String tmpDB = funcStr_SetSQLSyntax();
    String tmpVer = ((void != strIIQVerOverride) &amp;&amp; (0 &lt; strIIQVerOverride.length())) ? strIIQVerOverride : Version.getVersion();
    ArrayList tmpLstTblIDX = funcALst_CfgTblIDX(tmpVer);
    int tmpTblCnt = 0;

    try  {
      if (flagTaskResult) { taskResult.setProgress("starting"); context.saveObject(taskResult); context.commitTransaction(); }

      if ((null != tmpLstTblIDX) &amp;&amp; (2 &lt; tmpLstTblIDX.size())) {
        for (int i = 0; i+2 &lt; tmpLstTblIDX.size(); i+=3, tmpTblCnt++) {
          String tmpTbl = (String) tmpLstTblIDX.get(i);
          String tmpKey = (String) tmpLstTblIDX.get(i+1);
          String tmpCol = (String) tmpLstTblIDX.get(i+2);

          String tmpMsg = "scanning table '" + tmpTbl + "' column 'idx'";
          log.info(tmpMsg); if (flagTaskResult) { taskResult.setProgress(tmpMsg); context.saveObject(taskResult); context.commitTransaction(); }

          ArrayList tmpLstBadCols = funcALst_SelectBadIDXCols(tmpTbl, tmpKey, tmpCol);

          if ((null != tmpLstBadCols) &amp;&amp; (0 &lt; tmpLstBadCols.size())) {
            tmpMsg = "Table '" +tmpTbl+ "' holds " + tmpLstBadCols.size()+ " row-set(s) with non-sequential values in 'idx' column";
            log.warn(tmpMsg); if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Error, tmpMsg, null));
          }

          if ((void != flagFix) &amp;&amp; flagFix) {
            if ((void != flagNoRunSQL) &amp;&amp; flagNoRunSQL) { funcVoid_UpdateIDXVals(tmpDB, tmpTbl, tmpKey, tmpCol, null); }
            else if ((null != tmpLstBadCols) &amp;&amp; (0 &lt; tmpLstBadCols.size())) {
              tmpMsg = "resequencing table '" + tmpTbl + "' column 'idx'";
              log.info(tmpMsg); if (flagTaskResult) { taskResult.setProgress(tmpMsg); context.saveObject(taskResult); context.commitTransaction(); }

              if ((void != flagFixAllRows) &amp;&amp; flagFixAllRows)
                funcVoid_UpdateIDXVals(tmpDB, tmpTbl, tmpKey, tmpCol, null);
              else
                for (String tmpValue : tmpLstBadCols) if (null != tmpValue) funcVoid_UpdateIDXVals(tmpDB, tmpTbl, tmpKey, tmpCol, tmpValue);

              tmpMsg = "Table '" +tmpTbl+ "'  column 'idx' re-sequenced";
              log.warn(tmpMsg); if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Info, tmpMsg, null));
            }
          }

          if ((void != flagParentCol) &amp;&amp; flagParentCol) {
            tmpMsg = "scanning table '" + tmpTbl + "' column '" +tmpCol+ "'";
            log.info(tmpMsg); if (flagTaskResult) { taskResult.setProgress(tmpMsg); context.saveObject(taskResult); context.commitTransaction(); }

            int tmpCntNullCols = funcInt_CountNullParentCols(tmpTbl, tmpKey, tmpCol);

            if (0 &lt; tmpCntNullCols) {
              tmpMsg = "Table '" +tmpTbl+ "' holds " +tmpCntNullCols+ " row(s) with null values in '" +tmpCol+ "' column";
              log.warn(tmpMsg); if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Warn, tmpMsg, null));
            }
          }
        }
      }
      if (flagTaskResult) { taskResult.setProgress("completed"); context.saveObject(taskResult); context.commitTransaction(); }
    } catch(Exception e) { log.error("IDX exception: ", e); if (flagTaskResult) taskResult.addMessage(new Message(Message.Type.Error, "Exception thrown during rule execution", null)); }

    return Util.getHostName() + " processed " + (tmpTblCnt.toString() + " out of " + ((null != tmpLstTblIDX) ? ((tmpLstTblIDX.size()/3).toString()) : "0") + " " +tmpDB+ " table(s) for " +tmpVer+ " release");

   </Source>
  </Rule>
  <Rule created="1604263671145" id="0a111e5875691e4f81758590f5692701" language="beanshell" modified="1604263681799" name="CF-AD-Prod-AfterProvisioning-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Source>import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
import sailpoint.object.ProvisioningResult;
import org.apache.log4j.Logger;
  import sailpoint.api.Provisioner;
    
Logger logger= Logger.getLogger("com.carefirst.loggers");
logger.info("Starting After Provisiioning Rule");

if(plan != null){
System.out.println("######XML PLAN is:::"+plan.toXml());
logger.info("######XML PLAN is:::"+plan.toXml());


System.out.println("######XML Identity is:::"+plan.getIdentity());
logger.info("######XML Identity is:::"+plan.getIdentity());


AccountRequest accountRequest = plan.getAccountRequest("Active Directory Production");
System.out.println("######accountRequest ::::"+accountRequest);
logger.info("######accountRequest ::::"+accountRequest);

Operation operation = accountRequest.getOperation();
 System.out.println("######accountRequest operation::::"+operation);
logger.info("######accountRequest operation::::"+operation);
System.out.println("######Boolean operation::::"+operation.equals(Operation.Create));
logger.info("######Boolean operation::::"+operation.equals(Operation.Create));

if(null != operation &amp;&amp; operation.equals(Operation.Create)){
System.out.println("######In If Condition");
logger.info("######In After If Condition 111");
  Identity identity = plan.getIdentity();
  String employeestatus = identity.getAttribute("employeestatus");
  logger.info("######employeestatus:::::"+employeestatus);
  if(null != employeestatus &amp;&amp; employeestatus.equalsIgnoreCase("Pre Hire")){
    logger.info("######In Pre Hire If Condition:::::"+employeestatus);
    ProvisioningPlan disablePlan = new ProvisioningPlan();
    disablePlan.setIdentity(identity);
	logger.info("######In Pre Hire Identity :::::"+identity);
    // Disable Active Directory Account
   Application appObj  = context.getObjectByName(Application.class, "Active Directory");
    linkObj = identity.getLink(appObj);
    log.info("Inside Common Rule Library buildCustomPlan() before linkObj not check");
    if(linkObj != null){
      log.info("Inside Common Rule Library buildCustomPlan()  inside null check");
      AccountRequest adAccountReq = new AccountRequest();

      adAccountReq.setApplication("Active Directory");
      adAccountReq.setNativeIdentity(linkObj.getNativeIdentity());
      adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);
          disablePlan.add(adAccountReq);
     Provisioner  prov = new Provisioner(context);
    prov.compile(disablePlan);
    prov.execute();
    
  }
  
  
EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-EmailTemplate-ManagerEmailTemplate");

String email = "spadmin@test.com";
EmailOptions options = new EmailOptions();
Identity manager=identity.getManager();
if(manager == null){
options.setTo(email);
}else{
if(null != manager.getEmail()){
options.setTo(manager.getEmail());
}else{
options.setTo(email);
}
}
logger.info("######In After If Condition 22");

Map args = new HashMap();
args.put("identity", identity.getName());
if(null != identity.getPassword()){
args.put("password", context.decrypt(identity.getPassword()));
}else{
args.put("password", "Defalult#1234");
}
options.setVariables(args);
context.sendEmailNotification(template, options);
logger.info("######In After If Condition END");
  }
  }
}</Source>
  </Rule>
  <Rule created="1604263671263" id="0a111e5875691e4f81758590f5df2702" language="beanshell" modified="1604263681859" name="CF-CIAM_SP_sync_retry-Rule">
    <Source>
  import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import com.mysql.cj.jdbc.MysqlDataSource;

  import sailpoint.api.SailPointContext;
    import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  import java.util.*;

		
		String columnNames= "emplId,created,modified,uaasUserName,tsrNumber,submitterUserName,skipSearch,firstName,middleInitial,lastName,personType,personId,personStatus,emailAddress,alternateEmailAddress,dateOfBirth,gender,socialSecurityNumber,userName,companyCode,companyName,businessUnitCode,businessUnitName,departmentCode,departmentName,locationCode,jobTitle,jobCode,eeoCode,managerId,managerName,costCenter,startDate,endDate,action,roleName,ownerName,applictionName,entitlementName,operation,extended1,extended2,extended3,extended4,extended5,extended6,extended7,extended8,extended9,extended10";
		ArrayList columnList= new ArrayList(Arrays.asList(columnNames.split(",")));
		MysqlDataSource dataSource = new MysqlDataSource();
		dataSource.setUser("identityiq");
		dataSource.setPassword("identityiq");
		dataSource.setServerName("sv-tivdi-p2");
		dataSource.setDatabaseName("identityiq");
		Connection conn;
		ArrayList mapList =new ArrayList();
		try {
			conn = dataSource.getConnection();
			Statement stmt = conn.createStatement();
			//ResultSet rs = stmt.executeQuery("select * from ciam_user_provisioning_status");
			ResultSet rs = stmt.executeQuery("select * from ciam_user_provisioning_status where emplId='100271'");
			while(rs.next()){
				HashMap userDetailsMap = new HashMap();
				for(int i=0;i&lt;columnList.size();i++){
				System.out.println(rs.getString(columnList.get(i).toString()));
				userDetailsMap.put(columnList.get(i).toString(), rs.getString(columnList.get(i).toString()));
				}
				mapList.add(userDetailsMap);
				System.out.println(conn);
				System.out.println(userDetailsMap);
				
			}
			System.out.println(mapList);
			rs.close();
			stmt.close();
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(mapList.size()>0){
			try {
		for(int i=0;i&lt;mapList.size();i++){
			
				conn = dataSource.getConnection();
			
			Statement stmt = conn.createStatement();
			
			HashMap retryMap=(HashMap) mapList.get(i);
			String operation = retryMap.get("operation").toString();
      
			//based on operation call the method
      
			String result="failure";
			if(result.equals("success")){
				//stmt.executeUpdate("delete from ciam_user_provisioning_status where emplid='0'");
				
			}
			else{
        
  
  HashMap userDetailsMap = new HashMap();
  String userDetailsString = "Test";
  String attributeNames = "uaasUserName,tsrNumber,submitterUserName,skipSearch,firstName,middleInitial,lastName,personType,personStatus,emailAddress,gender,socialSecurityNumber,userName,emplId,companyCode,businessUnitCode,departmentCode,departmentName,locationCode,jobTitle,eeoCode,locationCode,managerId,managerName,costCenter,startDate,endDate";
  ArrayList attributeList= new ArrayList(Arrays.asList(attributeNames.split(",")));
 /* userDetailsMap.put("firstName","TestUser");
userDetailsMap.put("middleInitial","m");
  userDetailsMap.put("lastName","LName");*/
  
   EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CF-CIAM_SP_Integratin_FailureNotification-EmailTemplate");
   String email = "Admin@carefirst.com";
   EmailOptions options = new EmailOptions();
  options.setTo(email);
  options.setVariable("userDetailsMap",retryMap);
  options.setVariable("userDetailsString",userDetailsString);
  options.setVariable("attributeList",attributeList);
  context.sendEmailNotification(template, options);
        
				//option 1 : call email template and delete
				//option 2 : let the next retry pickup the same data
			}
		}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
         return mapList;
                   </Source>
  </Rule>
  <Rule created="1604263671380" id="0a111e5875691e4f81758590f6542703" language="beanshell" modified="1604263681921" name="CF-RoleChangeDetection-Trigger-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <Signature returnType="boolean"/>
    <Source>if(previousIdentity != null @and newIdentity !=null){
System.out.println("previousIdentity.getAssignedRoles()...."+previousIdentity.getAssignedRoles());
System.out.println("newIdentity.getAssignedRoles()...."+newIdentity.getAssignedRoles());
System.out.println("compare...."+newIdentity.getAssignedRoles().equals(previousIdentity.getAssignedRoles()));

boolean flag = !(newIdentity.getAssignedRoles().equals(previousIdentity.getAssignedRoles()));

  System.out.println("flag ...."+flag);
System.out.println("previousIdentity ...."+previousIdentity.toXml());
System.out.println("newDept...."+newIdentity.toXml());

return flag;
}</Source>
  </Rule>
  <Rule created="1604263671499" id="0a111e5875691e4f81758590f6ca2704" language="beanshell" modified="1604263681987" name="CF-CIAM-WSLibrary-Rule">
    <Source>
  import java.io.IOException;
  import java.io.InputStreamReader;
  import java.io.OutputStreamWriter;
  import java.net.HttpURLConnection;
  import java.net.MalformedURLException;
  import java.net.ProtocolException;
  import java.net.URL;
  import org.apache.log4j.Logger;
  import java.net.MalformedURLException;
  import java.net.URL;
  import java.util.HashMap;


  import javax.xml.datatype.DatatypeConfigurationException;
  import javax.xml.datatype.DatatypeFactory;
  import javax.xml.datatype.XMLGregorianCalendar;

  import com.carefirst.ciam.services.uaas.BaseFault;
  import com.carefirst.ciam.services.uaas.CiamSystemFault;
  import com.carefirst.ciam.services.uaas.UAAS;
  import com.carefirst.ciam.services.uaas.UAASPort;
  import com.carefirst.ciam.services.uaas.UserAlreadyExistsFault;
  import com.carefirst.ciam.services.uaas.UserAlreadyExistsWarning;
  import com.carefirst.ciam.services.uaas.ValidationFault;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.BusinessUnit;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableAssociateInformation;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.FullName;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.Gender;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonStatus;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonType;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateInput;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateOutput;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDInput;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDOutput;
  import java.net.URL;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonOutput;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;


import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonOutput;



import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableContractorInformation;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorOutput;



  Logger loggerObj = Logger.getLogger("com.carefirst.Rule.WSLibrary");

  loggerObj.info("###WSLibrary");

  public String sendRequest(String requestXml, String endpoint, String soapAction) throws Exception {
    String responseXML = null;
    try {


      URL url = new URL(endpoint);
      HttpURLConnection rc = (HttpURLConnection) url.openConnection();
      rc.setRequestMethod("POST");
      rc.setDoOutput(true);
      rc.setDoInput(true);
      rc.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
      System.out.println("Endpoint:" + endpoint);
      System.out.println("soapAction:" + soapAction);
      int len = requestXml.length();
      rc.setRequestProperty("Content-Length", Integer.toString(len));
      rc.setRequestProperty("SOAPAction", "\"" + soapAction + "\"");
      rc.setRequestProperty("Connection", "Keep-Alive");

      rc.connect();
      OutputStreamWriter out = new OutputStreamWriter(rc.getOutputStream());
      out.write(requestXml, 0, len);
      out.flush();
      InputStreamReader read = null;

      try {
        read = new InputStreamReader(rc.getInputStream());
      } catch (Exception exception) {
        // if something wrong instead of the output, read the error
        read = new InputStreamReader(rc.getErrorStream());
      }
      StringBuilder sb = new StringBuilder();
      int ch = read.read();
      while (ch != -1) {
        sb.append((char) ch);
        ch = read.read();
      }
      responseXML = sb.toString();
      System.out.println("SOAP Response : " + responseXML);
      loggerObj.info("SOAP Response : " +responseXML);

    } catch (MalformedURLException e) {
      throw new Exception(e);
    } catch (ProtocolException e) {
      throw new Exception(e);
    } catch (IOException e) {
      throw new Exception(e);
    }
    return responseXML.substring(560, 567);
  }

  public void createAssociate(Map usedDeatilasMap) throws Exception {


    try{
      String firstName = "SIQISIMDevF";
      String middleName = "M";
      String lastName = "SIQISIMDevL";
      String email = "SIQISIMDevF@carefirsttest.com";
      String userName = "aaa4326";

      //String name = "aaa5255";
      String companyCode = "CMS";

      String businessUnitCode = "COMKT";
      String departmentCode = "14111";
      String locationCode = "OWML1";
      String jobTitle = "Manager";
      String eeoCode = "110";
      String managerId = "020076";
      String startDate = "2019-12-09";
      String endDate = "3000-01-01";
      String costCenter = "002K3";
      String empID = "556681";
      URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
      UAAS u = new UAAS(url);
      UAASPort port = u.getUAASPort();


      CreateAssociateInput createAssociateInput = new CreateAssociateInput();
      createAssociateInput.setUaasUserName("aac5790");
      createAssociateInput.setTsrNumber("SAILREQ");
      createAssociateInput.setSubmitterUserName("aac5790");
      createAssociateInput.setSkipSearch(false);


      EditableAssociateInformation editableAssociateInformation = new EditableAssociateInformation();

      FullName fullName = new FullName();
      fullName.setFirstName(firstName);
      fullName.setLastName(lastName);
      fullName.setMiddleInitial(middleName);
      editableAssociateInformation.setFullName(fullName);
      editableAssociateInformation.setPersonType(PersonType.ASSOCIATE);
      editableAssociateInformation.setPersonStatus(PersonStatus.ACTIVE);
      editableAssociateInformation.setEmailAddress(email);
      editableAssociateInformation.setGender(Gender.M);
      editableAssociateInformation.setSocialSecurityNumber("1234589");
      editableAssociateInformation.setUserName(s.getAvailableUserID());

      editableAssociateInformation.setEmplId(empID);
      BusinessUnit businessUnit = new BusinessUnit();
      businessUnit.setCompanyCode(companyCode);
      businessUnit.setBusinessUnitCode(businessUnitCode);
      businessUnit.setDepartmentCode(departmentCode);
      businessUnit.setDepartmentName("Care Management Admin");
      businessUnit.setLocationCode(locationCode);
      businessUnit.setJobTitle(jobTitle);
      businessUnit.setEeoCode(eeoCode);
      editableAssociateInformation.setBusinessUnit(businessUnit);
      editableAssociateInformation.setLocationCode(locationCode);
      editableAssociateInformation.setManagerId(managerId);
      editableAssociateInformation.setManagerName("shah");
      editableAssociateInformation.setCostCenter(costCenter);
      XMLGregorianCalendar stDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("2020-09-24");

      XMLGregorianCalendar enDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("3000-01-01");

      editableAssociateInformation.setStartDate(stDate);
      editableAssociateInformation.setEndDate(enDate);
      createAssociateInput.setAssociate(editableAssociateInformation);
      String userNAme  = createAssociateInput.getAssociate().getUserName();
      System.out.println("userNAme::"+userNAme);
      CreateAssociateOutput createAssociateOutput = port.createAssociate(createAssociateInput);

      System.out.println("createAssociateOutput:::: "+createAssociateOutput.getResponse().getResponseCode());

    }catch(BaseFault | CiamSystemFault | ValidationFault |UserAlreadyExistsFault | UserAlreadyExistsWarning | DatatypeConfigurationException | MalformedURLException e) {
      if(e instanceof ValidationFault) {
        ValidationFault x = (ValidationFault) e;
        System.out.println(x.getFaultInfo().getFaultcode());
        System.out.println(x.getFaultInfo().getFaultstring());
      }
      e.printStackTrace();
    }


  }


  

	public void updateAssociate(Mpa userDetailsMap) throws  Exception {
		try {
			String firstName = "SIQDevFNAU";
			String middleName = "M";
			String lastName = "SIQDevLNAU";
			String email = "SIQDevFL@carefirsttes.com";
			String userName = "aaa4303";
			
			String name = "556680";
			String companyCode = "CMS";

			String businessUnitCode = "COMKT";
			String departmentCode = "14111";
			String locationCode = "OWML1";
			String jobTitle = "Manager";
			String eeoCode = "110";
			String managerId = "020076";
			String startDate = "2019-11-09";
			String endDate = "3000-01-01";
			String costCenter = "002K3";
			//UAAS u = new UAAS();
			 URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
             UAAS u = new UAAS(url);
			UAASPort port = u.getUAASPort();
			GenerateNextUserIDInput parameters = new GenerateNextUserIDInput();
			parameters.setUaasAdminUserID("aac5790");
		 GenerateNextUserIDOutput s = port.generateNextUserID(parameters);
		System.out.println(s.getAvailableUserID());

			UpdateAssociateInput updateAssociateInput = new UpdateAssociateInput();
			updateAssociateInput.setUaasUserName("aac5790");
			updateAssociateInput.setTsrNumber("SAILREQ");
			updateAssociateInput.setSubmitterUserName("aac5790");
			updateAssociateInput.setSkipSearch(false);
			updateAssociateInput.setRehire(false);

			EditableAssociateInformation editableAssociateInformation = new EditableAssociateInformation();

			FullName fullName = new FullName();
			fullName.setFirstName(firstName);
			fullName.setLastName(lastName);
			fullName.setMiddleInitial(middleName);
			editableAssociateInformation.setFullName(fullName);
			editableAssociateInformation.setPersonType(PersonType.ASSOCIATE);
			editableAssociateInformation.setPersonStatus(PersonStatus.ACTIVE);
			editableAssociateInformation.setEmailAddress(email);
			editableAssociateInformation.setGender(Gender.M);
			editableAssociateInformation.setSocialSecurityNumber("12345");
			editableAssociateInformation.setUserName(userName);
			editableAssociateInformation.setEmplId(name);
			BusinessUnit businessUnit = new BusinessUnit();
			businessUnit.setCompanyCode(companyCode);
			businessUnit.setBusinessUnitCode(businessUnitCode);
			businessUnit.setDepartmentCode(departmentCode);
			businessUnit.setDepartmentName("Care Management Admin");
			businessUnit.setLocationCode(locationCode);
			businessUnit.setJobTitle(jobTitle);
			businessUnit.setEeoCode(eeoCode);
			editableAssociateInformation.setBusinessUnit(businessUnit);
			editableAssociateInformation.setLocationCode(locationCode);
			editableAssociateInformation.setManagerId(managerId);
			editableAssociateInformation.setManagerName("shah");
			editableAssociateInformation.setCostCenter(costCenter);
			XMLGregorianCalendar stDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("2020-09-22");
			XMLGregorianCalendar enDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("3000-01-01");
			//editableAssociateInformation.setStartDate(stDate);
			editableAssociateInformation.setEndDate(enDate);
			updateAssociateInput.setAssociate(editableAssociateInformation);
			UpdateAssociateOutput updateAssocaiteOutput = port.updateAssociate(updateAssociateInput);
			System.out.println("createAssociateOutput:::: " + updateAssocaiteOutput.getResponse());

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		}
	}


	public void terminatePerson(Map userDetailsMap) throws MalformedURLException, UserNotExistFault {
		try {
			String firstName = "SIQISMTesFNAR";
			String middleName = "M";
			String lastName = "SIQISMTesLNAR";
			String email = "SIQISMTesLNAR@carefirsttest.com";
			String userName = "aaa4248";

			String name = "aaa5255";
			String companyCode = "CMS";

			String businessUnitCode = "COMKT";
			String departmentCode = "14111";
			String locationCode = "OWML1";
			String jobTitle = "Manager";
			String eeoCode = "110";
			String managerId = "66000";
			String startDate = "2019-12-09";
			String endDate = "3000-01-01";
			String costCenter = "002K3";
			String empID = "778866";
			URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
			UAAS u = new UAAS(url);
			UAASPort port = u.getUAASPort();
		

			TerminatePersonInput terminatePersonInput = new TerminatePersonInput();
			terminatePersonInput.setUaasUserName("aac5790");
			terminatePersonInput.setTsrNumber("SAILREQ");
			terminatePersonInput.setUserName("aaa4303");
			//terminatePersonInput.setAdUserName("");
			//terminatePersonInput.setUnixUserName("");
			terminatePersonInput.setEmailsUserName("SIQDevFL@carefirsttes.com");

			TerminatePersonOutput terminatePersonOutput = port.terminatePerson(terminatePersonInput);

			System.out.println("terminatePersonOutput:::: " + terminatePersonOutput.getResponse().getResponseCode());

		} catch (BaseFault | CiamSystemFault | ValidationFault e) {
			if (e instanceof ValidationFault) {
				ValidationFault x = (ValidationFault) e;
				System.out.println(x.getFaultInfo().getFaultcode());
				System.out.println(x.getFaultInfo().getFaultstring());
			}
			e.printStackTrace();
		}
	}


	public void suspendPerson main(userDetailsMap) throws MalformedURLException, UserNotExistFault {
		try {
			String firstName = "SIQISMTesFNAR";
			String middleName = "M";
			String lastName = "SIQISMTesLNAR";
			String email = "SIQISMTesLNAR@carefirsttest.com";
			String userName = "aaa4248";

			String name = "aaa5255";
			String companyCode = "CMS";

			String businessUnitCode = "COMKT";
			String departmentCode = "14111";
			String locationCode = "OWML1";
			String jobTitle = "Manager";
			String eeoCode = "110";
			String managerId = "66000";
			String startDate = "2019-12-09";
			String endDate = "3000-01-01";
			String costCenter = "002K3";
			String empID = "778866";
			URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
			UAAS u = new UAAS(url);
			UAASPort port = u.getUAASPort();
			

			SuspendPersonInput suspendPerson = new SuspendPersonInput();
			suspendPerson.setUaasUserName("aac5790");
			suspendPerson.setTsrNumber("SAILREQ");
			suspendPerson.setUserName("");
			suspendPerson.setReasonCode("");
			suspendPerson.setSubmitterUserName("");

		SuspendPersonOutput suspendPersonOutput = port.suspendPerson(suspendPerson);

			System.out.println("terminatePersonOutput:::: " + suspendPersonOutput.getResponse().getResponseCode());

		} catch (BaseFault | CiamSystemFault | ValidationFault e) {
			if (e instanceof ValidationFault) {
				ValidationFault x = (ValidationFault) e;
				System.out.println(x.getFaultInfo().getFaultcode());
				System.out.println(x.getFaultInfo().getFaultstring());
			}
			e.printStackTrace();
		}
	}



	public  void reactivatePerson(Map userDetailsMap)
			throws MalformedURLException, UserNotExistFault, DatatypeConfigurationException {
		try {
			String firstName = "SIQISMTesFNAR";
			String middleName = "M";
			String lastName = "SIQISMTesLNAR";
			String email = "SIQISMTesLNAR@carefirsttest.com";
			String userName = "aaa4248";

			String name = "aaa5255";
			String companyCode = "CMS";

			String businessUnitCode = "COMKT";
			String departmentCode = "14111";
			String locationCode = "OWML1";
			String jobTitle = "Manager";
			String eeoCode = "110";
			String managerId = "66000";
			String startDate = "2019-12-09";
			String endDate = "3000-01-01";
			String costCenter = "002K3";
			String empID = "778866";
			URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
			UAAS u = new UAAS(url);
			UAASPort port = u.getUAASPort();
			
			XMLGregorianCalendar enDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("3000-01-01");

			ReactivatePersonInput reactivatePersonInput = new ReactivatePersonInput();
			reactivatePersonInput.setUaasUserName("aac5790");
			reactivatePersonInput.setTsrNumber("SAILREQ");
			reactivatePersonInput.setUserName("");
			reactivatePersonInput.setEndDate(enDate);
			reactivatePersonInput.setSubmitterUserName("");

			ReactivatePersonOutput suspendPersonOutput = port.reactivatePerson(reactivatePersonInput);

			System.out.println("terminatePersonOutput:::: " + suspendPersonOutput.getResponse().getResponseCode());

		} catch (BaseFault | CiamSystemFault | ValidationFault e) {
			if (e instanceof ValidationFault) {
				ValidationFault x = (ValidationFault) e;
				System.out.println(x.getFaultInfo().getFaultcode());
				System.out.println(x.getFaultInfo().getFaultstring());
			}
			e.printStackTrace();
		}
	}


	public  void updateContractor(String[] args)
			throws  Exception {
		try {
			String firstName = "SIQDevFNAU";
			String middleName = "M";
			String lastName = "SIQDevLNAU";
			String email = "SIQDevFL@carefirsttes.com";
			String userName = "aaa4303";
			
			String name = "556680";
			String companyCode = "CMS";

			String businessUnitCode = "COMKT";
			String departmentCode = "14111";
			String locationCode = "OWML1";
			String jobTitle = "Manager";
			String eeoCode = "110";
			String managerId = "020076";
			String startDate = "2019-11-09";
			String endDate = "3000-01-01";
			String costCenter = "002K3";
			//UAAS u = new UAAS();
			 URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
             UAAS u = new UAAS(url);
			UAASPort port = u.getUAASPort();
			

			UpdateAssociateInput updateAssociateInput = new UpdateAssociateInput();
			updateAssociateInput.setUaasUserName("aac5790");
			updateAssociateInput.setTsrNumber("SAILREQ");
			updateAssociateInput.setSubmitterUserName("aac5790");
			updateAssociateInput.setSkipSearch(false);
			updateAssociateInput.setRehire(false);

			EditableAssociateInformation editableAssociateInformation = new EditableAssociateInformation();

			FullName fullName = new FullName();
			fullName.setFirstName(firstName);
			fullName.setLastName(lastName);
			fullName.setMiddleInitial(middleName);
			editableAssociateInformation.setFullName(fullName);
			editableAssociateInformation.setPersonType(PersonType.ASSOCIATE);
			editableAssociateInformation.setPersonStatus(PersonStatus.ACTIVE);
			editableAssociateInformation.setEmailAddress(email);
			editableAssociateInformation.setGender(Gender.M);
			editableAssociateInformation.setSocialSecurityNumber("12345");
			editableAssociateInformation.setUserName(userName);
			editableAssociateInformation.setEmplId(name);
			BusinessUnit businessUnit = new BusinessUnit();
			businessUnit.setCompanyCode(companyCode);
			businessUnit.setBusinessUnitCode(businessUnitCode);
			businessUnit.setDepartmentCode(departmentCode);
			businessUnit.setDepartmentName("Care Management Admin");
			businessUnit.setLocationCode(locationCode);
			businessUnit.setJobTitle(jobTitle);
			businessUnit.setEeoCode(eeoCode);
			editableAssociateInformation.setBusinessUnit(businessUnit);
			editableAssociateInformation.setLocationCode(locationCode);
			editableAssociateInformation.setManagerId(managerId);
			editableAssociateInformation.setManagerName("shah");
			editableAssociateInformation.setCostCenter(costCenter);
			XMLGregorianCalendar stDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("2020-09-22");
			XMLGregorianCalendar enDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("3000-01-01");
			//editableAssociateInformation.setStartDate(stDate);
			editableAssociateInformation.setEndDate(enDate);
			updateAssociateInput.setAssociate(editableAssociateInformation);
			UpdateAssociateOutput updateAssocaiteOutput = port.updateAssociate(updateAssociateInput);
			System.out.println("createAssociateOutput:::: " + updateAssocaiteOutput.getResponse());

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		}
	}
  
  

       public  void createContractor(userDetailsMap) throws MalformedURLException  {
             try{
             String firstName = "SIQISMTesFNAR";
             String middleName = "M";
             String lastName = "SIQISMTesLNAR";
             String email = "SIQISMTesLNAR@carefirsttest.com";
             String userName = "aaa4248";

             String name = "aaa5255";
             String companyCode = "CMS";

             String businessUnitCode = "COMKT";
             String departmentCode = "14111";
             String locationCode = "OWML1";
             String jobTitle = "Manager";
             String eeoCode = "110";
             String managerId = "66000";
             String startDate = "2019-12-09";
             String endDate = "3000-01-01";
             String costCenter = "002K3";
             String empID = "778866";
             URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
             UAAS u = new UAAS(url);
             UAASPort port = u.getUAASPort();
             CreateContractorInput createContratorInput = new CreateContractorInput();
             createContratorInput.setUaasUserName("aac5790");
             createContratorInput.setTsrNumber("SAILREQ");
             createContratorInput.setSubmitterUserName("aac5790");
             createContratorInput.setSkipSearch(false);
             
             
             EditableContractorInformation editableContractorInformation = new EditableContractorInformation();
             
             FullName fullName = new FullName();
             fullName.setFirstName(firstName);
             fullName.setLastName(lastName);
             fullName.setMiddleInitial(middleName);
             editableContractorInformation.setFullName(fullName);
             editableContractorInformation.setPersonType(PersonType.CONTRACTOR);
             editableContractorInformation.setPersonStatus(PersonStatus.ACTIVE);
             editableContractorInformation.setEmailAddress(email);
             editableContractorInformation.setGender(Gender.M);
             editableContractorInformation.setSocialSecurityNumber("1234589");
             editableContractorInformation.setUserName(name);
             editableContractorInformation.setPassword("");

             editableContractorInformation.setEmplId(empID);
             BusinessUnit businessUnit = new BusinessUnit();
             businessUnit.setCompanyCode(companyCode);
              businessUnit.setBusinessUnitCode(businessUnitCode);
             businessUnit.setDepartmentCode(departmentCode);
             businessUnit.setDepartmentName("Care Management Admin");
             businessUnit.setLocationCode(locationCode);
             businessUnit.setJobTitle(jobTitle);
             businessUnit.setEeoCode(eeoCode);
             editableContractorInformation.setBusinessUnit(businessUnit);
             editableContractorInformation.setLocationCode(locationCode);
             editableContractorInformation.setManagerId("66000");
             editableContractorInformation.setHiringManager("");
             editableContractorInformation.setContractorId("");
             editableContractorInformation.setSupplierName("");
             editableContractorInformation.setCostCenter(costCenter);
             XMLGregorianCalendar stDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("2020-09-24");
             
             XMLGregorianCalendar enDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("3000-01-01");
             
             editableContractorInformation.setStartDate(stDate);
             editableContractorInformation.setEndDate(enDate);
             createContratorInput.setContractor(editableContractorInformation);
       String userNAme  = createContratorInput.getContractor().getUserName();
       System.out.println("userNAme::"+userNAme);
          CreateContractorOutput createContractorOutput = port.createContractor(createContratorInput);
          
       System.out.println("createAssociateOutput:::: "+createContractorOutput.getResponse().getResponseCode());
             
             }catch(BaseFault | CiamSystemFault | ValidationFault |UserAlreadyExistsFault | UserAlreadyExistsWarning | DatatypeConfigurationException  e) {
            	 if(e instanceof ValidationFault) {
            		 ValidationFault x = (ValidationFault) e;
            		 System.out.println(x.getFaultInfo().getFaultcode());
            		 System.out.println(x.getFaultInfo().getFaultstring());
            	 }
            	 e.printStackTrace();
             }
       }
  

	public  void updateContrator(userDetailsMap)
			throws  Exception {
		try {
			String firstName = "SIQDevFNAU";
			String middleName = "M";
			String lastName = "SIQDevLNAU";
			String email = "SIQDevFL@carefirsttes.com";
			String userName = "aaa4303";
			
			String name = "556680";
			String companyCode = "CMS";

			String businessUnitCode = "COMKT";
			String departmentCode = "14111";
			String locationCode = "OWML1";
			String jobTitle = "Manager";
			String eeoCode = "110";
			String managerId = "020076";
			String startDate = "2019-11-09";
			String endDate = "3000-01-01";
			String costCenter = "002K3";
			//UAAS u = new UAAS();
			 URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
             UAAS u = new UAAS(url);
			UAASPort port = u.getUAASPort();
			

			UpdateContractorInput updateContratcorInput = new UpdateContractorInput();
			updateContratcorInput.setUaasUserName("aac5790");
			updateContratcorInput.setTsrNumber("SAILREQ");
			updateContratcorInput.setSubmitterUserName("aac5790");
			updateContratcorInput.setSkipSearch(false);
			updateContratcorInput.setRehire(false);

			EditableContractorInformation editableContractorInformation = new EditableContractorInformation();

			FullName fullName = new FullName();
			fullName.setFirstName(firstName);
			fullName.setLastName(lastName);
			fullName.setMiddleInitial(middleName);
			editableContractorInformation.setFullName(fullName);
			editableContractorInformation.setPersonType(PersonType.CONTRACTOR);
			editableContractorInformation.setPersonStatus(PersonStatus.ACTIVE);
			editableContractorInformation.setEmailAddress(email);
			editableContractorInformation.setGender(Gender.M);
			editableContractorInformation.setSocialSecurityNumber("12345");
			editableContractorInformation.setUserName(userName);
			editableContractorInformation.setEmplId(name);
			BusinessUnit businessUnit = new BusinessUnit();
			businessUnit.setCompanyCode(companyCode);
			businessUnit.setBusinessUnitCode(businessUnitCode);
			businessUnit.setDepartmentCode(departmentCode);
			businessUnit.setDepartmentName("Care Management Admin");
			businessUnit.setLocationCode(locationCode);
			businessUnit.setJobTitle(jobTitle);
			businessUnit.setEeoCode(eeoCode);
			editableContractorInformation.setBusinessUnit(businessUnit);
			editableContractorInformation.setLocationCode(locationCode);
			editableContractorInformation.setManagerId(managerId);
			//editableContractorInformation.setManagerName("shah");
			editableContractorInformation.setSupplierName("");
			editableContractorInformation.setCostCenter(costCenter);
			XMLGregorianCalendar stDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("2020-09-22");
			XMLGregorianCalendar enDate = DatatypeFactory.newInstance().newXMLGregorianCalendar("3000-01-01");
			//editableAssociateInformation.setStartDate(stDate);
			editableContractorInformation.setEndDate(enDate);
			updateContratcorInput.setContractor(editableContractorInformation);;
			UpdateContractorOutput updateContractorOutput = port.updateContractor(updateContratcorInput);
			System.out.println("updateContractorOutput:::: " + updateContractorOutput.getResponse());

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		}
	}

  </Source>
  </Rule>
  <Rule created="1604263671619" id="0a111e5875691e4f81758590f7432705" language="beanshell" modified="1611328868747" name="CF-CIAM-CreateProvision-Rule" type="JDBCOperationProvisioning">
    <Description>
An example Provisioning rule for the JDBC Connector that
disables the Account(s) in the database.
</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="context">
          <Description>
A sailpoint.api.SailPointContext object that can be used to
query the database to aid in provisioning.
</Description>
        </Argument>
        <Argument name="application">
          <Description>
The Application the account is being provisioned for.
</Description>
        </Argument>
        <Argument name="schema">
          <Description>
Schema representing the data being provisioned.
</Description>
        </Argument>
        <Argument name="connection">
          <Description>
Connection to the application database.
</Description>
        </Argument>
        <Argument name="plan">
          <Description>
The ProvisioningPlan created against the application.
</Description>
        </Argument>
        <Argument name="log">
          <Description>
log for debugging
</Description>
        </Argument>
        <Argument name="request">
          <Description>
request for specific operation
</Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>

import java.util.List;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.api.IdentityService;
import sailpoint.object.QueryOptions;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.Operation;
 import org.apache.log4j.Logger;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Attributes;

  import java.util.ArrayList;
  import java.util.Arrays;    
Logger log = Logger.getLogger("com.carefirst.CIAMUsersVault-Logs");
 

log.info("-------------------CIAM Create user Started-------------------"+plan);
String name = request.getNativeIdentity();
System.out.println("Printing Provisioning plan" +plan.toXml());
ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
/*PreparedStatement statement = null;
String preparedStatementQuery = "insert into CIAM_USERS(emp_id,user_id,rolename) values(?,?,?)";
log.info("preparedStatementQuery: " + preparedStatementQuery);*/

String employeeID = request.getNativeIdentity();
HashMap userDetailsMap = generateUserDetaislMap(employeeID);
  HashMap resultMap = new HashMap();
  Attributes auditAttributes = new Attributes();
  String source = "";
 Identity identity = context.getObjectByName(Identity.class , employeeID);
          System.out.println(" In Create Provisioin Rule Native Identity : " +identity);
  String employeeType = "";
  if(identity.getAttribute(ATR_EMPLOYEETYPE) != null){
    employeeType = identity.getAttribute(ATR_EMPLOYEETYPE);
  }  

        
  


String columnNames = "emp_id,user_id,display_name,firstname,lastname,email,password,employee_type,alter_empid,middle_name,business_title,department_id,description,job_code,manager,location,company,business_unit,cost_center,mgr_pos_num,phone,job_title,eeo_job_group,employee_status,start_date,end_date,action,operation,rolename,entitlement,type,supplier_name,contractor_id,isrevoked,extended1,extended2,extended3,extended4,extended5,extended6,extended7,extended8,extended9,extended10";
  ArrayList columnList= new ArrayList(Arrays.asList(columnNames.split(",")));
  System.out.println(" columnNames:: : " + columnNames);
			
  System.out.println("userDetailsMap" +userDetailsMap);
  
			PreparedStatement statement = null;
            String preparedStatementQuery = "insert into CIAM_USERS ("+columnNames+") values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			try {
            	  			
                
                //loggerObj.info("connection: " + connection);
            	System.out.println(columnList.size());
                statement = connection.prepareStatement(preparedStatementQuery);
                for(int i=0; i&lt;columnList.size();i++)
                {
                  String value ="";
                  if(userDetailsMap.get(columnList.get(i))!=null)
                    value = userDetailsMap.get(columnList.get(i)).toString();
                  statement.setString (i+1, value);
                }
                //loggerObj.info("Before Execuite"+preparedStatementQuery);
                statement.executeUpdate();
				log.info("-------------------CIAM  Create user Successful-------------------");
				System.out.println("-------------------CIAM  Create user Successful-------------------");
				result.setStatus( ProvisioningResult.STATUS_COMMITTED );
        	if(employeeType.equalsIgnoreCase(STR_EMPLOYEE) @or employeeType.equalsIgnoreCase("Employee") @or employeeType.equalsIgnoreCase(STR_FEPOCASSOCIATE)){
            System.out.println(" Start Create Asscociate webservice Call : "+employeeID);
            System.out.println(" Start Create Asscociate webservice Call Use rDetails map: "+userDetailsMap);
            resultMap = createassociate(userDetailsMap);
            
		System.out.println("In Create Associate afterwebservice call Result Map"+resultMap);
		int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("Creat Associate  SuccessIn if");
  }else{
    System.out.println("ELSE Creat Associate Failed:::");
      resultMap.put("User ID",userDetailsMap.get("user_id"));
     resultMap.put("Employee ID",userDetailsMap.get("emp_id"));
     resultMap.put("UAAS Web Service name","createAssociate");
   		sendCiamFailureNotication(resultMap);
     source = "createAssociate";
    auditAttributes.put("User ID",userDetailsMap.get("user_id"));
     auditAttributes.put("Employee ID",userDetailsMap.get("emp_id"));
     auditAttributes.put("UAAS Web Service name","createAssociate");
    createCiamAuditEvent(source,employeeID,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeID,null,null,auditAttributes,null,null,null,null);
  }
            
          }else{
            resultMap = createContractor(userDetailsMap);
            int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("Creat Contractor  SuccessIn if");
  }else{
    System.out.println("ELSE Creat Contractor Failed:::");
    resultMap.put("User ID",userDetailsMap.get("user_id"));
     resultMap.put("Employee ID",userDetailsMap.get("emp_id"));
     resultMap.put("UAAS Web Service name","createContractor");
    sendCiamFailureNotication(resultMap);
     source = "createContractor";
    auditAttributes.put("User ID",userDetailsMap.get("user_id"));
     auditAttributes.put("Employee ID",userDetailsMap.get("emp_id"));
     auditAttributes.put("UAAS Web Service name","createContractor");
    createCiamAuditEvent(source,employeeID,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeID,null,null,auditAttributes,null,null,null,null);
  }
          }
                
              } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
				result.setStatus(ProvisioningResult.STATUS_FAILED);
				result.addError( e );
              }
  
  log.info("-------------------CIAM Create user Completed-------------------");




</Source>
  </Rule>
  <Rule created="1604263671735" id="0a111e5875691e4f81758590f7b72706" language="beanshell" modified="1608187956910" name="CF-CIAM-DeleteProvision-Rule" type="JDBCOperationProvisioning">
    <Description>An example Provisioning rule for the JDBC Connector that deletes the Account(s) from the database.</Description>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>The application whose data file is being processed.</Description>
        </Argument>
        <Argument name="schema">
          <Description>The Schema currently in use.</Description>
        </Argument>
        <Argument name="connection">
          <Description>A connection object to connect to database.</Description>
        </Argument>
        <Argument name="plan">
          <Description>The ProvisioningPlan created against the JDBC application.</Description>
        </Argument>
        <Argument name="request">
          <Description>The ProvisioningRequest created against the JDBC application.</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.sql.*;
import java.sql.Statement;
import sailpoint.object.ProvisioningResult;
ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
Statement stmt=null;
String user = request.getNativeIdentity();
System.out.println(" In CIAM Delete Provisioning Rule user is : " +user);
try{
String query = "delete from CIAM_USERS where emp_id='" + user + "'";
stmt = connection.createStatement();
stmt.execute(query);
}catch(Exception e){
result.addError(e.getMessage());
result.setStatus(ProvisioningResult.STATUS_FAILED);
}finally{
if(stmt != null)
stmt.close();
}
return result;</Source>
  </Rule>
  <Rule created="1604263671849" id="0a111e5875691e4f81758590f8292707" language="beanshell" modified="1615368090556" name="CF-CIAM-DisableProvision-Rule" type="JDBCOperationProvisioning">
    <Description>An example Provisioning rule for the JDBC Connector that disables the Account(s) in the database.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>The application whose data file is being processed.</Description>
        </Argument>
        <Argument name="schema">
          <Description>The Schema currently in use.</Description>
        </Argument>
        <Argument name="connection">
          <Description>A connection object to connect to database.</Description>
        </Argument>
        <Argument name="plan">
          <Description>The ProvisioningPlan created against the JDBC application.</Description>
        </Argument>
        <Argument name="request">
          <Description>The ProvisioningRequest created against the JDBC application.</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.sql.*;
import java.sql.Statement;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Identity;
import java.util.HashMap;
import sailpoint.object.Attributes;
import java.util.ArrayList;
import java.util.Arrays; 
import sailpoint.object.EmailTemplate;
import sailpoint.object.EmailOptions;
import java.util.Calendar;
import java.util.Date;
import java.text.SimpleDateFormat; 
import org.apache.log4j.Logger;  
Logger log = Logger.getLogger("com.carefirst.CIAMDisableProvision-Logs");
ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
Statement stmt=null;
String query = "";
String employeeId = request.getNativeIdentity();
   HashMap resultMap = new HashMap();
  Attributes auditAttributes = new Attributes();
  String source = "";
  log.info("In CIAM Disable Rule employeeId is:::"+employeeId);

    Identity identity = context.getObjectByName(Identity.class, employeeId);
	String action = "";
  String userName = "";
  String email = "";
  boolean matched = false;
  Date actualeffdate = new Date();
  if(identity.getAttribute("userid") != null){
              userName = identity.getAttribute("userid");
            }
  if(null != identity.getAttribute("action")){
    action = identity.getAttribute("action");
  }
  if(identity.getAttribute("email") != null){
              email = identity.getAttribute("email");
            }
  log.info("In CIAM Disable Rule userName is:::"+userName);
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy");
		String effDate=identity.getAttribute("effdt");
  log.info("In Suspend Scenario effDate is:::"+effDate);
		if(null != effdt){
		 actualeffdate=  sdf.parse(effDate);
		 }
		Date currentDate = new Date();
        String currentDateString= sdf.format(currentDate);
        Date actualCurrentDate=  sdf.parse(currentDateString);
		if(actualCurrentDate.compareTo(actualeffdate) >= 0){
				matched=true;
		}
try{
  log.info("In Suspend Scenario matched value is:::"+matched);
  
  if((action.equalsIgnoreCase("LOA") || action.equalsIgnoreCase("PLA")) &amp;&amp; matched){
    log.info("In CIAM Disable Rule Sus suspendPerson Method:::"+userName);
    resultMap = suspendPerson(userName);
    int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	log.info("suspendPerson faultCode:::"+faultCode);
	log.info("suspendPersonfaultCode:::"+faultReason);
	if(faultCode == 9000){
		query = "UPDATE CIAM_USERS SET isrevoked='Y' where emp_id='" + employeeId+ "'";
stmt = connection.createStatement();
stmt.execute(query);
  }else{
    log.info("In suspendPerson Failed:::");
    source = "suspendPerson";
		resultMap.put("User ID",userName);
     resultMap.put("Employee ID",employeeId);
     resultMap.put("UAAS Web Service name",source);
    sendCiamFailureNotication(resultMap);
     
    auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",employeeId);
     auditAttributes.put("UAAS Web Service name",source);
    createCiamAuditEvent(source,employeeId,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeId,null,null,auditAttributes,null,null,null,null);
  }
  }else if(action.equalsIgnoreCase(STR_ACTION_TER) || action.equalsIgnoreCase(STR_ACTION_COM) || action.equalsIgnoreCase(STR_ACTION_TWP) || action.equalsIgnoreCase(STR_ACTION_RWP) || action.equalsIgnoreCase(STR_ACTION_RET)){
    resultMap = terminatePerson(userName, email);
    int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	log.info("terminatePerson faultCode:::"+faultCode);
	log.info(" terminatePerson faultCode:::"+faultReason);
	if(faultCode == 9000){
		log.info("In terminatePerson Success:");
		query = "UPDATE CIAM_USERS SET isrevoked='Y' where emp_id='" + employeeId+ "'";
		stmt = connection.createStatement();
		stmt.execute(query);
  }else{
    log.info("In terminatePerson Failed:::::");
    source = "terminatePerson";
		resultMap.put("User ID",userName);
     resultMap.put("Employee ID",employeeId);
     resultMap.put("UAAS Web Service name",source);
    sendCiamFailureNotication(resultMap);
     
    auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",employeeId);
     auditAttributes.put("UAAS Web Service name",source);
    auditAttributes.put("Email",email);
    createCiamAuditEvent(source,employeeId,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeId,null,null,auditAttributes,null,null,null,null);
  }
  }
}catch(Exception e){
result.addError(e.getMessage());
result.setStatus(ProvisioningResult.STATUS_FAILED);
}finally{
if(stmt!=null)
stmt.close();
}
return result;</Source>
  </Rule>
  <Rule created="1604263671963" id="0a111e5875691e4f81758590f89b2708" language="beanshell" modified="1610479155674" name="CF-CIAM-EnableProvision-Rule" type="JDBCOperationProvisioning">
    <Description>
An example Provisioning rule for the JDBC Connector that
enables the Account(s) in the database.
</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f817585910dbd2732" name="CF-CIAM-WS-UpdateTimApplicationRolesAssignment-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="context">
          <Description>
A sailpoint.api.SailPointContext object that can be used to
query the database to aid in provisioning.
</Description>
        </Argument>
        <Argument name="application">
          <Description>
The Application the account is being provisioned for.
</Description>
        </Argument>
        <Argument name="schema">
          <Description>
Schema representing the data being provisioned.
</Description>
        </Argument>
        <Argument name="connection">
          <Description>
Connection to the application database.
</Description>
        </Argument>
        <Argument name="plan">
          <Description>
The ProvisioningPlan created against the application.
</Description>
        </Argument>
        <Argument name="log">
          <Description>
log for debugging
</Description>
        </Argument>
        <Argument name="request">
          <Description>
request for specific operation
</Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>

import java.sql.*;
import java.sql.Statement;
import sailpoint.object.ProvisioningResult;
 import sailpoint.object.Identity;
  import java.util.HashMap;
  import sailpoint.object.Bundle;	
  
  import java.util.List;
  import sailpoint.object.Attributes;

  import java.util.ArrayList;
  import java.util.Arrays; 
import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;  
ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
Statement stmt=null;
  
HashMap resultMap = new HashMap();
  Attributes auditAttributes = new Attributes();
  String source = "";
    HashMap businessRoleDetails = new HashMap();	
  HashMap roleDetails = new HashMap();	
String employeeId = request.getNativeIdentity();
    Identity identity = context.getObjectByName(Identity.class, employeeId);
  HashMap userDetailsMap = generateUserDetaislMap(employeeId);
	String action = "";
  String userName = "";
  String email = "";
  if(identity.getAttribute("userid") != null){
              userName = identity.getAttribute("userid");
            }
  if(null != identity.getAttribute("action")){
    action = identity.getAttribute("action");
  }
  if(identity.getAttribute("email") != null){
              email = identity.getAttribute("email");
            }
   String employeeType = "";
  if(identity.getAttribute(ATR_EMPLOYEETYPE) != null){
    employeeType = identity.getAttribute(ATR_EMPLOYEETYPE);
  }
  String employeestatus = "";
  if(identity.getAttribute("employeestatus") != null){
              employeestatus = identity.getAttribute("employeestatus");
            }
try{
String query = "UPDATE CIAM_USERS SET isrevoked='N' where emp_id='"+employeeId+"'";
stmt = connection.createStatement();
stmt.execute(query);
  if(action.equalsIgnoreCase("RFD") @or action.equalsIgnoreCase("RFL") @or ((null != employeestatus @and employeestatus.equalsIgnoreCase("A")) @and (action.equalsIgnoreCase("HIR") @or action.equalsIgnoreCase("ADD")))) {
    resultMap = reactivatePerson(userName);
    System.out.println("reactivatePerson Result Map:::"+resultMap);
    int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("reactivatePerson Success:::");
  }else{
    resultMap.put("User ID",userName);
     resultMap.put("Employee ID",employeeId);
     resultMap.put("UAAS Web Service name","reactivatePerson");
    sendCiamFailureNotication(resultMap);
     source = "reactivatePerson";
    auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",employeeId);
     auditAttributes.put("UAAS Web Service name","reactivatePerson");
    createCiamAuditEvent(source,employeeId,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeId,null,null,auditAttributes,null,null,null,null);
  }
  }else if(action.equalsIgnoreCase("REH")){ 
    boolean isRehire = true;
    if(employeeType.equalsIgnoreCase(STR_EMPLOYEE) @or employeeType.equalsIgnoreCase("Employee") @or employeeType.equalsIgnoreCase(STR_FEPOCASSOCIATE)){
    System.out.println("In Start provisioinnrule updateAssociate" +employeeType);        
      resultMap = updateAssociate(userDetailsMap, isRehire);
      int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("In Rehire  updateAssociate Success:::");
        List detectedRoleList = identity.getDetectedRoles();	
		for (Bundle detectedRole : detectedRoleList) {	
			String roleName = detectedRole.getName();	
			if (null != roleName) {	
				if (roleName.startsWith("CIAMRoleSync_")) {	
					String removeCIAMRoleSync = roleName.replace("CIAMRoleSync_", "");	
					String removeITole = removeCIAMRoleSync.replace("_ITRole", "");	
					System.out.println("removeITole:::" + removeITole);	
          businessRoleDetails = businessRoleDetailsMap(userName, removeITole, STR_ACTION_ADD);	
       		updateBusinessRoleAssignement(businessRoleDetails);	
				} 	
			}	
		}	
    for (Bundle detectedRole : detectedRoleList) {
      String roleName = detectedRole.getName();	
      String removeITrole = roleName.replace("_ITRole", "");	
      Bundle itRoleObject =  context.getObjectByName(Bundle.class,removeITrole);
    if (null != itRoleObject @and null != itRoleObject.getAttribute("assignment")) {	
					if (null != roleName @and roleName.endsWith("_ITRole") @and itRoleObject.getAttribute("assignment").equalsIgnoreCase("Discretionary_IT")) {	
            	
           roleDetails= roleDetailsMap(userName, removeITrole, STR_ACTION_ADD);	
					updateTimApplicationRolesAssignmentInput(roleDetails);	
            	
					}	
				}
    }

  }else{
   resultMap.put("User ID",userName);
     resultMap.put("Employee ID",employeeId);
     resultMap.put("UAAS Web Service name","isrehireAssociate");
    sendCiamFailureNotication(resultMap);
     source = "isrehireAssociate";
    auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",employeeId);
     auditAttributes.put("UAAS Web Service name","isrehireAssociate");
    createCiamAuditEvent(source,employeeId,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeId,null,null,auditAttributes,null,null,null,null);
  }
          }else{
             resultMap = updateContractor(userDetailsMap, isRehire);
       int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("In Rehire  Contractor Success:::");
    List detectedRoleList = identity.getDetectedRoles();	
		for (Bundle detectedRole : detectedRoleList) {	
			String roleName = detectedRole.getName();	
			if (null != roleName) {	
				if (roleName.startsWith("CIAMRoleSync_")) {	
					String removeCIAMRoleSync = roleName.replace("CIAMRoleSync_", "");	
					String removeITole = removeCIAMRoleSync.replace("_ITRole", "");	
					System.out.println("removeITole:::" + removeITole);	
          businessRoleDetails = businessRoleDetailsMap(userName, removeITole, STR_ACTION_ADD);	
       		updateBusinessRoleAssignement(businessRoleDetails);	
				} 	
			}	
		}	
    for (Bundle detectedRole : detectedRoleList) {
      String roleName = detectedRole.getName();	
    if (null != detectedRole @and null != detectedRole.getAttribute("assignment")) {	
					if (null != roleName @and roleName.endsWith("_ITRole") @and detectedRole.getAttribute("assignment").equalsIgnoreCase("Discretionary_IT")) {	
            	
            String removeITrole = roleName.replace("_ITRole", "");	
            roleDetails= roleDetailsMap(userName, removeITrole, STR_ACTION_ADD);	
					updateTimApplicationRolesAssignmentInput(roleDetails);	
            	
					}	
				}
    }
  }else{
    System.out.println("ELSE In Rehire updateAssociate Failed:::");
     resultMap.put("User ID",userName);
     resultMap.put("Employee ID",employeeId);
     resultMap.put("UAAS Web Service name","isrehireContractor");
    sendCiamFailureNotication(resultMap);
     source = "isrehireContractor";
    auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",employeeId);
     auditAttributes.put("UAAS Web Service name","isrehireAssociate");
    createCiamAuditEvent(source,employeeId,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,employeeId,null,null,auditAttributes,null,null,null,null);
  }
            }
    
  }
}catch(Exception e){
result.addError(e.getMessage());
result.setStatus(ProvisioningResult.STATUS_FAILED);
}finally{
if(stmt!=null)
stmt.close();
}
return result;

</Source>
  </Rule>
  <Rule created="1604263672086" id="0a111e5875691e4f81758590f9162709" language="beanshell" modified="1617122073269" name="CF-CIAM-ModifyProvision-Rule" type="JDBCOperationProvisioning">
    <Description>An example Provisioning rule for the JDBC Connector that modify the Account(s) in the database.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>The application whose data file is being processed.</Description>
        </Argument>
        <Argument name="schema">
          <Description>The Schema currently in use.</Description>
        </Argument>
        <Argument name="connection">
          <Description>A connection object to connect to database.</Description>
        </Argument>
        <Argument name="plan">
          <Description>The ProvisioningPlan created against the JDBC application.</Description>
        </Argument>
        <Argument name="request">
          <Description>The ProvisioningRequest created against the JDBC application.</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.sql.*;
import java.sql.Statement;
  import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningResult;
  import java.util.HashMap;
  import sailpoint.object.Attributes;

  import java.util.ArrayList;
  import java.util.Arrays; 
import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;  
ProvisioningResult result = new ProvisioningResult();
result.setStatus(ProvisioningResult.STATUS_COMMITTED);
Statement stmt=null;
HashMap userDetailsMap = new HashMap();
  HashMap resultMap = new HashMap();
  
  Attributes auditAttributes = new Attributes();
  String source = "";
			
String EmployeeID = request.getNativeIdentity();
   System.out.println(" In Modify provisioin rule ::EmployeeID : " +EmployeeID);

Identity identity = context.getObjectByName(Identity.class , EmployeeID);
          System.out.println(" Native Identity : " +identity);
  String employeeType = "";
  if(identity.getAttribute(ATR_EMPLOYEETYPE) != null){
    employeeType = identity.getAttribute(ATR_EMPLOYEETYPE);
  }
  System.out.println(" employeeType:: : " +employeeType);
  				String userName= ""; 
            if(identity.getAttribute("userid") != null){
              userName = identity.getAttribute("userid");
            }
  System.out.println(" userName:: : " +userName);
  String firstName = "";
            if(identity.getAttribute("firstname") != null){
              firstName =  identity.getAttribute("firstname");
            }
  System.out.println(" firstName:: : " +firstName);
            String lastName = "";
            if(identity.getAttribute("lastname") != null){
              lastName = identity.getAttribute("lastname");
            }
  System.out.println(" lastName:: : " +lastName);
            String email= ""; 
            if(identity.getAttribute("email") != null){
              email = identity.getAttribute("email");
            }  
            String middleName = "";
            if(identity.getAttribute("middlename") != null){
              middleName = identity.getAttribute("middlename");
            }  
            String businessUnitCode="";
            if(identity.getAttribute("businessunit") != null){
              businessUnitCode = identity.getAttribute("businessunit");
            }
            String departmentCode="";
            if(identity.getAttribute("deptid") != null){
              departmentCode = identity.getAttribute("deptid");
            }
            String jobTitle="";
            if(identity.getAttribute("jobtitle") != null){
              jobTitle = identity.getAttribute("jobtitle");
            }
   System.out.println(" jobTitlejobTitle:: : " +jobTitle);
              String locationCode="";
            if(identity.getAttribute("location") != null){
              locationCode = identity.getAttribute("location");
            }
            String companyCode="";
            if(identity.getAttribute("company") != null){
              companyCode = identity.getAttribute("company");
            }
            
  
  					String eeojobgroup="";
            if(identity.getAttribute("eeojobgroup") != null){
              eeojobgroup = identity.getAttribute("eeojobgroup");
            }
  					String costcenter="";
            if(identity.getAttribute("costcenter") != null){
              costcenter = identity.getAttribute("costcenter");
            }
  System.out.println(" costcenter:: : " +costcenter);
						String managerid = "";
    String managerFirstName = "";
    if(null != identity.getManager()){
      Identity  managerObje = identity.getManager();
							managerid = managerObje.getName();
      managerFirstName = managerObje.getFirstname();
    }
    String password = "";
		 password = identity.getPassword();
		if(password != null){
			password  = context.decrypt(password);
		}
    String gender = "";
    if(identity.getAttribute("gender") != null){
              gender = identity.getAttribute("gender");
            }
  String employeestatus = "";
  if(identity.getAttribute("employeestatus") != null){
              employeestatus = identity.getAttribute("employeestatus");
            }
  String start_date = "";
    if(identity.getAttribute("startdate") != null){
              start_date = identity.getAttribute("startdate");
            }

  String supplierName  = "";
    if(identity.getAttribute("neeProviderId") != null){
              supplierName = identity.getAttribute("neeProviderId");
            }
  String description  = "";
    if(identity.getAttribute("descr") != null){
              description = identity.getAttribute("descr");
            }
   String alter_empid = "";
     if(identity.getAttribute("alterEmpId") != null){
              alter_empid = identity.getAttribute("alterEmpId");
            }
  String jobCode = "";
     if(identity.getAttribute("jobcode") != null){
              jobCode = identity.getAttribute("jobcode");
            }
log.info("EmployeeID ---"+EmployeeID);

String columnNames = "emp_id,user_id,display_name,firstname,lastname,email,password,employee_type,alter_empid,middle_name,business_title,department_id,description,job_code,manager,location,company,business_unit,cost_center,mgr_pos_num,phone,job_title,eeo_job_group,employee_status,start_date,end_date,action,operation,rolename,entitlement,type,supplier_name,contractor_id,isrevoked,extended1,extended2,extended3,extended4,extended5,extended6,extended7,extended8,extended9,extended10";
  ArrayList columnList= new ArrayList(Arrays.asList(columnNames.split(",")));
  
			
userDetailsMap.put("emp_id",EmployeeID);
userDetailsMap.put("user_id",userName);
userDetailsMap.put("display_name","");
userDetailsMap.put("firstName",firstName);
userDetailsMap.put("lastName",lastName);
userDetailsMap.put("email",email);
userDetailsMap.put("password",password);
userDetailsMap.put("employee_type",employeeType);
userDetailsMap.put("alter_empid",alter_empid);
userDetailsMap.put("middleName",middleName);
userDetailsMap.put("business_title","");
userDetailsMap.put("departmentCode",departmentCode);
userDetailsMap.put("description",description);
userDetailsMap.put("job_code",jobCode);
userDetailsMap.put("managerid",managerid);
userDetailsMap.put("locationCode",locationCode);
userDetailsMap.put("companyCode",companyCode);
userDetailsMap.put("businessUnitCode",businessUnitCode);
userDetailsMap.put("costCenter",departmentCode);
userDetailsMap.put("mgr_pos_num","");
userDetailsMap.put("phone","");
userDetailsMap.put("jobTitle",jobTitle);
userDetailsMap.put("eeoCode",eeojobgroup);
userDetailsMap.put("employee_status",employeestatus);
userDetailsMap.put("start_date",start_date);
userDetailsMap.put("end_date","");
userDetailsMap.put("action","");
userDetailsMap.put("operation","");
userDetailsMap.put("rolename","");
userDetailsMap.put("entitlement","");
userDetailsMap.put("type","");
userDetailsMap.put("supplier_name",supplierName);
userDetailsMap.put("contractor_id","");
userDetailsMap.put("isrevoked","");
userDetailsMap.put("extended1",userName);
userDetailsMap.put("extended2",managerFirstName);
userDetailsMap.put("extended3",gender);
userDetailsMap.put("extended4","");
userDetailsMap.put("extended5","");
userDetailsMap.put("extended6","");
userDetailsMap.put("extended7","");
userDetailsMap.put("extended8","");
userDetailsMap.put("extended9","");
userDetailsMap.put("extended10","");
     
  System.out.println("In Modify provisioinnrule userDetailsMap" +userDetailsMap);
  boolean isRehire = false;
  
try{
  String query = "UPDATE CIAM_USERS SET firstname='"+firstName+"',lastname='"+lastName+"',email='"+email+"',user_id='"+userName+"',employee_type='"+employeeType+"',department_id='"+departmentCode+"',company='"+companyCode+"',cost_center='"+costcenter+"',business_unit='"+businessUnitCode+"' where emp_id='"+employeeID+"'";
stmt = connection.createStatement();
stmt.execute(query);
  if(employeeType.equalsIgnoreCase(STR_EMPLOYEE) @or employeeType.equalsIgnoreCase("Employee") @or employeeType.equalsIgnoreCase(STR_FEPOCASSOCIATE)){
    System.out.println("In Start provisioinnrule updateAssociate" +employeeType);        
    		resultMap = updateAssociate(userDetailsMap, isRehire);
    int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("**Update Associate SuccessIn if");
  }else{
    resultMap.put("User ID",userName);
     resultMap.put("Employee ID",EmployeeID);
     resultMap.put("UAAS Web Service name","updateAssociate");
    //sendCiamFailureNotication(resultMap);
     source = "updateAssociate";
    auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",EmployeeID);
     auditAttributes.put("UAAS Web Service name","updateAssociate");
    createCiamAuditEvent(source,EmployeeID,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,EmployeeID,null,null,auditAttributes,null,null,null,null);
  }
          }else{
             resultMap = updateContractor(userDetailsMap, isRehire);
    int faultCode = resultMap.get("faultCode");
	String faultReason = resultMap.get("faultReason");
	System.out.println("faultCode:::"+faultCode);
	System.out.println("faultCode:::"+faultReason);
	if(faultCode == 9000){
		System.out.println("**Update Contrator SuccessIn if");
  }else{
    System.out.println("***ELSE Update Contractor Failed:::");
    resultMap.put("User ID",userName);
     resultMap.put("Employee ID",EmployeeID);
     resultMap.put("UAAS Web Service name","updateContractor");
    //sendCiamFailureNotication(resultMap);
     source = "updateContractor";
    	auditAttributes.put("User ID",userName);
     auditAttributes.put("Employee ID",EmployeeID);
     auditAttributes.put("UAAS Web Service name","updateContractor");
    createCiamAuditEvent(source,EmployeeID,null,STR_AUDIT_CF_SP_CIAMSYNCFAILURE,null,EmployeeID,null,null,auditAttributes,null,null,null,null);
  }
            }
  System.out.println("In End Modify  updateAssociate" +employeeType);     

}catch(Exception e){
result.addError(e.getMessage());
result.setStatus(ProvisioningResult.STATUS_FAILED);
}finally{
stmt.close();
}
return result;</Source>
  </Rule>
  <Rule created="1604263672222" id="0a111e5875691e4f81758590f99e270a" language="beanshell" modified="1604263682411" name="CF-RequestObjectSelectorPOC-Rule" type="RequestObjectSelector">
    <Description>Request Object Selector Rules are used by the Life Cycle Manager to determine the Objects that can be requested by a given user on a given population.  For bulk request this rule is run twice.  The first time the result determines which applications are shown to the requestor.  The second time the result determines whether or not the specified requestee has access to the object.  On the first execution the requestee is always null, so the rule needs to expect and handle that case in order to be usable for bulk requests.</Description>
    <Signature returnType="sailpoint.object.QueryInfo">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="requestor" type="sailpoint.object.Identity">
          <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
        </Argument>
        <Argument name="requestee" type="sailpoint.object.Identity">
          <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="filter">
          <Description>
          A Filter object that will be used to search for accessible request objects.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.api.ScopeService;
import sailpoint.object.*;
      import sailpoint.object.Identity;
      import sailpoint.object.Scope;
      import sailpoint.object.QueryOptions;
      import sailpoint.object.QueryInfo;
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
  

  System.out.println("deptid requestee"+requestee.getAttribute("deptid"));
System.out.println("deptid requestor"+requestor.getAttribute("deptid"));
System.out.println("employeeid"+requestee.getAttribute("employeeid"));
System.out.println("employeetype"+requestee.getAttribute("employeetype"));
System.out.println("businessunit"+requestee.getAttribute("businessunit"));
System.out.println("company"+requestee.getAttribute("company"));
  
			

System.out.println("objectselector starting");

//ArrayList combinationList =new ArrayList();

String AssignmentString1 = requestee.getAttribute("businessunit")+"|"+requestee.getAttribute("company");
String AssignmentString2= requestee.getAttribute("businessunit")+"|"+requestee.getAttribute("deptid")+"|"+requestee.getAttribute("company");
String AssignmentString3= requestee.getAttribute("company");

ArrayList filterList = new ArrayList();

  
    filterList.add(Filter.eq("assignment_condition",AssignmentString1));
 filterList.add(Filter.eq("assignment_condition",AssignmentString2));
filterList.add(Filter.eq("assignment_condition",AssignmentString3));
  
//Filter appFilter = Filter.eq("applicationName","AD");
//  Filter appFilter = Filter.eq("name","AD-TEST-All QC users");
//Filter reqFilter = Filter.eq("requestableRole","True");
                   
Filter orFilter = Filter.or(filterList);                   

QueryOptions qo = new QueryOptions();
//qo.addFilter(appFilter);
//qo.addFilter(reqFilter);

qo.addFilter(orFilter);
                   
QueryInfo qi = new QueryInfo(qo); 
System.out.println("objectselector ending");
return qi;</Source>
  </Rule>
  <Rule created="1604263672342" id="0a111e5875691e4f81758590fa16270b" language="beanshell" modified="1617886242950" name="CF-PS-Customization-Rule" type="ResourceObjectCustomization">
    <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.

Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="ResourceObject">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="object">
          <Description>
          The ResourceObject built by the connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application that references the connector.
        </Description>
        </Argument>
        <Argument name="connector">
          <Description>
          The connector object.
        </Description>
        </Argument>
        <Argument name="state">
          <Description>
          A Map containing state information.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="resourceObject">
          <Description>
          The updated resource object.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.text.*;
  import java.util.Date;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  

  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;

  import java.util.*;
  import sailpoint.object.Identity;

  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting PS Customization Rule");
 
  String strAction = object.get(ATR_OBJ_ACTION);
  String strEffectiveDate = object.get(ATR_EFFECTIVE_DATE);
String strTermDate = object.get("TERMINATION_DT");  
  mylogger.info("strEffectiveDate 111111111111 "+strEffectiveDate);
  System.out.println("strEffectiveDate 111111111111 "+strEffectiveDate);
  Date effectiveDate =null;
  Date termDate =null;

  if(strEffectiveDate != null ){
    SimpleDateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
    effectiveDate = formatter.parse(strEffectiveDate);
	
	DateFormat originalFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
	DateFormat targetFormat = new SimpleDateFormat("dd-MMM-yy");
	Date hrDateFormat = originalFormat.parse(strEffectiveDate);
	String formattedDate = targetFormat.format(hrDateFormat);
  effectiveDate=new SimpleDateFormat("dd-MMM-yy").parse(formattedDate); 
  object.put("EFFDT",formattedDate);
  }
   if(strTermDate != null ){
    SimpleDateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
    termDate = formatter.parse(strTermDate);
	
	DateFormat originalFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
	DateFormat targetFormat = new SimpleDateFormat("dd-MMM-yy");
	Date hrDateFormat = originalFormat.parse(strTermDate);
	String formattedDate = targetFormat.format(hrDateFormat);
  termDate=new SimpleDateFormat("dd-MMM-yy").parse(formattedDate); 
  object.put("TERMINATION_DT",formattedDate);
  }
  Date todayDate = new Date();
  mylogger.info("todayDate is == "+todayDate+effectiveDate );
  System.out.println("todayDate is == "+todayDate+effectiveDate);

 if(effectiveDate != null &amp;&amp; todayDate != null &amp;&amp; Util.isNotNullOrEmpty(strAction)) {
System.out.println("first if ");
    if(todayDate.compareTo(effectiveDate) &lt; 0 &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_ADD)) {
      System.out.println("first if if ");
      object.put(ATR_OBJ_EMP_STATUS,ATR_PREHIRE);
    }
    else if(todayDate.compareTo(effectiveDate) &lt; 0 &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_HIR)) {
      object.put(ATR_OBJ_EMP_STATUS,ATR_PREHIRE);
      System.out.println("first if else ");
    }
	
 }
  ///Set UserType
 String companyName=object.getAttribute("COMPANY");
 String empID=object.getAttribute("EMPLID");
  
 System.out.println("Inside Customization rule Company Value: "+companyName);
 System.out.println("Inside Customization rule Empoyeeid: "+empID);
  
 Identity identity = context.getObjectByName(Identity.class,empID);
 
  if(object.get(ATR_OBJ_PER_ORG)!=null){
    System.out.println("second if "+ATR_OBJ_PER_ORG);
    if(object.get(ATR_OBJ_PER_ORG).toString().equals(STR_EMP)){
       System.out.println("second if if "+STR_EMP);
	   if(identity != null @and (!(identity.getAttribute("employeestatus").equalsIgnoreCase("T"))) @and ((object.get("EMPL_STATUS").toString().equalsIgnoreCase("T")) @or (object.get("EMPLOYEE_STATUS").toString().equalsIgnoreCase("T"))) @and (!(identity.getAttribute("employeetype").equalsIgnoreCase(STR_EMPLOYEE)))){
       System.out.println("Came inside Employee If user record will be ignored");   
       return null;
		}
		else{
			System.out.println("Came inside Employee else to set EmployeeType:"+STR_EMPLOYEE);
			object.put(ATR_OBJ_PER_ORG,STR_EMPLOYEE);
		}
	}
	else if(object.get(ATR_OBJ_PER_ORG).toString().equals(STR_CWR)){
        System.out.println("second if else "+STR_CWR);
		if(identity != null @and (!(identity.getAttribute("employeestatus").equalsIgnoreCase("T"))) @and ((object.get("EMPL_STATUS").toString().equalsIgnoreCase("T")) @or (object.get("EMPLOYEE_STATUS").toString().equalsIgnoreCase("T"))) @and (!(identity.getAttribute("employeetype").equalsIgnoreCase(STR_CONTRACTOR)))){
      System.out.println("Came inside Contractor If user record will be ignored");     
      return null;
		}
		else{
			System.out.println("Came inside Contractor else to set EmployeeType:"+STR_CONTRACTOR);
			object.put(ATR_OBJ_PER_ORG,STR_CONTRACTOR);
		}
    }
    else{
      System.out.println("Not a Carefirst Associate");
    }
    
  }
  System.out.println("Inside Customization rule");

mylogger.info("Inside Customization rule companyName "+companyName);
  mylogger.info("Inside Customization rule empID "+empID);
if(Util.isNotNullOrEmpty(companyName)&amp;&amp; "SBP".equalsIgnoreCase(companyName))  { 
	  mylogger.info("Inside Customization rule inside if FEPOC user  ");
  
     String status = getUseridFromFEPOC(empID);
  String upn = getMailFromFEPOC(empID);
    mylogger.info("Inside Customization rule  status "+status);
   if(Util.isNotNullOrEmpty(status)&amp;&amp; status.startsWith("sAMAccountName")){
     System.out.println("Inside if ****");
     mylogger.info("Inside Customization rule Status is Sucess before returning null ");
     userID=status.substring(status.indexOf(":")+2);
     object.setAttribute("USERID",userID);
     if(Util.isNotNullOrEmpty(upn)&amp;&amp; upn.startsWith("mail")){
     mylogger.info("Inside if UPN  ****" + upn);
     mylogger.info("Inside Customization rule Status is Sucess before returning null ");
     String upnValue =upn.substring(upn.indexOf(":")+2);
     object.setAttribute("EMAIL",upnValue);
      }
	 return object; 
   }else{
  
     /* System.out.println("Inside else ****");
    EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-FEPOC-AD-Error");
         String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);                
          options.setVariable("identityName", empID);
      context.sendEmailNotification(template, options);*/
      
     System.out.println("end of else ****");
     return null;
   }
 }
  return object;</Source>
  </Rule>
  <Rule created="1604263672460" id="0a111e5875691e4f81758590fa8c270c" language="beanshell" modified="1604320762052" name="CF-CIAMUsersVault-AfterProvisioning-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e98226e3" name="CF-CommonWebServiceLibrary-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.*;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import java.util.*;
  import java.util.HashMap;
  import sailpoint.object.Application;
  import sailpoint.object.Configuration;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.Attributes;
  import java.util.List;
  import java.util.ArrayList;

  import javax.jms.*;
  import javax.jms.Connection;
  import javax.jms.Destination;
  import javax.jms.JMSException;
  import javax.jms.Message;
  import javax.jms.MessageProducer;
  import javax.jms.Queue;
  import javax.jms.Session;
  import javax.jms.TextMessage;

  import org.apache.log4j.Logger;
  import com.mysql.cj.jdbc.MysqlDataSource;
  import java.sql.ResultSet;
  import java.sql.Connection;
  import java.sql.PreparedStatement;
  import java.sql.SQLException;
  import java.sql.Statement;
  import java.io.IOException;
  import java.io.InputStreamReader;
  import java.io.OutputStreamWriter;
  import java.net.HttpURLConnection;
  import java.net.MalformedURLException;
  import java.net.ProtocolException;
  import java.net.URL;



  System.out.println("running after provisioning rule");
  //System.out.println(plan.getAccountRequests().get(0).toMap());

  Logger loggerObj = Logger.getLogger("com.carefirst.CIAMUsersHandler");
  loggerObj.info("###CIAM Users After Provisioning");




  String requester;
  if ( plan != null )
  {
    loggerObj.info("###CIAM Users After Provisioning plan is  "+plan);

    List accounts = plan.getAccountRequests();
    loggerObj.info("###CIAM Users After Provisioning accounts is  "+accounts);
    if ( ( accounts != null ) &amp;&amp; ( accounts.size() > 0 ) )
    {
      loggerObj.info("###CIAM Users After Provisioning accounts > 0  "+accounts);
      for ( AccountRequest acctReq : accounts )
      {
        loggerObj.info("In CIAM Users Vault After provisioning Rule Operation ::::"+acctReq.getOperation());
        //if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Create.equals(acctReq.getOperation())))
        if (acctReq != null)
        {

          String name = plan.getNativeIdentity();
          System.out.println("Printing Provisioning plan" +plan.toXml());
          Identity identity = context.getObjectByName( Identity.class , name );
          System.out.println(" Native Identity : " + identity);


          String userType=identity.getAttribute(ATR_EMPLOYEETYPE);
          loggerObj.info("###CIAM Users userType  "+userType);
          if((userType !=null)&amp;&amp;(userType.equalsIgnoreCase(STR_EMPLOYEE))){
            HashMap userDetailsMap = new HashMap();
            String personType = "Associate";
            userDetailsMap.put("personType",personType);
            String uaasUserName= "";
            userDetailsMap.put("uaasUserName",uaasUserName);
            String tsrNumber= "";
            userDetailsMap.put("tsrNumber",tsrNumber);
            String submitterUserName= "";
            userDetailsMap.put("submitterUserName",submitterUserName);
            String skipSearch= "";
            userDetailsMap.put("skipSearch",skipSearch);
            String personStatus= "active";
            userDetailsMap.put("personStatus",personStatus);
            String departmentName="";
            userDetailsMap.put("departmentName",departmentName);
            String socialSecurityNumber= "";
            userDetailsMap.put("socialSecurityNumber",socialSecurityNumber);

            String firstName = "";
            if(identity.getAttribute("firstname") != null){
              firstName =  identity.getAttribute("firstname");
            }
            userDetailsMap.put("firstName",firstName);
            //loggerObj.info("###firstName is::::"+firstName);
            String middleName = "";
            if(identity.getAttribute("middlename") != null){
              middleName = identity.getAttribute("middlename");
            }
            userDetailsMap.put("middleName",middleName);
            String lastName = "";
            if(identity.getAttribute("lastname") != null){
              lastName = identity.getAttribute("lastname");
            }
            userDetailsMap.put("lastName",lastName);
            String email= ""; 
            if(identity.getAttribute("email") != null){
              email = identity.getAttribute("email");
            }
            userDetailsMap.put("email",email);
            String gender= "";
            if(identity.getAttribute("gender") != null){
              gender = identity.getAttribute("gender");
            }
            userDetailsMap.put("gender",gender);
            String userName= ""; 
            if(identity.getAttribute("userid") != null){
              userName = identity.getAttribute("userid");
            }
            userDetailsMap.put("userName",userName);
            //String emplId= "";   name
            userDetailsMap.put("emplId",name);
            String companyCode="";
            if(identity.getAttribute("company") != null){
              companyCode = identity.getAttribute("company");
            }
            userDetailsMap.put("companyCode",companyCode);
            String businessUnitCode="";
            if(identity.getAttribute("businessunit") != null){
              businessUnitCode = identity.getAttribute("businessunit");
            }
            userDetailsMap.put("businessUnitCode",businessUnitCode);
            String departmentCode="";
            if(identity.getAttribute("deptid") != null){
              departmentCode = identity.getAttribute("deptid");
            }
            userDetailsMap.put("departmentCode",departmentCode);
            String locationCode="";
            if(identity.getAttribute("location") != null){
              locationCode = identity.getAttribute("location");
            }
            userDetailsMap.put("locationCode",locationCode);
            String jobTitle="";
            if(identity.getAttribute("jobitle") != null){
              jobTitle = identity.getAttribute("jobitle");
            }
            userDetailsMap.put("jobTitle",jobTitle);
            String eeoCode="110";
            if(identity.getAttribute("eeojobgroup") != null){
              eeoCode = identity.getAttribute("eeojobgroup");
            }
            userDetailsMap.put("eeoCode",eeoCode);
            String managerId="020076";
            //if(identity.getAttribute("manager") != null){
              //managerId = identity.getAttribute("manager");
            //}
            userDetailsMap.put("managerId",managerId);
            String managerName="Maharjan";
            //if(identity.getManager().displayName != null){
              //managerName = identity.getManager().displayName;
            //}
            userDetailsMap.put("managerName",managerName);
            String costCenter="002K3";
            if(identity.getAttribute("costcenter") != null){
              costCenter = identity.getAttribute("costcenter");
            }
            userDetailsMap.put("costCenter",costCenter);
            String startDate="2019-12-09";
            //if(identity.getAttribute("startdate") != null){
              //startDate = identity.getAttribute("startdate");
            //}
            userDetailsMap.put("startDate",startDate);
            String endDate="3000-01-01";
            //if(identity.getAttribute("enddate") != null){
              //endDate = identity.getAttribute("enddate");
            //}
            userDetailsMap.put("endDate",endDate);
            //not present in sample payload

            String personId =""; //?
            String alternateEmailAddress =""; //?
            String dateOfBirth =""; //dob
            String companyName =""; //?
            String businessUnitName =""; //businesstitle
            String jobCode =""; //jobcode

            userDetailsMap.put("personId",personId);
            userDetailsMap.put("alternateEmailAddress",alternateEmailAddress);
            userDetailsMap.put("dateOfBirth",dateOfBirth);
            userDetailsMap.put("companyName",companyName);
            userDetailsMap.put("businessUnitName",businessUnitName);
            userDetailsMap.put("jobCode",jobCode);

            loggerObj.info("###user details map::::"+userDetailsMap);


            String result = "failure";//returned from webservice

            if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Create.equals(acctReq.getOperation())))
            {
              String createAssociateInputXML = "&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:uaas=\"http://www.carefirst.com/ciam/services/uaas\" xmlns:uaas1=\"http://associate.insidecarefirst.com/ciamservices/service/uaas_types\">"
                +"&lt;soapenv:Header/>"
                +"&lt;soapenv:Body>"
                +"&lt;uaas:createAssociateInput>"
                +"&lt;uaas1:uaasUserName>aac5790&lt;/uaas1:uaasUserName>"
                +"&lt;uaas1:tsrNumber>SAILREQ&lt;/uaas1:tsrNumber>"
                +"&lt;uaas1:submitterUserName>aac5790&lt;/uaas1:submitterUserName>"
                +"&lt;uaas1:skipSearch>false&lt;/uaas1:skipSearch>"
                +"&lt;uaas1:associate>"
                +"&lt;fullName>"
                +"&lt;firstName>"+firstName+"&lt;/firstName>"
                +"&lt;middleInitial>M&lt;/middleInitial>"
                +"&lt;lastName>"+lastName+"&lt;/lastName>"
                +"&lt;/fullName>"
                +"&lt;personType>Associate&lt;/personType>"
                +"&lt;personStatus>active&lt;/personStatus>"
                +"&lt;emailAddress>"+email+"&lt;/emailAddress>"
                +"&lt;gender>M&lt;/gender>"
                +"&lt;socialSecurityNumber>12345&lt;/socialSecurityNumber>"
                +"&lt;userName>"+userName+"&lt;/userName>"
                +"&lt;emplId>"+name+"&lt;/emplId>"
                +"&lt;businessUnit>"
                +"&lt;companyCode>"+companyCode+"&lt;/companyCode>"
                +"&lt;businessUnitCode>"+businessUnitCode+"&lt;/businessUnitCode> "              
                +"&lt;departmentCode>"+departmentCode+"&lt;/departmentCode>"
                +"&lt;departmentName>Care Management Admin&lt;/departmentName>"
                +"&lt;locationCode>"+locationCode+"&lt;/locationCode>"
                +"&lt;jobTitle>"+jobTitle+"&lt;/jobTitle>"
                +"&lt;eeoCode>"+eeoCode+"&lt;/eeoCode>"
                +"&lt;/businessUnit>"
                +"&lt;locationCode>"+locationCode+"&lt;/locationCode>"
                +"&lt;managerId>"+managerId+"&lt;/managerId>"
                +"&lt;managerName>shah&lt;/managerName>"
                +"&lt;costCenter>"+costCenter+"&lt;/costCenter>"
                +"&lt;startDate>"+startDate+"&lt;/startDate>"
                +"&lt;endDate>"+endDate+"&lt;/endDate>"
                +"&lt;/uaas1:associate>"
                +"&lt;/uaas:createAssociateInput>"
                +"&lt;/soapenv:Body>"
                +"&lt;/soapenv:Envelope>";


             
              String endpoint  =  "http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort";


              String soapAction = "";

              loggerObj.info("###endpoint::::"+endpoint);

              loggerObj.info("###createAssociateInputXML::::"+createAssociateInputXML);


              String responsIs = sendRequest(createAssociateInputXML,endpoint,soapAction);

              loggerObj.info("createAssociateInputXML Response is: " +responsIs);

            } 

            if(result.equals("failure")){
              //insertFailureRecord(userDetailsMap);

              MysqlDataSource dataSource = new MysqlDataSource();
              dataSource.setUser("identityiq");
              dataSource.setPassword("identityiq");
              dataSource.setServerName("sv-tivdi-p2");
              dataSource.setDatabaseName("identityiq");
              Connection connection;
              String columnNames="emplId,created,modified,uaasUserName,tsrNumber,submitterUserName,skipSearch,firstName,middleInitial,lastName,personType,personId,personStatus,emailAddress,alternateEmailAddress,dateOfBirth,gender,socialSecurityNumber,userName,companyCode,companyName,businessUnitCode,businessUnitName,departmentCode,departmentName,locationCode,jobTitle,jobCode,eeoCode,managerId,managerName,costCenter,startDate,endDate,action,roleName,ownerName,applictionName,entitlementName,operation,extended1,extended2,extended3,extended4,extended5,extended6,extended7,extended8,extended9,extended10";
              ArrayList columnList= new ArrayList(Arrays.asList(columnNames.split(",")));
              PreparedStatement statement = null;
              String preparedStatementQuery = "insert into ciam_user_provisioning_status ("+columnNames+") values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
              loggerObj.info("preparedStatementQuery: " + preparedStatementQuery);



              try {
                connection= dataSource.getConnection();
                loggerObj.info("connection: " + connection);
                statement = connection.prepareStatement(preparedStatementQuery);//need to create connection if not available in after prov rule
                for(int i=0; i&lt;columnList.size();i++)
                {
                  String value ="";
                  if(userDetailsMap.get(columnList.get(i))!=null)
                    value = userDetailsMap.get(columnList.get(i)).toString();
                  statement.setString (i+1, value);
                }
                loggerObj.info("Before Execuite"+preparedStatementQuery);
                statement.executeUpdate();
                connection.close();
              } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
              }
              loggerObj.info("preparedStatementQuery: " + preparedStatementQuery);
            }
          }
        }
        if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Disable.equals(acctReq.getOperation())))
        {




        }
        if (( acctReq != null ) &amp;&amp; (AccountRequest.Operation.Enable.equals(acctReq.getOperation())))
        {



        }


      }
    }
  }</Source>
  </Rule>
  <Rule created="1604263672574" id="0a111e5875691e4f81758590fafe270d" language="beanshell" modified="1604263682619" name="CF-CIAM-Users-Vault-CreateProvisioning-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult"/>
    <Source>import java.util.List;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.api.IdentityService;
import sailpoint.object.QueryOptions;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.Operation;
 import org.apache.log4j.Logger;
  import java.util.HashMap;
    
Logger log = Logger.getLogger("com.carefirst.CIAMUsersVault-Logs");
 

log.info("-------------------CIAM Create user Started-------------------"+plan);
String name = plan.getNativeIdentity();
System.out.println("Printing Provisioning plan" +plan.toXml());

/*PreparedStatement statement = null;
String preparedStatementQuery = "insert into CIAM_USERS(emp_id,user_id,rolename) values(?,?,?)";
log.info("preparedStatementQuery: " + preparedStatementQuery);*/

List accounts = plan.getAccountRequests();
log.info("accounts " + accounts);
ProvisioningResult provResult = new ProvisioningResult();
if(accounts.size() > 0)
{
//for(int i = 0; i &lt; accounts.size(); i++)
   for ( AccountRequest acctReq : accounts )
     System.out.println("In For loop " +acctReq);

      
{
//AccountRequest acctReq = accounts.get(i);
     if (acctReq != null)
        {
HashMap userDetailsMap = new HashMap();
			
String EmployeeID = acctReq.getNativeIdentity();
  System.out.println("Employee Id is::: " +EmployeeID);

Identity identity = context.getObjectByName(Identity.class , EmployeeID);
          System.out.println(" Native Identity : " + identity);
  String employeeType = "";
  if(identity.getAttribute(ATR_EMPLOYEETYPE) != null){
    employeeType = identity.getAttribute(ATR_EMPLOYEETYPE);
  }
  				String userName= ""; 
            if(identity.getAttribute("userid") != null){
              userName = identity.getAttribute("userid");
            }
  String firstName = "";
            if(identity.getAttribute("firstname") != null){
              firstName =  identity.getAttribute("firstname");
            }
            String lastName = "";
            if(identity.getAttribute("lastname") != null){
              lastName = identity.getAttribute("lastname");
            }
            String email= ""; 
            if(identity.getAttribute("email") != null){
              email = identity.getAttribute("email");
            }  
            String middleName = "";
            if(identity.getAttribute("middlename") != null){
              middleName = identity.getAttribute("middlename");
            }  
            String businessUnitCode="";
            if(identity.getAttribute("businessunit") != null){
              businessUnitCode = identity.getAttribute("businessunit");
            }
            String departmentCode="";
            if(identity.getAttribute("deptid") != null){
              departmentCode = identity.getAttribute("deptid");
            }
            String jobTitle="";
            if(identity.getAttribute("jobitle") != null){
              jobTitle = identity.getAttribute("jobitle");
            }
              String locationCode="";
            if(identity.getAttribute("location") != null){
              locationCode = identity.getAttribute("location");
            }
            String companyCode="";
            if(identity.getAttribute("company") != null){
              companyCode = identity.getAttribute("company");
            }
            
  
  					String eeojobgroup="";
            if(identity.getAttribute("eeojobgroup") != null){
              eeojobgroup = identity.getAttribute("eeojobgroup");
            }
  					String costcenter="";
            if(identity.getAttribute("costcenter") != null){
              costcenter = identity.getAttribute("costcenter");
            }
						String managerid = "";
        if(null != identity.getManager()){
            Identity managerObj=identity.getManager();
          if(null ! = managerObj){
            managerid = managerObj.getName();
          		}
             }
  
log.info("EmployeeID ---"+EmployeeID);

String columnNames = "emp_id,userName,display_name,firstname,lastname,email,password,employee_type,alter_empid,middle_name,business_title,department_id,description,job_code,manager,location,company,business_unit,cost_center,mgr_pos_num,phone,job_title,eeo_job_group,employee_status,start_date,end_date,action,operation,rolename,entitlement,type,supplier_name,contractor_id,isrevoked,extended1,extended2,extended3,extended4,extended5,extended6,extended7,extended8,extended9,extended10";
  ArrayList columnList= new ArrayList(Arrays.asList(columnNames.split(",")));
			
userDetailsMap.put("emplId",EmployeeID);
userDetailsMap.put("user_id",userName);
userDetailsMap.put("display_name","");
userDetailsMap.put("firstName",firstName);
userDetailsMap.put("lastName",lastName);
userDetailsMap.put("email",email);
userDetailsMap.put("password","");
userDetailsMap.put("employee_type","");
userDetailsMap.put("alter_empid","");
userDetailsMap.put("middleName",middleName);
userDetailsMap.put("business_title","");
userDetailsMap.put("departmentCode",departmentCode);
userDetailsMap.put("description","");
userDetailsMap.put("job_code",jobTitle);
userDetailsMap.put("managerid",managerid);
userDetailsMap.put("locationCode",locationCode);
userDetailsMap.put("companyCode",companyCode);
userDetailsMap.put("businessUnitCode",businessUnitCode);
userDetailsMap.put("costCenter",costcenter);
userDetailsMap.put("mgr_pos_num","");
userDetailsMap.put("phone","");
userDetailsMap.put("jobTitle",jobTitle);
userDetailsMap.put("eeoCode",eeojobgroup);
userDetailsMap.put("employee_status","");
userDetailsMap.put("start_date","");
userDetailsMap.put("end_date","");
userDetailsMap.put("action","");
userDetailsMap.put("operation","");
userDetailsMap.put("rolename","");
userDetailsMap.put("entitlement","");
userDetailsMap.put("type","");
userDetailsMap.put("supplier_name","");
userDetailsMap.put("contractor_id","");
userDetailsMap.put("isrevoked","");
userDetailsMap.put("extended1","");
userDetailsMap.put("extended2","");
userDetailsMap.put("extended3","");
userDetailsMap.put("extended4","");
userDetailsMap.put("extended5","");
userDetailsMap.put("extended6","");
userDetailsMap.put("extended7","");
userDetailsMap.put("extended8","");
userDetailsMap.put("extended9","");
userDetailsMap.put("extended10","");
  
  System.out.println("userDetailsMap" +userDetailsMap);
  
			PreparedStatement statement = null;
            String preparedStatementQuery = "insert into CIAM_USERS ("+columnNames+") values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			try {
            	  			
                
                //loggerObj.info("connection: " + connection);
            	System.out.println(columnList.size());
                statement = connection.prepareStatement(preparedStatementQuery);
                for(int i=0; i&lt;columnList.size();i++)
                {
                  String value ="";
                  if(userDetailsMap.get(columnList.get(i))!=null)
                    value = userDetailsMap.get(columnList.get(i)).toString();
                  statement.setString (i+1, value);
                  System.out.println("row "+i+" columnList.get(i)"+columnList.get(i));
                }
                //loggerObj.info("Before Execuite"+preparedStatementQuery);
                statement.executeUpdate();
				log.info("-------------------CIAM  Create user Successful-------------------");
				System.out.println("-------------------CIAM  Create user Successful-------------------");
				provResult.setStatus( ProvisioningResult.STATUS_COMMITTED );
        	if(employeeType.equalsIgnoreCase(STR_EMPLOYEE) @or employeeType.equalsIgnoreCase("Employee") @or employeeType.equalsIgnoreCase(STR_FEPOCASSOCIATE)){
            System.out.println(" Start Create Asscociate webservice Call : "+EmployeeID);
            createassociate(userDetailsMap);
            System.out.println(" ****End Create Asscociate webservice Call : "+EmployeeID);
          }else{
            createContractor(userDetailsMap);
          }
                
              } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
				provResult.setStatus( ProvisioningResult.STATUS_FAILED );
				provResult.addError( e );
              }
   }

}
}
log.info("-------------------CIAM Create user Completed-------------------");</Source>
  </Rule>
  <Rule created="1604263672807" id="0a111e5875691e4f81758590fbe7270e" language="beanshell" modified="1616855763049" name="CF-LaunchPowerShell-Rule" type="ConnectorAfterCreate">
    <Source>
  import sailpoint.object.Application;


  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;


//String strADAppName = "Active Directory Production";
   //String strADAppName = "Active Directory";
  String strADAppName = "BizAppAD";
  //return appObj;
    Identity identity = context.getObjectByName(Identity.class,"390483");
  

  if(identity != null){
    Application appObj = context.getObjectByName(Application.class, strADAppName);
//Link linkObj = identity.getLink(appObj);
    
  // Fake account request
  AccountRequest accountRequest = new AccountRequest();
  accountRequest.setApplication("Active Directory");
  //  accountRequest.setApplication("IIQ");
  accountRequest.setNativeIdentity("390484");
  accountRequest.setOperation(AccountRequest.Operation.Modify);
 //accountRequest.add(new AttributeRequest("sAMAccountName",ProvisioningPlan.Operation.Set,linkObj.getAttribute("sAMAccountName")));
    accountRequest.add(new AttributeRequest("sAMAccountName",ProvisioningPlan.Operation.Set,"aaz5701"));
  // accountRequest.add(new AttributeRequest("email",ProvisioningPlan.Operation.Set,linkObj.getAttribute("email")));
//return accountRequest;
  Map data = new HashMap();
 // Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedriveAndHomedirectoryProvision-Rule");
// Rule ruleObj = context.getObjectByName(Rule.class,"CF-Office365-Enable-Rule");    
   // Rule ruleObj = context.getObjectByName(Rule.class,"CF-ExchangeSetRemoteAttrs-Rule");
  Rule ruleObj = context.getObjectByName(Rule.class,"CF-BizappADUserPermissionsPSCommands-Rule");
  
  //return ruleObj;
  data.put("postScript",ruleObj);

	data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  
  //String IQServiceServer = "sv-spidsvc-d1.carefirst.com";
  String IQServiceServer = "SV-SPIDSVC-t2.bizappstest.local";
  int IQServicePort = 5050;
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
// return data;
  RpcResponse response = service.execute(request);
  return response;
  }
  </Source>
  </Rule>
  <Rule created="1604263672919" id="0a111e5875691e4f81758590fc57270f" language="beanshell" modified="1604263682807" name="CF-PowerShell-Test" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  //return context.decrypt("1:ACP:Jij32w72mtAMXxRx5Bk5Ll+e/5rki+PMvVWfzPAl7zI=");
  Add-type -path  E:\IQService\utils.dll


  try{
    
ECHO "Before creating the Variables 11222211****" |Add-Content -path E:\Test\DynamicFile.txt -FORCE
    $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    ECHO "after sreader  ****" |Add-Content -path E:\Test\DynamicFile.txt -FORCE
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
        ECHO "after xmlreader  ****" |Add-Content -path E:\Test\DynamicFile.txt -FORCE
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
    
    ECHO "Declared OOB Varaibles ****" |Add-Content -path E:\Test\DynamicFile.txt -FORCE
      
foreach ($attribute in $requestObject.AttributeRequests){
      if($attribute.Name -eq "sAMAccountName"){
        [string]$samaccount = $attribute.Value
       
    
    
      }
         if($attribute.Name -eq "email"){
        [string]$email = $attribute.Value
       
    
    
      }
}
        ECHO  $samaccount |Add-Content -path E:\Test\DynamicFile.txt -FORCE
        ECHO  $email |Add-Content -path E:\Test\DynamicFile.txt -FORCE
          
    ECHO "above is the UserID ****" |Add-Content -path E:\Test\DynamicFile.txt -FORCE
  }


  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Error.txt -FORCE
  }

  return "Succes";
  </Source>
  </Rule>
  <Rule created="1604263673033" id="0a111e5875691e4f81758590fcc92710" language="beanshell" modified="1604263682871" name="CF-RoleDBTesting-Rule">
    <Source>
  import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.sql.DriverManager;
//import com.microsoft.sqlserver.jdbc.SQLServerDriver;

  import sailpoint.api.SailPointContext;
    import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  import java.util.*;

		
	Connection connection = null;

	try {
	Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	System.out.println("Connecting to database...");
	connection = DriverManager.getConnection("jdbc:sqlserver://sv-spidsql-d1.carefirst.com:1433;databaseName=identityiqdev","identityiqdev","Identityiq123$");
	} catch (ClassNotFoundException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	}
	catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	}
	return connection;
	
  
	

  </Source>
  </Rule>
  <Rule created="1604263673375" id="0a111e5875691e4f81758590fe1f2711" language="beanshell" modified="1604263682945" name="CF-AD-DN-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;
System.out.println("In DN Rule firstname is:::"+identity);
  //return "CN=testDNTe\\, Embar"+","+STR_ASSOCIATE_OU;
  if(identity != null){

  
  String firstname =  identity.getFirstname();
  String lastname =  identity.getLastname();
System.out.println("In DN Rule firstname is:::"+firstname);
  String employeeType  = identity.getAttribute(ATR_EMPLOYEETYPE);
String userDN ="";
if(null != employeeType &amp;&amp; employeeType.equalsIgnoreCase(STR_EMPLOYEE)){
System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
userDN = "cn="+lastname+"."+firstname+","+STR_ASSOCIATE_OU;
System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
return userDN;
  }else{
    userDN ="cn="+lastname+"."+firstname+","+STR_CONTRACTOR_OU;
System.out.println("In DN Rule, user type: Contractor DN:::"+userDN);
return userDN;
  
  }
  }</Source>
  </Rule>
  <Rule created="1604263673627" id="0a111e5875691e4f81758590ff1b2712" language="beanshell" modified="1615452351877" name="CareFIrst-Rule-LOA-Trigger" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean"/>
    <Source>import sailpoint.tools.Util;
import org.apache.log4j.Logger;
   import java.util.Calendar;
        import java.util.*;
      import java.text.SimpleDateFormat; 
        import org.apache.log4j.Logger;
System.out.println("Inside LOA------");
Logger mylogger = Logger.getLogger("com.carefirst.loggers");
mylogger.info("Starting Carefirst LOA Trigger Rule");
try{

SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy");
if(newIdentity != null &amp;&amp; previousIdentity != null){
        String effDate=newIdentity.getAttribute("effdt");
		 String strAction =newIdentity.getAttribute("action");
	 String strPrevAction =previousIdentity.getAttribute("action");
	if(!(previousIdentity.isInactive())){
		 String company=newIdentity.getAttribute("company");
System.out.println("Inside LOA------"+effDate);
        Date actualeffdate=  sdf.parse(effDate);
		   Date currentDate = new Date();
        String currentDateString= sdf.format(currentDate);
        Date actualCurrentDate=  sdf.parse(currentDateString);
		System.out.println("Inside LOA------"+actualeffdate+actualCurrentDate+company);
 if(!(company.equalsIgnoreCase("SBP"))){
	
	// mylogger.info("Starting Carefirst LOA Trigger Rule Action is "+strAction);
	 //System.out.println("....................................."+newIdentity+previousIdentity);
	
         System.out.println(strAction+ strPrevAction+ newIdentity.getAttribute("employeestatus"));
		if( ((strAction.equalsIgnoreCase("LOA") &amp;&amp; newIdentity.getAttribute("employeestatus").equals("L"))  ||(strAction.equalsIgnoreCase("PLA")&amp;&amp;(newIdentity.getAttribute("employeestatus").equals("P"))) ) &amp;&amp; (actualCurrentDate.compareTo(actualeffdate) >= 0)){

			mylogger.info("Starting Carefirst LOA Trigger Rule Inside return if ");
			return true;  
	  }
	  else{
	 return false;
	 }
	 }else{
	 return false;
	 }
	 }
	 }else{
	 return false;
	 }
}catch(Exception e){
return false;
}</Source>
  </Rule>
  <Rule created="1604263673759" id="0a111e5875691e4f81758590ff9f2713" language="beanshell" modified="1604263683068" name="GnanaTestRule">
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  import java.net.URL;
import java.util.HashMap;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import com.carefirst.ciam.services.uaas.BaseFault;
import com.carefirst.ciam.services.uaas.CiamSystemFault;
import com.carefirst.ciam.services.uaas.UAAS;
import com.carefirst.ciam.services.uaas.UAASPort;
import com.carefirst.ciam.services.uaas.UserAlreadyExistsFault;
import com.carefirst.ciam.services.uaas.UserAlreadyExistsWarning;
import com.carefirst.ciam.services.uaas.ValidationFault;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.BusinessUnit;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableAssociateInformation;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableContractorInformation;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.FullName;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.Gender;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonStatus;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonType;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorOutput;
  
  String nextUserId = "";

URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
		UAAS u = new UAAS(url);
		UAASPort port = u.getUAASPort();
		GenerateNextUserIDInput parameters = new GenerateNextUserIDInput();
		parameters.setUaasAdminUserID("aac5790");
		GenerateNextUserIDOutput s = port.generateNextUserID(parameters);
  System.out.println("s is:::"+s);
		 nextUserId = s.getAvailableUserID();
		System.out.println("Next user id is:::"+nextUserId);
    
  
   
  </Source>
  </Rule>
  <Rule created="1604263673882" id="0a111e5875691e4f81758591001a2714" language="beanshell" modified="1604410402607" name="CF-HomedriveCreation-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="1000"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
   #Add-type -path E:\sailpoint\IQService\utils.dll
   #  Add-type -path  E:\sailpoint\Dev-IQService\IQService
    Add-type -path E:\IQService\utils.dll

      try{
       $date = Get-Date 
      ECHO "**** Entering Homedrive and Homedirectory creation ***"$date |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
      ECHO "**** Entering Homedrive and Homedirectory creation ***"$sReader |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        $xmlReader = [System.xml.XmlTextReader]([sailpoint.utils.xml.XmlUtil]::getReader($sReader)); 
      ECHO "**** Entering Homedrive and Homedirectory creation ***"$xmlReader |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
      ECHO "**** Entering Homedrive and Homedirectory creation ***"$requestObject |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

        if($requestObject.Operation -eq "Create"){
        ECHO "**** Inside Create Operation ***" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

          foreach ($attribute in $requestObject.AttributeRequests){
          if($attribute.Name -eq "sAMAccountName"){
            [string]$samAccountName = $attribute.Value
              ECHO "**** Inside sAMAccountName ***" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
          }

          if($attribute.Name -eq "homedirectory"){
            [string]$homedirectory = $attribute.Value
          }
        }


        ECHO "**** User: ***" +$samAccountName +", homedirectory value: " +$homedirectory +" ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

          #To be deleted when moving to Production
          $path = "E:\Test\"
          $homeDirectory = $path + $samAccountName
          
          $homeDirectory1 = $path + "$samAccountName"


          ECHO "**** Test homedirectory value: " +$homedirectory +" ****"$homeDirectory  |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

            new-item -path $homeDirectory -itemtype directory;

        ECHO "**** Test homedirectory created on: "+Get-Date+" ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
          $Domain = 'BCBSMD'
          $userId = 'AD - Security Admins'
          $UsersAm = "$Domain\$userId"


          $FileSystemAccessRights = [System.Security.AccessControl.FileSystemRights]"FullControl"

          $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]::"ContainerInherit", "ObjectInherit"

          $PropagationFlags = [System.Security.AccessControl.PropagationFlags]::None

          $AccessControl =[System.Security.AccessControl.AccessControlType]::Allow 

          $NewAccessrule = New-Object System.Security.AccessControl.FileSystemAccessRule($UsersAm, $FileSystemAccessRights, $InheritanceFlags, $PropagationFlags, $AccessControl)

          ECHO "**** Testing Homedrive and Homedirectory creation33333333****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE


            $currentACL = Get-ACL -path $homeDirectory

            $currentACL.SetAccessRule($NewAccessrule)


            ECHO "**** Testing Homedrive and Homedirectory 4444444****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
              $acl = Get-Acl -path $homeDirectory
              $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($samAccountName,"Read","Allow")
              $acl.SetAccessRule($AccessRule)
              $acl | Set-Acl -path $homeDirectory 
              
              $userId1 = "AAC4398"

              Set-ADUser -Identity $userId1 -HomeDrive 'I:' -HomeDirectory $homeDirectory1


              ECHO "**** Completed ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE


      }else
      {
        ECHO "**** Operation is not Create  ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
      }
    }


  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Test\CF-HomeDriveErrors-Logs.txt -FORCE
      $errorMsg =$_.exception.message
      foreach ($attribute in $requestObject.AttributeRequests){
          if($attribute.Name -eq "CmdletResponse"){
            $attribute.Value = $errorMsg;
          }
       }
		$env:Request =$requestObject.toXml() | out-file $args[0];
  }

  //return "Success";
  </Source>
  </Rule>
  <Rule created="1604263673997" id="0a111e5875691e4f81758591008d2715" language="beanshell" modified="1611732891182" name="CF-Delete-Identities-Rule">
    <Source>
  import sailpoint.api.Terminator;
import sailpoint.object.Filter;

import sailpoint.object.Identity;
import sailpoint.api.ObjectUtil;

import sailpoint.object.Custom;

  //Custom customObj = context.getObjectByName(Custom.class, "CF-UserIDFailure-Custom");
		//if(customObj != null){
       
			//List  objectList = (List)customObj.get("failureList");
  List  objectList = new ArrayList();
 // objectList.add("00001");
  objectList.add("000969");
objectList.add("100023");
objectList.add("100027");
objectList.add("100028");
objectList.add("100029");
objectList.add("100030");
objectList.add("100031");
objectList.add("100032");
objectList.add("100033");
objectList.add("100034");
objectList.add("100035");
objectList.add("100036");
objectList.add("100037");
objectList.add("100038");
objectList.add("100039");
objectList.add("100040");
objectList.add("100041");
objectList.add("100042");
objectList.add("100043");
objectList.add("100044");
objectList.add("100045");
objectList.add("100046");
objectList.add("100047");
objectList.add("100048");
objectList.add("100049");
objectList.add("100050");
objectList.add("100051");
objectList.add("100052");
objectList.add("100053");
objectList.add("100054");
objectList.add("100055");
objectList.add("100056");
objectList.add("100057");
objectList.add("100058");
objectList.add("100059");
objectList.add("100060");
objectList.add("100061");
objectList.add("100062");
objectList.add("100063");
objectList.add("100064");
objectList.add("100065");
objectList.add("100066");
objectList.add("100067");
objectList.add("100068");
objectList.add("100069");
objectList.add("100070");
objectList.add("100071");
objectList.add("100078");
objectList.add("100079");
objectList.add("100080");
objectList.add("100081");
objectList.add("100082");
objectList.add("100083");
objectList.add("100084");
objectList.add("100085");
objectList.add("100086");
objectList.add("100087");
objectList.add("100088");
objectList.add("100089");
objectList.add("100090");
objectList.add("100091");
objectList.add("100092");
objectList.add("100093");
objectList.add("100094");
objectList.add("100095");
objectList.add("100096");
objectList.add("100097");
objectList.add("100098");
objectList.add("100099");
objectList.add("100100");
objectList.add("100101");
objectList.add("100102");
objectList.add("100103");
objectList.add("100104");
objectList.add("100105");
objectList.add("100106");
objectList.add("100107");
objectList.add("100108");
objectList.add("100109");
objectList.add("100110");
objectList.add("100111");
objectList.add("100112");
objectList.add("100113");
objectList.add("100114");
objectList.add("100115");
objectList.add("100116");
objectList.add("100117");
objectList.add("100118");
objectList.add("100119");
objectList.add("100120");
objectList.add("100121");
objectList.add("100122");
objectList.add("100123");
objectList.add("100124");
objectList.add("100125");
objectList.add("100126");
objectList.add("100127");
objectList.add("100128");
objectList.add("100129");
objectList.add("100131");
objectList.add("100133");
objectList.add("100134");
objectList.add("100135");
objectList.add("100136");
objectList.add("100137");
objectList.add("100138");
objectList.add("100139");
objectList.add("100140");
objectList.add("100141");
objectList.add("100142");
objectList.add("100143");
objectList.add("100144");
objectList.add("100145");
objectList.add("100146");
objectList.add("100147");
objectList.add("100148");
objectList.add("100149");
objectList.add("100150");
objectList.add("100151");
objectList.add("100152");
objectList.add("100153");
objectList.add("100154");
objectList.add("100155");
objectList.add("100157");
objectList.add("100158");
objectList.add("100159");
objectList.add("100160");
objectList.add("100161");
objectList.add("100162");
objectList.add("100163");
objectList.add("100164");
objectList.add("100165");
objectList.add("100166");
objectList.add("100167");
objectList.add("100168");
objectList.add("100169");
objectList.add("100170");
objectList.add("100171");
objectList.add("100172");
objectList.add("100173");
objectList.add("100174");
objectList.add("100176");
objectList.add("100177");
objectList.add("100178");
objectList.add("100179");
objectList.add("100180");
objectList.add("100181");
objectList.add("100190");
objectList.add("100191");
objectList.add("100192");
objectList.add("100193");
objectList.add("100194");
objectList.add("100195");
objectList.add("100196");
objectList.add("100197");
objectList.add("100198");
objectList.add("100199");
objectList.add("100200");
objectList.add("100201");
objectList.add("100202");
objectList.add("100203");
objectList.add("100204");
objectList.add("100205");
objectList.add("100206");
objectList.add("100207");
objectList.add("100208");
objectList.add("100209");
objectList.add("100210");
objectList.add("100211");
objectList.add("100212");
objectList.add("100213");
objectList.add("100214");
objectList.add("100215");
objectList.add("100216");
objectList.add("100217");
objectList.add("100218");
objectList.add("100219");
objectList.add("100220");
objectList.add("100221");
objectList.add("100222");
objectList.add("100223");
objectList.add("100224");
objectList.add("100225");
objectList.add("100226");
objectList.add("100227");
objectList.add("100228");
objectList.add("100229");
objectList.add("100230");
objectList.add("100231");
objectList.add("100232");
objectList.add("100233");
objectList.add("100234");
objectList.add("100235");
objectList.add("100239");
objectList.add("100240");
objectList.add("100241");
objectList.add("100242");
objectList.add("100244");
objectList.add("100250");
objectList.add("100251");
objectList.add("100254");
objectList.add("100255");
objectList.add("100256");
objectList.add("100257");
objectList.add("100270");
objectList.add("100271");
objectList.add("100272");
objectList.add("100273");
objectList.add("100274");
objectList.add("100275");
objectList.add("100279");
objectList.add("100281");
objectList.add("100290");
objectList.add("100291");
objectList.add("100292");
objectList.add("100293");
objectList.add("100294");
objectList.add("100295");
objectList.add("100296");
objectList.add("100297");
objectList.add("100298");
objectList.add("100299");
objectList.add("100300");
objectList.add("100301");
objectList.add("100306");
objectList.add("100307");
objectList.add("100308");
objectList.add("100309");
objectList.add("100310");
objectList.add("100311");
objectList.add("100312");
objectList.add("100313");
objectList.add("100314");
objectList.add("100315");
objectList.add("100316");
objectList.add("100317");
objectList.add("100318");
objectList.add("100319");
objectList.add("100320");
objectList.add("100321");
objectList.add("100322");
objectList.add("100323");
objectList.add("100324");
objectList.add("100325");
objectList.add("100326");
objectList.add("100327");
objectList.add("100328");
objectList.add("100329");
objectList.add("100330");
objectList.add("100331");
objectList.add("100332");
objectList.add("100333");
objectList.add("100334");
objectList.add("100335");
objectList.add("100336");
objectList.add("100337");
objectList.add("100338");
objectList.add("100339");
objectList.add("100340");
objectList.add("100341");
objectList.add("100342");
objectList.add("100343");
objectList.add("100344");
objectList.add("100346");
objectList.add("100348");
objectList.add("100349");
objectList.add("100350");
objectList.add("100351");
objectList.add("100352");
objectList.add("100353");
objectList.add("100354");
objectList.add("100355");
objectList.add("100356");
objectList.add("100357");
objectList.add("100358");
objectList.add("100359");
objectList.add("100360");
objectList.add("100361");
objectList.add("100362");
objectList.add("100363");
objectList.add("100364");
objectList.add("100365");
objectList.add("100366");
objectList.add("100367");
objectList.add("100368");
objectList.add("100369");
objectList.add("100370");
objectList.add("100371");
objectList.add("100372");
objectList.add("100373");
objectList.add("100374");
objectList.add("100375");
objectList.add("100376");
objectList.add("100377");
objectList.add("100378");
objectList.add("100381");
objectList.add("100382");
objectList.add("100383");
objectList.add("100384");
objectList.add("100385");
objectList.add("100386");
objectList.add("100387");
objectList.add("100389");
objectList.add("100390");
objectList.add("100391");
objectList.add("100392");
objectList.add("100394");
objectList.add("100395");
objectList.add("100396");
objectList.add("100397");
objectList.add("100401");
objectList.add("100404");
objectList.add("110101");
objectList.add("123456");
objectList.add("123457");
objectList.add("123458");
objectList.add("123459");
objectList.add("123460");
objectList.add("123461");
objectList.add("123462");
objectList.add("123463");
objectList.add("123471");
objectList.add("123474");
objectList.add("123475");
objectList.add("123476");
objectList.add("123477");
objectList.add("123478");
objectList.add("123483");
objectList.add("123484");
objectList.add("123485");
objectList.add("123486");
objectList.add("123487");
objectList.add("123491");
objectList.add("123492");
objectList.add("123493");
objectList.add("123494");
objectList.add("123497");
objectList.add("123498");
objectList.add("123499");
objectList.add("123500");
objectList.add("123501");
objectList.add("123502");
objectList.add("123503");
objectList.add("123504");
objectList.add("123505");
objectList.add("123506");
objectList.add("123507");
objectList.add("123508");
objectList.add("123509");
objectList.add("123510");
objectList.add("123511");
objectList.add("123512");
objectList.add("123518");
objectList.add("123520");
objectList.add("123521");
objectList.add("123522");
objectList.add("123523");
objectList.add("123524");
objectList.add("123525");
objectList.add("123526");
objectList.add("123527");
objectList.add("123528");
objectList.add("123533");
objectList.add("123534");
objectList.add("123535");
objectList.add("123536");
objectList.add("123537");
objectList.add("123538");
objectList.add("123540");
objectList.add("123541");
objectList.add("123543");
objectList.add("123544");
objectList.add("123545");
objectList.add("123546");
objectList.add("123548");
objectList.add("123550");
objectList.add("123552");
objectList.add("123553");
objectList.add("123554");
objectList.add("123555");
objectList.add("123556");
objectList.add("123557");
objectList.add("123558");
objectList.add("123559");
objectList.add("123560");
objectList.add("123561");
objectList.add("123562");
objectList.add("123563");
objectList.add("123564");
objectList.add("123565");
objectList.add("123600");
objectList.add("123601");
objectList.add("123602");
objectList.add("300002");
objectList.add("300003");
objectList.add("300004");
objectList.add("300005");
objectList.add("300006");
objectList.add("300007");
objectList.add("300008");
objectList.add("300009");
objectList.add("300010");
objectList.add("300011");
objectList.add("300012");
objectList.add("300013");
objectList.add("300014");
objectList.add("300015");
objectList.add("300016");
objectList.add("300017");
objectList.add("300018");
objectList.add("300019");
objectList.add("300020");
objectList.add("300021");
objectList.add("300022");
objectList.add("300023");
objectList.add("300024");
objectList.add("300025");
objectList.add("300026");
objectList.add("300027");
objectList.add("300028");
objectList.add("300029");
objectList.add("300030");
objectList.add("300031");
objectList.add("300032");
objectList.add("300033");
objectList.add("300034");
objectList.add("300035");
objectList.add("300036");
objectList.add("300037");
objectList.add("300038");
objectList.add("300039");
objectList.add("300040");
objectList.add("300041");
objectList.add("300042");
objectList.add("300043");
objectList.add("300044");
objectList.add("300045");
objectList.add("300046");
objectList.add("300047");
objectList.add("300048");
objectList.add("300049");
objectList.add("300050");
objectList.add("300051");
objectList.add("300052");
objectList.add("300053");
objectList.add("300054");
objectList.add("300055");
objectList.add("300056");
objectList.add("300057");
objectList.add("300058");
objectList.add("300059");
objectList.add("300060");
objectList.add("300061");
objectList.add("300062");
objectList.add("300063");
objectList.add("300064");
objectList.add("300065");
objectList.add("300066");
objectList.add("300067");
objectList.add("300068");
objectList.add("300069");
objectList.add("300070");
objectList.add("300072");
objectList.add("300073");
objectList.add("300074");
objectList.add("300075");
objectList.add("300076");
objectList.add("300077");
objectList.add("300078");
objectList.add("300079");
objectList.add("300080");
objectList.add("300081");
objectList.add("300082");
objectList.add("300083");
objectList.add("300084");
objectList.add("300085");
objectList.add("300086");
objectList.add("300087");
objectList.add("300088");
objectList.add("300089");
objectList.add("300090");
objectList.add("300091");
objectList.add("300092");
objectList.add("300093");
objectList.add("300094");
objectList.add("300095");
objectList.add("300096");
objectList.add("300097");
objectList.add("300098");
objectList.add("300100");
objectList.add("300101");
objectList.add("300102");
objectList.add("300103");
objectList.add("300104");
objectList.add("300105");
objectList.add("300106");
objectList.add("300107");
objectList.add("300108");
objectList.add("300109");
objectList.add("300110");
objectList.add("300111");
objectList.add("300112");
objectList.add("300113");
objectList.add("300114");
objectList.add("300115");
objectList.add("300116");
objectList.add("300117");
objectList.add("300118");
objectList.add("300119");
objectList.add("300121");
objectList.add("300122");
objectList.add("300123");
objectList.add("300124");
objectList.add("300125");
objectList.add("300126");
objectList.add("300127");
objectList.add("300128");
objectList.add("300129");
objectList.add("300130");
objectList.add("300131");
objectList.add("300132");
objectList.add("300133");
objectList.add("300134");
objectList.add("300135");
objectList.add("300136");
objectList.add("300137");
objectList.add("300138");
objectList.add("300139");
objectList.add("300140");
objectList.add("300141");
objectList.add("300143");
objectList.add("300144");
objectList.add("300145");
objectList.add("300146");
objectList.add("300147");
objectList.add("300148");
objectList.add("300149");
objectList.add("300150");
objectList.add("300151");
objectList.add("300152");
objectList.add("300153");
objectList.add("300154");
objectList.add("300155");
objectList.add("300156");
objectList.add("300157");
objectList.add("300158");
objectList.add("300159");
objectList.add("300160");
objectList.add("300161");
objectList.add("300162");
objectList.add("300163");
objectList.add("300164");
objectList.add("300165");
objectList.add("300166");
objectList.add("300167");
objectList.add("300168");
objectList.add("300169");
objectList.add("300170");
objectList.add("300171");
objectList.add("300172");
objectList.add("300173");
objectList.add("300174");
objectList.add("300175");
objectList.add("300176");
objectList.add("300177");
objectList.add("300178");
objectList.add("300179");
objectList.add("300180");
objectList.add("300181");
objectList.add("300182");
objectList.add("300183");
objectList.add("300184");
objectList.add("300185");
objectList.add("300186");
objectList.add("300187");
objectList.add("300188");
objectList.add("300189");
objectList.add("300190");
objectList.add("300191");
objectList.add("300192");
objectList.add("300193");
objectList.add("300194");
objectList.add("300195");
objectList.add("300196");
objectList.add("300197");
objectList.add("300198");
objectList.add("300199");
objectList.add("300200");
objectList.add("300201");
objectList.add("300202");
objectList.add("300203");
objectList.add("300204");
objectList.add("300205");
objectList.add("300206");
objectList.add("300207");
objectList.add("300208");
objectList.add("300209");
objectList.add("300210");
objectList.add("300211");
objectList.add("300212");
objectList.add("300213");
objectList.add("300214");
objectList.add("300215");
objectList.add("300216");
objectList.add("300217");
objectList.add("300218");
objectList.add("300219");
objectList.add("300220");
objectList.add("300221");
objectList.add("300222");
objectList.add("300224");
objectList.add("300225");
objectList.add("300226");
objectList.add("300227");
objectList.add("300228");
objectList.add("300229");
objectList.add("300230");
objectList.add("300232");
objectList.add("300233");
objectList.add("300234");
objectList.add("300235");
objectList.add("300236");
objectList.add("300237");
objectList.add("300238");
objectList.add("300239");
objectList.add("300240");
objectList.add("300241");
objectList.add("300242");
objectList.add("300243");
objectList.add("300244");
objectList.add("300245");
objectList.add("300246");
objectList.add("300247");
objectList.add("300248");
objectList.add("300249");
objectList.add("300250");
objectList.add("300251");
objectList.add("300252");
objectList.add("300253");
objectList.add("300254");
objectList.add("300255");
objectList.add("300256");
objectList.add("300257");
objectList.add("300258");
objectList.add("300259");
objectList.add("300260");
objectList.add("300261");
objectList.add("300262");
objectList.add("300263");
objectList.add("300264");
objectList.add("300265");
objectList.add("300266");
objectList.add("300267");
objectList.add("300268");
objectList.add("300269");
objectList.add("300271");
objectList.add("300272");
objectList.add("300273");
objectList.add("300274");
objectList.add("300275");
objectList.add("300276");
objectList.add("300277");
objectList.add("300279");
objectList.add("300280");
objectList.add("300281");
objectList.add("300282");
objectList.add("300283");
objectList.add("300284");
objectList.add("300285");
objectList.add("300286");
objectList.add("300287");
objectList.add("300288");
objectList.add("300289");
objectList.add("300290");
objectList.add("300291");
objectList.add("300292");
objectList.add("300293");
objectList.add("300294");
objectList.add("300295");
objectList.add("300296");
objectList.add("300297");
objectList.add("300298");
objectList.add("300299");
objectList.add("300300");
objectList.add("300301");
objectList.add("300303");
objectList.add("300304");
objectList.add("300305");
objectList.add("300306");
objectList.add("300307");
objectList.add("300308");
objectList.add("300309");
objectList.add("300310");
objectList.add("300311");
objectList.add("300312");
objectList.add("300313");
objectList.add("300314");
objectList.add("300315");
objectList.add("300316");
objectList.add("300317");
objectList.add("300318");
objectList.add("300319");
objectList.add("300320");
objectList.add("300321");
objectList.add("300322");
objectList.add("300323");
objectList.add("300324");
objectList.add("300325");
objectList.add("300326");
objectList.add("300327");
objectList.add("300701");
objectList.add("300702");
objectList.add("300703");
objectList.add("300704");
objectList.add("300705");
objectList.add("300706");
objectList.add("300707");
objectList.add("300708");
objectList.add("300709");
objectList.add("300710");
objectList.add("300711");
objectList.add("300712");
objectList.add("300713");
objectList.add("300714");
objectList.add("300715");
objectList.add("300716");
objectList.add("300717");
objectList.add("300718");
objectList.add("300719");
objectList.add("300720");
objectList.add("310000");
objectList.add("310001");
objectList.add("310002");
objectList.add("310003");
objectList.add("310004");
objectList.add("310005");
objectList.add("310006");
objectList.add("310007");
objectList.add("310008");
objectList.add("310009");
objectList.add("310010");
objectList.add("310011");
objectList.add("310012");
objectList.add("310013");
objectList.add("310018");
objectList.add("310019");
objectList.add("310020");
objectList.add("310021");
objectList.add("310022");
objectList.add("310023");
objectList.add("310024");
objectList.add("310025");
objectList.add("310026");
objectList.add("310027");
objectList.add("310028");
objectList.add("310029");
objectList.add("310030");
objectList.add("310031");
objectList.add("310032");
objectList.add("330007");
objectList.add("330008");
objectList.add("330009");
objectList.add("330010");
objectList.add("330011");
objectList.add("330012");
objectList.add("330013");
objectList.add("330014");
objectList.add("330015");
objectList.add("330016");
objectList.add("330019");
objectList.add("330020");
objectList.add("330021");
objectList.add("330023");
objectList.add("330024");
objectList.add("350025");
objectList.add("350051");
objectList.add("350053");
objectList.add("350054");
objectList.add("350055");
objectList.add("350056");
objectList.add("350057");
objectList.add("350058");
objectList.add("350060");
objectList.add("350061");
objectList.add("350062");
objectList.add("350063");
objectList.add("350065");
objectList.add("350067");
objectList.add("350069");
objectList.add("350070");
objectList.add("350071");
objectList.add("350072");
objectList.add("350073");
objectList.add("350078");
objectList.add("350079");
objectList.add("350080");
objectList.add("350081");
objectList.add("350082");
objectList.add("350083");
objectList.add("350084");
objectList.add("350085");
objectList.add("350086");
objectList.add("350088");
objectList.add("350089");
objectList.add("350090");
objectList.add("350091");
objectList.add("350092");
objectList.add("350094");
objectList.add("350095");
objectList.add("350101");
objectList.add("350102");
objectList.add("350103");
objectList.add("350104");
objectList.add("350105");
objectList.add("370001");
objectList.add("370003");
objectList.add("370004");
objectList.add("370013");
objectList.add("370014");
objectList.add("370103");
objectList.add("370104");
objectList.add("370105");
objectList.add("370106");
objectList.add("370108");
objectList.add("370109");
objectList.add("370110");
objectList.add("370131");
objectList.add("370132");
objectList.add("370133");
objectList.add("370137");
objectList.add("370140");
objectList.add("370141");
objectList.add("370142");
objectList.add("370143");
objectList.add("370144");
objectList.add("370145");
objectList.add("370146");
objectList.add("370147");
objectList.add("370148");
objectList.add("370149");
objectList.add("370151");
objectList.add("370152");
objectList.add("370153");
objectList.add("370154");
objectList.add("370155");
objectList.add("370156");
objectList.add("370164");
objectList.add("370165");
objectList.add("370203");
objectList.add("370204");
objectList.add("370205");
objectList.add("370206");
objectList.add("370207");
objectList.add("370208");
objectList.add("370209");
objectList.add("370210");
objectList.add("370211");
objectList.add("370213");
objectList.add("370215");
objectList.add("370216");
objectList.add("370217");
objectList.add("370218");
objectList.add("370219");
objectList.add("370220");
objectList.add("370221");
objectList.add("370224");
objectList.add("370253");
objectList.add("370254");
objectList.add("370255");
objectList.add("370261");
objectList.add("370262");
objectList.add("370263");
objectList.add("370264");
objectList.add("370265");
objectList.add("370266");
objectList.add("370267");
objectList.add("370268");
objectList.add("370269");
objectList.add("370270");
objectList.add("370281");
objectList.add("370282");
objectList.add("370283");
objectList.add("370284");
objectList.add("370285");
objectList.add("370286");
objectList.add("370287");
objectList.add("370288");
objectList.add("370289");
objectList.add("370290");
objectList.add("370291");
objectList.add("370292");
objectList.add("370293");
objectList.add("370294");
objectList.add("370295");
objectList.add("370296");
objectList.add("370297");
objectList.add("370298");
objectList.add("370299");
objectList.add("370301");
objectList.add("370302");
objectList.add("370303");
objectList.add("370304");
objectList.add("370305");
objectList.add("370306");
objectList.add("370307");
objectList.add("370308");
objectList.add("370309");
objectList.add("370310");
objectList.add("370311");
objectList.add("370312");
objectList.add("370330");
objectList.add("400001");
objectList.add("400002");
objectList.add("400003");
objectList.add("400004");
objectList.add("400005");
objectList.add("400006");
objectList.add("400007");
objectList.add("400008");
objectList.add("400013");
objectList.add("400019");
objectList.add("400020");
objectList.add("400025");
objectList.add("400026");
objectList.add("400075");
objectList.add("400076");
objectList.add("400077");
objectList.add("400078");
objectList.add("400079");
objectList.add("400080");
objectList.add("400081");
objectList.add("400082");
objectList.add("400083");
objectList.add("400084");
objectList.add("400085");
objectList.add("400086");
objectList.add("400087");
objectList.add("400088");
objectList.add("400089");
objectList.add("500001");
objectList.add("500002");
objectList.add("500003");
objectList.add("500004");
objectList.add("500005");
objectList.add("500006");
objectList.add("500007");
objectList.add("500008");
objectList.add("500009");
objectList.add("500010");
objectList.add("500011");
objectList.add("500012");
objectList.add("500013");
objectList.add("500014");
objectList.add("500015");
objectList.add("500016");
objectList.add("500017");
objectList.add("500018");
objectList.add("500019");
objectList.add("500020");
objectList.add("500021");
objectList.add("600001");
objectList.add("600002");
objectList.add("600003");
objectList.add("600004");
objectList.add("600005");
objectList.add("600006");
objectList.add("600007");
objectList.add("600008");
objectList.add("600009");
objectList.add("600010");
objectList.add("600045");
objectList.add("600046");
objectList.add("600047");
objectList.add("610001");
objectList.add("610002");
objectList.add("610003");
objectList.add("610004");
objectList.add("610005");
objectList.add("610006");
objectList.add("610007");
objectList.add("610008");
objectList.add("610009");
objectList.add("610010");
objectList.add("610012");
objectList.add("610013");
objectList.add("610014");
objectList.add("610015");
objectList.add("610017");
objectList.add("610018");
objectList.add("610019");
objectList.add("610020");
objectList.add("650003");
objectList.add("650004");
objectList.add("650005");
objectList.add("650006");
objectList.add("650011");
objectList.add("650012");
objectList.add("650019");
objectList.add("650020");
objectList.add("66000");
objectList.add("700101");
objectList.add("710201");
objectList.add("710202");
objectList.add("778850");
objectList.add("900101");
objectList.add("900102");
objectList.add("900103");
objectList.add("900104");
objectList.add("900105");
objectList.add("900106");
objectList.add("900107");
objectList.add("900108");
objectList.add("900109");
objectList.add("900110");
objectList.add("900111");
objectList.add("900112");
objectList.add("900113");
objectList.add("900114");
objectList.add("900115");
objectList.add("900116");
objectList.add("900120");
objectList.add("900121");
objectList.add("900124");
objectList.add("900126");
objectList.add("900127");
objectList.add("900128");
objectList.add("900129");
objectList.add("900130");
objectList.add("900131");
objectList.add("900132");
objectList.add("900133");
objectList.add("900134");
objectList.add("900135");
objectList.add("900136");
objectList.add("900137");
objectList.add("900139");
objectList.add("900140");
objectList.add("900142");
objectList.add("900143");
objectList.add("900144");
objectList.add("900145");
objectList.add("900146");
objectList.add("900147");
objectList.add("900148");
objectList.add("900149");
objectList.add("900150");
objectList.add("900151");
objectList.add("900152");
objectList.add("900153");
objectList.add("900154");
objectList.add("900155");
objectList.add("900156");
objectList.add("900157");
objectList.add("900158");
objectList.add("900159");
objectList.add("900160");
objectList.add("900161");
objectList.add("900200");
objectList.add("900201");
objectList.add("900202");
objectList.add("900203");
objectList.add("900204");
objectList.add("900205");
objectList.add("900206");
objectList.add("900207");
objectList.add("900501");
objectList.add("900503");
objectList.add("900505");
objectList.add("900506");
objectList.add("900507");
objectList.add("900509");
objectList.add("900510");
objectList.add("900511");
objectList.add("900519");
objectList.add("AAE2721");
			//List identityList = ObjectUtil.getObjects(context, Identity.class, objectList);
  List identityList = ObjectUtil.getObjects(context, Identity.class, objectList);
    //  return identityList;
      Terminator t = new Terminator(context);
			for (Identity identity : identityList) {
        if(identity !=null){
				t.deleteObject(identity);
        }
			
			}
     //customObj.put("failureList",new ArrayList());
      //context.saveObject(customObj);
      //context.commitTransaction();
      	//context.decache();
      return "Success";
			
		}

                   </Source>
  </Rule>
  <Rule created="1604263674108" id="0a111e5875691e4f8175859100fc2716" language="beanshell" modified="1604263683258" name="CF-HomedirectoryCreate-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
    New-Item -Path 'E:\Test\Shubham\TestFolder' -ItemType Directory
  </Source>
  </Rule>
  <Rule created="1604263674224" id="0a111e5875691e4f8175859101702717" language="beanshell" modified="1616845236536" name="CF-ExchangeSetRemoteAttrs-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  //return context.decrypt("1:ACP:Jij32w72mtAMXxRx5Bk5Ll+e/5rki+PMvVWfzPAl7zI=");
  
  Add-type -path E:\IQService\utils.dll
  
   try{
     $date = Get-Date
    ECHO "Creating Exchange Remote  Mailbox on Get-Date on****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
      $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
 ECHO "Creating Exchange Remote  Before Request Operation****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
    #if($requestObject.Operation -eq "Create"){
    ECHO "Creating Exchange Remote  Inside create Operation****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC

      $s=New-PSSession -ConfigurationName microsoft.exchange -ConnectionUri "http://sv-exmail16-t1.carefirsttest.com/powershell"
       ECHO "Creating Exchange Remote  new session ****"$s |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        Import-PSSession $s -WarningAction silentlycontinue -ErrorAction silentlycontinue -AllowClobber -DisableNameChecking -commandname enable-remotemailbox,set-remotemailbox
  ECHO "Creating Exchange Remote  After import session ****" |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        foreach ($attribute in $requestObject.AttributeRequests){
       ECHO "Creating Exchange Remote  Inside For loop****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC

        if($attribute.Name -eq "sAMAccountName"){
          [string]$samAccountName = $attribute.Value
            ECHO "Creating Exchange Remote SamAccountName = ****"$samAccountName |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        }
       
if($attribute.Name -eq "mail"){
          [string]$emailValue = $attribute.Value
            ECHO "Creating Exchange Remote emailValue = ****"$emailValue |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        }
  

      }
      ECHO  $samaccountName |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE 
        
          
          enable-RemoteMailbox -Identity $samAccountName -Alias $samAccountName -PrimarySmtpAddress $emailValue -RemoteRoutingAddress $samAccountName@carefirsttest.mail.onmicrosoft.com

          enable-remotemailbox -identity $samAccountName -Archive
        
          ECHO "Exchange mailBox Created for "+$samaccountName  + "on "  |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE
            
            Set-RemoteMailbox -Identity $samaccountName -EmailAddressPolicyEnabled:$true
              
              ECHO "New mailbox attribute set for "+$samaccountName  + "on "  |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE
    #}

  }
  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\ExchangeMailboxError.txt -FORCE
      $errorMessage = $_.exception.message;

  }

 // return "Succes";
  </Source>
  </Rule>
  <Rule created="1604263674350" id="0a111e5875691e4f8175859101ee2718" language="beanshell" modified="1617140984555" name="CF-PS-CreationRule-Rule" type="IdentityCreation">
    <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="void">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation task.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application being aggregated.
        </Description>
        </Argument>
        <Argument name="account" type="ResourceObject">
          <Description>
          The resource account for the identity being created.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The identity that is being created.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import java.util.Map;
  import java.util.HashMap;
  import java.util.List;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.Attributes;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Custom;
  import java.util.Date;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;
  import org.apache.log4j.Logger;
  import sailpoint.api.PasswordGenerator;
  import sailpoint.object.PasswordPolicy;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;

    
System.out.println("Entering Rule:CF-CreationRule-Rule");
  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Creation Rule");

System.out.println("**** Starting PeopleSoft creation rule ****");


  String updatedUserName="";
  String actualEffectiveDate="";
  
  if(account.getStringAttribute(ATR_HIREDATE) != null){
    
  actualEffectiveDate=account.getStringAttribute(ATR_HIREDATE).toString();
  SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT_SLASHES);
  Date effectiveDate = formatter.parse(actualEffectiveDate);
  System.out.println("actualEffectiveDate is == "+actualEffectiveDate);
  Date todayDate = new Date();
  mylogger.info(".......todayDate......" +todayDate);
  mylogger.info("effectiveDate......."+effectiveDate);
  }
  //Password Generation Code
  String passwordnew = null;
  PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class, STR_AD_PASSWORD_POLICY);
  if(policy!=null)
  {
    passwordnew = new PasswordGenerator(context).generatePassword(policy);
    if(null != passwordnew){
      passwordnew = passwordnew.replaceAll("[^a-zA-Z0-9]", "c");
    }
  }
System.out.println("passwordnew"+passwordnew);
  identity.setPassword(passwordnew);


  //Updates Start Date and updates enddate to 1st jan 30

  // if((effectiveDate.compareTo(todayDate) @gt 0) @or (effectiveDate.compareTo(todayDate)== 0)){
  if(actualEffectiveDate!=null @and account.getStringAttribute(ATR_OBJ_ACTION)!=null){
    if(account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_HIR) @or account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_ADD)){
      identity.setAttribute(ATR_STARTDATE, actualEffectiveDate);
      identity.setAttribute(ATR_ENDDATE, STR_END_DATE_VALUE);
      mylogger.info("start Date set to identity");
    }
  }
  //}


  //Update Username  For CareFirst users
  mylogger.info("EmplyeeType...1111"+account.getStringAttribute(ATR_OBJ_PER_ORG));
  System.out.println("EmplyeeType..111111."+account.getStringAttribute(ATR_OBJ_PER_ORG));
  //System.out.println("EmplyeeType..111111."+account.getStringAttribute(ATR_OBJ_PER_ORG));
	//mylogger.info("COMPANY..."+account.getStringAttribute("COMPANY"));
  if(account.getStringAttribute(ATR_OBJ_PER_ORG) != null @and account.getStringAttribute("COMPANY")!=null){
    if(!(account.getStringAttribute("COMPANY").toString().equalsIgnoreCase("SBP"))){
    	if((account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase(STR_CONTRACTOR)) @or (account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase(STR_EMPLOYEE))){
      	mylogger.info("Inside Employee Type ...."+account.getStringAttribute(ATR_OBJ_PER_ORG));
System.out.println("VInside Employee Type ...."+account.getStringAttribute(ATR_OBJ_PER_ORG));
System.out.println("Before userId Generation using WSCall....");
      	//updatedUserName = sendRequest(STR_USERID_REQUESTXML,STR_USERID_ENDPOINT,"");
        
          updatedUserName = generateNextUserID();
        System.out.println("After userId Generation using WSCall ...."+updatedUserName);

       // mylogger.info("identity from SOAP"+identity.getName());

      	mylogger.info("updatedUserName from SOAP"+updatedUserName);
        System.out.println("updatedUserName ...."+updatedUserName);
     	 // identity.setName(updatedUserName);
        if("error".equalsIgnoreCase(updatedUserName)){
          EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-UserIdGeneration-Error");
         String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);
          Map args = new HashMap();
      args.put("identityName", identity.getName());
          options.setVariables(args);
      context.sendEmailNotification(template, options);
          
          ArrayList list=null;
  Custom customObj= context.getObjectByName(Custom.class,"CF-UserIDFailure-Custom");
      //should be kept in custom object
     list=customObj.get("failureList");
    
  if(list==null){
    list = new ArrayList();
    list.add(identity.getName());
    
  }
  else
    list.add(identity.getName());
          
  customObj.put("failureList",list);
      context.saveObject(customObj);
      context.commitTransaction();
          
          System.out.println("list ...."+list);
        }
        else{
      			identity.setAttribute(ATR_USERID,updatedUserName);
        }
       
      }


		
    	}
    else {    
    				System.out.println("inside else ....");
      if(account.getAttribute("USERID")!=null){
      System.out.println("account.getStringAttribute ...."+account.getStringAttribute("USERID"));
      System.out.println("account.getAttribute ...."+account.getAttribute("USERID"));
      identity.setAttribute(ATR_USERID,account.getAttribute("USERID").toString());
      }
      if(account.getAttribute("EMAIL")!=null){
        identity.setAttribute(ATR_EMAIL,account.getAttribute("EMAIL").toString());
      }
    }
    

  }</Source>
  </Rule>
  <Rule created="1604263674465" id="0a111e5875691e4f8175859102612719" language="beanshell" modified="1604263683457" name="CF-PS-CreationRulewithCustomObj-Rule" type="IdentityCreation">
    <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="void">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation task.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application being aggregated.
        </Description>
        </Argument>
        <Argument name="account" type="ResourceObject">
          <Description>
          The resource account for the identity being created.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The identity that is being created.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import java.util.Map;
  import java.util.HashMap;
  import java.util.List;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
 import sailpoint.object.Attributes;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Custom;
  import java.util.Date;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;
  import org.apache.log4j.Logger;
  import sailpoint.api.PasswordGenerator;
  import sailpoint.object.PasswordPolicy;


  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting Creation Rule");


  String updatedUserName="";
  List objects =null;
  int count=2;
  int numberSufix=0;
  String suffixToBeReplacedinCustomFile="";


  

  String actualEffectiveDate=account.getStringAttribute(ATR_EFFECTIVE_DATE).toString();
  SimpleDateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
  Date effectiveDate = formatter.parse(actualEffectiveDate);
  System.out.println("actualEffectiveDate is == "+actualEffectiveDate);
  Date todayDate = new Date();
  mylogger.info(".......todayDate......" +todayDate);
  mylogger.info("effectiveDate......."+effectiveDate);
  //Password Generation Code
  String passwordnew = null;
  PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class, STR_AD_PASSWORD_POLICY);
  if(policy!=null)
  {
    passwordnew = new PasswordGenerator(context).generatePassword(policy);
    if(null != passwordnew){
    passwordnew = passwordnew.replaceAll("[^a-zA-Z0-9]", "c");
    }
  }
  identity.setPassword(passwordnew);


//Updates Start Date and updates enddate to 1st jan 30

  // if((effectiveDate.compareTo(todayDate) @gt 0) @or (effectiveDate.compareTo(todayDate)== 0)){
  if(actualEffectiveDate!=null){
    if(account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_HIR) @or account.getStringAttribute(ATR_OBJ_ACTION).toString().equals(STR_ACTION_ADD)){
      identity.setAttribute(ATR_STARTDATE, actualEffectiveDate);
      identity.setAttribute(ATR_ENDDATE, STR_END_DATE_VALUE);
      mylogger.info("start Date set to identity");
    }
  }
  //}


  //Update Username  For CareFirst users
  mylogger.info("EmplyeeType..."+account.getStringAttribute(ATR_OBJ_PER_ORG));

  if(account.getStringAttribute(ATR_OBJ_PER_ORG) != null){
    if((account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase("CWR")) @or (account.getStringAttribute(ATR_OBJ_PER_ORG).toString().equalsIgnoreCase("EMP"))){
      mylogger.info("Inside Employee Type ...."+account.getStringAttribute(ATR_OBJ_PER_ORG));




      Custom customObj= context.getObjectByName(Custom.class,STR_USERID_CUSTOM_OBJ);
      //should be kept in custom object
      String prefix=customObj.get(STR_CUSTOM_CONSTANT);
      Attributes attrs =new Attributes();
      Map mapObj = new HashMap();
      numberSufix=Integer.parseInt(customObj.get(STR_CUSTOM_VALUE))+1;
      suffixToBeReplacedinCustomFile= numberSufix.toString();
      
      //IF CONSTANT WAS 1000 THEN AAB SEQUENCE WILL BE STARTED and constant value will be set to 1000
      if(numberSufix == 10000){
        char[] prefixSplit=prefix.substring(prefix.length()-1).toCharArray();
        char lastchar=prefixSplit[0];
        char replaced=lastchar+1;
        prefix=prefix.substring(0,prefix.length()-1)+replaced;
        int l=1000;
        suffixToBeReplacedinCustomFile=l.toString();
        mapObj.put(STR_CUSTOM_CONSTANT,prefix);
        numberSufix=1000;
      }else{
        mapObj.put(STR_CUSTOM_CONSTANT,prefix);
      }




      updatedUserName=prefix+numberSufix;
      //Will check whether use exists in IIQ if yes then then it will choose another constant value(value will be incremeted)
      //checks whther userlogin present in iiq
      Filter useridFilter = Filter.eq(ATR_USERID,updatedUserName);

      if(useridFilter != null){

        System.out.println("Filter is not null");

        QueryOptions options = new QueryOptions().addFilter(useridFilter);

        if (options != null){
          objects = context.getObjects(Identity.class, options);
          System.out.println("objects"+objects);
          if(objects.isEmpty()){
            objects=null;
          }
        }
      }

      while(objects !=null){

        if(numberSufix == 10000){
          char[] prefixSplit=prefix.substring(prefix.length()-1).toCharArray();
          char prefixLastChar=prefixSplit[0];
          char replaced=prefixLastChar+1;
          System.out.println(prefixLastChar);
          prefix=prefix.substring(0,prefix.length()-1)+replaced;


          mapObj.put(STR_CUSTOM_VALUE,"1000");
          mapObj.put(STR_CUSTOM_CONSTANT,prefix);
          numberSufix=1000;
          suffixToBeReplacedinCustomFile=numberSufix.toString();

        }else{
          numberSufix=Integer.parseInt(customObj.get(STR_CUSTOM_VALUE))+count;
          count++;
          suffixToBeReplacedinCustomFile=numberSufix.toString();
        }

        updatedUserName=prefix+numberSufix;
        useridFilter = Filter.eq(ATR_USERID,updatedUserName);

        if(useridFilter != null){

          System.out.println("Filter is not null");

          options = new QueryOptions().addFilter(useridFilter);

          if (options != null){
            objects = context.getObjects(Identity.class, options);


          }
          if(objects.isEmpty()){
            objects=null;
          }


        }


      }
      mylogger.info("updatedUserName"+updatedUserName);
      // identity.setName(updatedUserName);
      identity.setAttribute(ATR_USERID,updatedUserName);
      //Sets Value in Custom Object
      mapObj.put(STR_CUSTOM_VALUE,suffixToBeReplacedinCustomFile);
      attrs.setMap(mapObj);
      customObj.setAttributes(attrs);
      context.saveObject(customObj);
      context.commitTransaction();


    }

  }</Source>
  </Rule>
  <Rule created="1604263674578" id="0a111e5875691e4f8175859102d1271a" language="beanshell" modified="1604263683522" name="Delete-Identities-Rule">
    <Source>
  import sailpoint.api.Terminator;
import sailpoint.object.Filter;

import sailpoint.object.Identity;
import sailpoint.api.ObjectUtil;

import sailpoint.object.Custom;


       
		
      Terminator t = new Terminator(context);
				      t.deleteObjects(Identity.class, new QueryOptions().addFilter(Filter.eq("links.application.name", "")));
      return "Success";
			
		

                   </Source>
  </Rule>
  <Rule created="1604263674695" id="0a111e5875691e4f817585910347271b" language="beanshell" modified="1618230982567" name="CF-CORPADDN-RULE" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
import sailpoint.object.*;
  public String getUniqueDN(Identity identity){
  
 System.out.println("Inside AD DN Creation Rule");
  
 System.out.println("Inside AD DN Creation Rule:"+identity);
  if(identity != null){
 
  String firstname =  identity.getFirstname();
  String lastname =  identity.getLastname();
  System.out.println("In DN Rule firstname is:::"+firstname);
  String employeeType  = identity.getAttribute(ATR_EMPLOYEETYPE);
  String userDN ="";
  int count=0;
   char ch='a';
    System.out.println("In DN Rule, user type: OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com:"+ASSOCIATEOU);
     System.out.println("In DN Rule, user type: OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com:"+ASSOCIATEOU);
  if(null != employeeType &amp;&amp; employeeType.equalsIgnoreCase(STR_EMPLOYEE)){
    System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
    
    userDN = "cn="+lastname+"\\,"+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
  
  }else{
    userDN ="cn="+lastname+"\\,"+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
  }
  System.out.println("Inside  DN Rule, user  Dn******"+userDN);
 
  if(dnValidation(userDN)){
    return userDN;
  }else{
    if(null != employeeType &amp;&amp; employeeType.equalsIgnoreCase(STR_EMPLOYEE)){
      System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
      if(identity.getAttribute("middleName")!=null){
        userDN = "cn="+lastname+identity.getAttribute("middleName").toString()+"\\,"+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
        
        if(dnValidation(userDN)){
          return userDN;
        }else{
          userDN = "cn="+lastname+"X"+"\\,"+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
           if(dnValidation(userDN)){
            return userDN;
          }else{
            while(count @lt 26){
              userDN = "cn="+lastname+Character.toString(ch)+"\\,"+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
               if(dnValidation(userDN)){
                return userDN;
              }else{
                count++;
              }

            }
          }
          System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
        }
      }
      else{
            while(count @lt 26){
              userDN = "cn="+lastname+Character.toString(ch);+"\\,"+firstname+","+"OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
            
              if(dnValidation(userDN)){
                return userDN;
              }else{
                count++;
              }

            }
          }

    }else{
     if(identity.getAttribute("middleName")!=null){
        userDN = "cn="+lastname+identity.getAttribute("middleName").toString()+"\\,"+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
       if(dnValidation(userDN)){
          return userDN;
        }else{
           userDN = "cn="+lastname+"X"+"\\,"+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
           if(dnValidation(userDN)){
           return userDN;
        }else{
          while(count @lt 26){
           userDN = "cn="+lastname+Character.toString(ch)+"\\,"+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
                      
        if(dnValidation(userDN)){
          return userDN;
        }else{
          count++;
            }
          
        }
        }
        System.out.println("In DN Rule, user type: Employee, setting DN:::"+userDN);
      }
      }
      else{
          while(count @lt 26){
           userDN = "cn="+lastname+Character.toString(ch)+"\\,"+firstname+","+"OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com";
                       
        if(dnValidation(userDN)){
          return userDN;
        }else{
          count++;
            }
          
        }
        }


    }
  }
  }
  }

  </Source>
  </Rule>
  <Rule created="1604263674806" id="0a111e5875691e4f8175859103b6271c" language="beanshell" modified="1618230982561" name="NN-Test Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e98226e3" name="CF-CommonWebServiceLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e84526de" name="LaunchPowerShellRule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f817585910347271b" name="CF-CORPADDN-RULE"/>
    </ReferencedRules>
    <Source>

     
  import sailpoint.object.*;
import java.lang.Character;
  import sailpoint.object.Identity;
 
  //Identity identity = context.getObjectByName(Identity.class,"025499");
  //return identity;
/*String firstname ="";
String displayName = "";
String middlename = identity.getAttribute("middleName");
String lastname =  identity.getLastname();
if(identity.getAttribute("prefFirstName")!=null){
    firstname = identity.getAttribute("prefFirstName");
}else{
    firstname =  identity.getFirstname();
}
if(null != middlename){
    middlename=Character.toString(middlename.charAt(0));
    displayName = lastname+", "+firstname+" "+middlename;
} else {
   displayName = lastname+", "+firstname;
}    
return displayName;*/
	import sailpoint.object.Application;
  import sailpoint.object.Attributes;

  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.Bundle;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import org.apache.log4j.Logger;

  /*Identity workGroupObj = context.getObjectByName(Identity.class,"AAPC");
  Filter useridFilter = Filter.eq("userid","uaab2700");

      				if(useridFilter != null){

       				System.out.println("Filter is not null");

        			QueryOptions optionsGroupMember = new QueryOptions().addFilter(useridFilter);

        			if (optionsGroupMember != null){
          			objectsGroupMember = context.getObjects(Identity.class, optionsGroupMember);
          			System.out.println("objectsGroupMember"+objectsGroupMember);
          			if(objectsGroupMember.isEmpty()){
            					objectsGroupMember=null;
          				}
       	 			}
      			}
      if(objectsGroupMember!=null)
          {
      			for(Identity identity:objectsGroupMember)
  					{
				//Identity identityMember = context.getObjectByName(Identity.class,groupMembers[i]);
        identity.remove(workGroupObj);
        context.saveObject(workGroupObj);
        context.commitTransaction();
            }
      }
		
  return "User Removed Successfully";*/
  //return context.decrypt("1:ACP:+YzQXB7M0wUlGhFU1mBKVkAnJzH37ODkyv78AOb1h3Y=");
  //return  singleAccountAggregation("OneStopSand//-ServiceNow","aad3742");
  //Identity identity = context.getObjectByName(Identity.class, "100296");
  //ProvisioningPlan p= buildAccountDisablePlan(identity);
 // return p;
  //Provisioner  prov = new Provisioner(context);

  //prov.compile(p);
  //prov.execute();
    // return prov.getProject();     
  //return prov.getProject();
  //return  singleAccountAggregation("FEPOC AD DEV - Read Only","CN=OD59 59,CN=Users,DC=fepocdev,DC=com");
  //return singleAccountAggregation("BizappAD","CN=aal7407,OU=Users,OU=Corporate,DC=bizappstest,DC=local");
  return singleAccountAggregation("Active Directory","CN=Holly\\, Amit,OU=Termed Users,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
 //return  singleAccountAggregation("BizAppAD","CN=aaz5447,OU=Users,OU=Corporate,DC=bizappstest,DC=local");
  //return singleAccountAggregation("HR Application","390555");
  
  //return aggregationResult;
  //return  singleAccountAggregation("ISAM LDAP","uid=aaa9733,ou=users,dc=carefirst,dc=com");
  //return  singleAccountAggregation("ISAM LDAP","uid=aaz5447");

  /*HashMap map = new HashMap();
  	map.put("003727","CN=Kone\\, Robin,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");


        Set keySet = map.keySet();
        for (String  identityName : keySet) {
          ProvisioningPlan p = new ProvisioningPlan();
Identity identity = context.getObjectByName(Identity.class, identityName);
  p.setIdentity(identity);
AccountRequest accountRequest = new AccountRequest();

        accountRequest.setApplication("Active Directory");
        accountRequest.setNativeIdentity(map.get(identityName));
        accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        accountRequest.add(new AttributeRequest("password",ProvisioningPlan.Operation.Set,"Password1234"));
		 p.add(accountRequest);
  Provisioner  prov = new Provisioner(context);
  prov.compile(p);
  prov.execute();

        return prov.getProject();

        }*/





  // return prov.getProject();


  /*   String mgrUserId = "aan9377";
        String userid = "aan9378";

        try{

        AccountRequest accountRequest = new AccountRequest();
        accountRequest.setApplication("Active Directory");
        accountRequest.setNativeIdentity("aan9378");
        accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        accountRequest.add(new AttributeRequest("identityName",ProvisioningPlan.Operation.Set,userid));
        accountRequest.add(new AttributeRequest("manageruserid",ProvisioningPlan.Operation.Set,mgrUserId));
         // return accountRequest;
        Map data = new HashMap();
        Rule ruleObj = context.getObjectByName(Rule.class,"NN-HomeDirectoryReassign-Rule");
        System.out.println("HomeDriveReassign Step accountRequest is "+accountRequest);
        Application appProdObj = context.getObjectByName(Application.class, "Active Directory");
        if(ruleObj != null &amp;&amp; appProdObj != null &amp;&amp; accountRequest != null){
        System.out.println("HomeDriveReassign Step Inside If App,Rule,AccReq not null is ");
        data.put("postScript",ruleObj);

        data.put("Application", appProdObj.getAttributes());
        data.put("Request", accountRequest);

        String IQServiceServer = "sv-spidsvc-t3.carefirsttest.com";
        // String IQServiceServer = "SV-SPIDSVC-D3.carefirsttest.com";
        int IQServicePort = 5050;
        RPCService service = new RPCService(IQServiceServer,IQServicePort);
        service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
        RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
        System.out.println("HomeDriveCreation Step Before Executing Powershell Rule data :::  "+data);

        // System.out.println("HomeDriveReassign Step Before Executing Powershell Rule request :::  "+request.toXml());
        RpcResponse response = service.execute(request);
        System.out.println("HomeDriveCreation Step After Executing Powershell Rule ");
        }else{
        System.out.println("Rule,Application is not found in IIQ in HomeDriveReassign Step ");
        }


        }
        catch(Exception e){
        }

  return "Success PS Script";*/
  ArrayList l= new ArrayList();
  /*l.add("uid=AAB3535,ou=users,dc=carefirst,dc=com");
l.add("uid=AAC7604,ou=users,dc=carefirst,dc=com");
l.add("uid=AAC7613,ou=users,dc=carefirst,dc=com");
l.add("uid=CW22BV7,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0142,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2266,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2586-tt,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2662,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa9443,ou=users,dc=carefirst,dc=com");
l.add("uid=aab0490,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1334-tt,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1334-tt1,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1406,ou=users,dc=carefirst,dc=com");
l.add("uid=aab5488,ou=users,dc=carefirst,dc=com");
l.add("uid=aab5751,ou=users,dc=carefirst,dc=com");
l.add("uid=aab7302,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8426,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8670,ou=users,dc=carefirst,dc=com");
l.add("uid=aab9863-tt,ou=users,dc=carefirst,dc=com");
l.add("uid=aac6895,ou=users,dc=carefirst,dc=com");
l.add("uid=aac7085,ou=users,dc=carefirst,dc=com");
l.add("uid=aac7135,ou=users,dc=carefirst,dc=com");
l.add("uid=aac7375,ou=users,dc=carefirst,dc=com");
l.add("uid=aac7583,ou=users,dc=carefirst,dc=com");
l.add("uid=aad6319,ou=users,dc=carefirst,dc=com");
l.add("uid=aad6991,ou=users,dc=carefirst,dc=com");
l.add("uid=aad9842,ou=users,dc=carefirst,dc=com");
l.add("uid=aae3651,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22dt1,ou=users,dc=carefirst,dc=com");
l.add("uid=tmfa10,ou=users,dc=carefirst,dc=com");
l.add("uid=tmfa9,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3422,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2578,ou=users,dc=carefirst,dc=com");
l.add("uid=kchennaman,ou=users,dc=carefirst,dc=com");
l.add("uid=rbark,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2444,ou=users,dc=carefirst,dc=com");
l.add("uid=472,ou=users,dc=carefirst,dc=com");
l.add("uid=649,ou=users,dc=carefirst,dc=com");
l.add("uid=701,ou=users,dc=carefirst,dc=com");
l.add("uid=724,ou=users,dc=carefirst,dc=com");
l.add("uid=725,ou=users,dc=carefirst,dc=com");
l.add("uid=766,ou=users,dc=carefirst,dc=com");
l.add("uid=1037,ou=users,dc=carefirst,dc=com");
l.add("uid=1307,ou=users,dc=carefirst,dc=com");
l.add("uid=1697,ou=users,dc=carefirst,dc=com");
l.add("uid=1885,ou=users,dc=carefirst,dc=com");
l.add("uid=1918,ou=users,dc=carefirst,dc=com");
l.add("uid=2133,ou=users,dc=carefirst,dc=com");
l.add("uid=2270,ou=users,dc=carefirst,dc=com");
l.add("uid=2345,ou=users,dc=carefirst,dc=com");
l.add("uid=3894,ou=users,dc=carefirst,dc=com");
l.add("uid=3922,ou=users,dc=carefirst,dc=com");
l.add("uid=4359,ou=users,dc=carefirst,dc=com");
l.add("uid=5459,ou=users,dc=carefirst,dc=com");
l.add("uid=8031,ou=users,dc=carefirst,dc=com");
l.add("uid=8060,ou=users,dc=carefirst,dc=com");
l.add("uid=8394,ou=users,dc=carefirst,dc=com");*/
  /* l.add("uid=FC98TL6,ou=users,dc=carefirst,dc=com");
l.add("uid=aab4901,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6578,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2455,ou=users,dc=carefirst,dc=com");
l.add("uid=rroberts,ou=users,dc=carefirst,dc=com");
l.add("uid=aae3754,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3162,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22jx6,ou=users,dc=carefirst,dc=com");
l.add("uid=aab9765,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0906,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4875,ou=users,dc=carefirst,dc=com");
l.add("uid=580F042,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0445,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22jh6,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6189,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8435,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8435,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8827,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3663,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8595,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8781,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8192,ou=users,dc=carefirst,dc=com");
l.add("uid=aae0933,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22dh8,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22ki8,ou=users,dc=carefirst,dc=com");
l.add("uid=aad9087,ou=users,dc=carefirst,dc=com");
l.add("uid=aad9090,ou=users,dc=carefirst,dc=com");
l.add("uid=aad9094,ou=users,dc=carefirst,dc=com");
l.add("uid=aad9108,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22hd7,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2573,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4468,ou=users,dc=carefirst,dc=com");
l.add("uid=fc98tn2,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4602,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0405,ou=users,dc=carefirst,dc=com");
l.add("uid=aae4723,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4827,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2066,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8706,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6919,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22hp5,ou=users,dc=carefirst,dc=com");
l.add("uid=aab7191,ou=users,dc=carefirst,dc=com");
l.add("uid=aab5182,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8005,ou=users,dc=carefirst,dc=com");
l.add("uid=aad6809,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3501,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3445,ou=users,dc=carefirst,dc=com");
l.add("uid=aab2453,ou=users,dc=carefirst,dc=com");
l.add("uid=aab2453,ou=users,dc=carefirst,dc=com");
l.add("uid=FC99T7B,ou=users,dc=carefirst,dc=com");
l.add("uid=ndundigall,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3039,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1134,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22ht6,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6385,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1277,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1303,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1355,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4820,ou=users,dc=carefirst,dc=com");
l.add("uid=aab7856,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22jw5,ou=users,dc=carefirst,dc=com");
l.add("uid=aab2802,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0863,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4221,ou=users,dc=carefirst,dc=com");
l.add("uid=rkovuri,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1602,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2452,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4462,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0775,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6612,ou=users,dc=carefirst,dc=com");
l.add("uid=GRIGGENS,ou=users,dc=carefirst,dc=com");
l.add("uid=MWILLIGAN,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4785,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa5580,ou=users,dc=carefirst,dc=com");
l.add("uid=FC98TG7,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8629,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8628,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2198,ou=users,dc=carefirst,dc=com");
l.add("uid=aae4669,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0956,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22gw3,ou=users,dc=carefirst,dc=com");
l.add("uid=aab3296,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8449,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3630,ou=users,dc=carefirst,dc=com");
l.add("uid=FC99T8X,ou=users,dc=carefirst,dc=com");
l.add("uid=aae8276,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8819,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa3205,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4771,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa9938,ou=users,dc=carefirst,dc=com");
l.add("uid=aad3972,ou=users,dc=carefirst,dc=com");
l.add("uid=aab6477,ou=users,dc=carefirst,dc=com");
l.add("uid=FC99TJO,ou=users,dc=carefirst,dc=com");
l.add("uid=FC99TJO,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa5213,ou=users,dc=carefirst,dc=com");
l.add("uid=jjones2,ou=users,dc=carefirst,dc=com");
l.add("uid=580F910,ou=users,dc=carefirst,dc=com");
l.add("uid=aab3029,ou=users,dc=carefirst,dc=com");
l.add("uid=aad0301,ou=users,dc=carefirst,dc=com");
l.add("uid=aab3215,ou=users,dc=carefirst,dc=com");
l.add("uid=aab6643,ou=users,dc=carefirst,dc=com");
l.add("uid=gharris,ou=users,dc=carefirst,dc=com");
l.add("uid=rpayne1,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1904,ou=users,dc=carefirst,dc=com");
l.add("uid=aac0016,ou=users,dc=carefirst,dc=com");
l.add("uid=aac3862,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22hw7,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0311,ou=users,dc=carefirst,dc=com");
l.add("uid=FC98T1Q,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8191,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22fw8,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4812,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6142,ou=users,dc=carefirst,dc=com");
l.add("uid=aab4853,ou=users,dc=carefirst,dc=com");
l.add("uid=nkrugman,ou=users,dc=carefirst,dc=com");
l.add("uid=aab5317,ou=users,dc=carefirst,dc=com");
l.add("uid=aab5438,ou=users,dc=carefirst,dc=com");
l.add("uid=skongara,ou=users,dc=carefirst,dc=com");
l.add("uid=aac9318,ou=users,dc=carefirst,dc=com");
l.add("uid=bdiamond,ou=users,dc=carefirst,dc=com");
l.add("uid=aae8177,ou=users,dc=carefirst,dc=com");
l.add("uid=lcastro1,ou=users,dc=carefirst,dc=com");
l.add("uid=jyesudhaso,ou=users,dc=carefirst,dc=com");
l.add("uid=schopper1,ou=users,dc=carefirst,dc=com");
l.add("uid=kclarkin,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8297,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6629,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa5134,ou=users,dc=carefirst,dc=com");
l.add("uid=aac6472,ou=users,dc=carefirst,dc=com");
l.add("uid=hpadmala,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22jo8,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8693,ou=users,dc=carefirst,dc=com");
l.add("uid=aad0084,ou=users,dc=carefirst,dc=com");
l.add("uid=kvenkat,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa5775,ou=users,dc=carefirst,dc=com");
l.add("uid=aac2952,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa7258,ou=users,dc=carefirst,dc=com");
l.add("uid=brivera1,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1542,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa6733,ou=users,dc=carefirst,dc=com");
l.add("uid=adoherty,ou=users,dc=carefirst,dc=com");
l.add("uid=jschneider,ou=users,dc=carefirst,dc=com");
l.add("uid=FC99TNZ,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1590,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8622,ou=users,dc=carefirst,dc=com");
l.add("uid=aae1488,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa5210,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1133,ou=users,dc=carefirst,dc=com");
l.add("uid=aab2300,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa4870,ou=users,dc=carefirst,dc=com");
l.add("uid=FC98TV1,ou=users,dc=carefirst,dc=com");
l.add("uid=aabelman,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa7792,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22ii6,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8325,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8327,ou=users,dc=carefirst,dc=com");
l.add("uid=aac5465,ou=users,dc=carefirst,dc=com");
l.add("uid=FC98TX4,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22jd3,ou=users,dc=carefirst,dc=com");
l.add("uid=CW22AA6,ou=users,dc=carefirst,dc=com");
l.add("uid=aad8364,ou=users,dc=carefirst,dc=com");
l.add("uid=aac5591,ou=users,dc=carefirst,dc=com");
l.add("uid=aac5649,ou=users,dc=carefirst,dc=com");
l.add("uid=aab1377,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22fw6,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22fw2,ou=users,dc=carefirst,dc=com");
l.add("uid=aac1056,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8120,ou=users,dc=carefirst,dc=com");
l.add("uid=aab7442,ou=users,dc=carefirst,dc=com");
l.add("uid=aac7980,ou=users,dc=carefirst,dc=com");
l.add("uid=aad1388,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa8160,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22fi7,ou=users,dc=carefirst,dc=com");
l.add("uid=aad7253,ou=users,dc=carefirst,dc=com");
l.add("uid=aad7259,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22fn9,ou=users,dc=carefirst,dc=com");
l.add("uid=cs22as7,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22fp4,ou=users,dc=carefirst,dc=com");
l.add("uid=aae2858,ou=users,dc=carefirst,dc=com");
l.add("uid=aac7615,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22hr6,ou=users,dc=carefirst,dc=com");
l.add("uid=aab8515,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22dj4,ou=users,dc=carefirst,dc=com");
l.add("uid=aab5486,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22ec3,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22ec6,ou=users,dc=carefirst,dc=com");
l.add("uid=cw22ec6,ou=users,dc=carefirst,dc=com");
l.add("uid=aab3123,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1066,ou=users,dc=carefirst,dc=com");
l.add("uid=aab7597,ou=users,dc=carefirst,dc=com");
l.add("uid=aac4656,ou=users,dc=carefirst,dc=com");
l.add("uid=aad8094,ou=users,dc=carefirst,dc=com");
l.add("uid=BSROPerfUser2,ou=users,dc=carefirst,dc=com");
l.add("uid=aab7807,ou=users,dc=carefirst,dc=com");
l.add("uid=aac4216,ou=users,dc=carefirst,dc=com");
l.add("uid=aac8754,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa0230,ou=users,dc=carefirst,dc=com");
l.add("uid=aad5284,ou=users,dc=carefirst,dc=com");
l.add("uid=aac2022,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa7424,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2254,ou=users,dc=carefirst,dc=com");
l.add("uid=rharris,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1965,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1968,ou=users,dc=carefirst,dc=com");
l.add("uid=RADAMS4,ou=users,dc=carefirst,dc=com");
l.add("uid=RLANGLEY1,ou=users,dc=carefirst,dc=com");
l.add("uid=rtutman,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1946,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1946,ou=users,dc=carefirst,dc=com");
l.add("uid=hhackerman,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2844,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2844,ou=users,dc=carefirst,dc=com");
l.add("uid=aac6633,ou=users,dc=carefirst,dc=com");
l.add("uid=aae5817,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2946,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa2946,ou=users,dc=carefirst,dc=com");
l.add("uid=dswick,ou=users,dc=carefirst,dc=com");
l.add("uid=cbishop2,ou=users,dc=carefirst,dc=com");
l.add("uid=cbishop2,ou=users,dc=carefirst,dc=com");
l.add("uid=ys96t7u,ou=users,dc=carefirst,dc=com");
l.add("uid=kcarter1,ou=users,dc=carefirst,dc=com");
l.add("uid=mjones3,ou=users,dc=carefirst,dc=com");
l.add("uid=dpowell,ou=users,dc=carefirst,dc=com");
l.add("uid=mevans,ou=users,dc=carefirst,dc=com");
l.add("uid=qbannister,ou=users,dc=carefirst,dc=com");
l.add("uid=mskinner,ou=users,dc=carefirst,dc=com");
l.add("uid=mskinner,ou=users,dc=carefirst,dc=com");
l.add("uid=kbuckle1,ou=users,dc=carefirst,dc=com");
l.add("uid=kbuckle1,ou=users,dc=carefirst,dc=com");
l.add("uid=FE99TAV,ou=users,dc=carefirst,dc=com");
l.add("uid=mhaggerty,ou=users,dc=carefirst,dc=com");
l.add("uid=2494,ou=users,dc=carefirst,dc=com");
l.add("uid=1026,ou=users,dc=carefirst,dc=com");
l.add("uid=ys99t3i,ou=users,dc=carefirst,dc=com");
l.add("uid=228,ou=users,dc=carefirst,dc=com");
l.add("uid=mthreat,ou=users,dc=carefirst,dc=com");
l.add("uid=mthreat,ou=users,dc=carefirst,dc=com");
l.add("uid=dwaltemeye,ou=users,dc=carefirst,dc=com");
l.add("uid=npulianas,ou=users,dc=carefirst,dc=com");
l.add("uid=cbrengle,ou=users,dc=carefirst,dc=com");
l.add("uid=cbrengle,ou=users,dc=carefirst,dc=com");
l.add("uid=vrymer,ou=users,dc=carefirst,dc=com");
l.add("uid=8142,ou=users,dc=carefirst,dc=com");
l.add("uid=2318,ou=users,dc=carefirst,dc=com");
l.add("uid=6029,ou=users,dc=carefirst,dc=com");
l.add("uid=6029,ou=users,dc=carefirst,dc=com");
l.add("uid=kwood1,ou=users,dc=carefirst,dc=com");
l.add("uid=hcorbett,ou=users,dc=carefirst,dc=com");
l.add("uid=lshickman,ou=users,dc=carefirst,dc=com");
l.add("uid=zserdyuk,ou=users,dc=carefirst,dc=com");
l.add("uid=tprofilio,ou=users,dc=carefirst,dc=com");
l.add("uid=aab2973,ou=users,dc=carefirst,dc=com");
l.add("uid=5260,ou=users,dc=carefirst,dc=com");
l.add("uid=5260,ou=users,dc=carefirst,dc=com");
l.add("uid=dlegeer,ou=users,dc=carefirst,dc=com");
l.add("uid=4337,ou=users,dc=carefirst,dc=com");
l.add("uid=saustin,ou=users,dc=carefirst,dc=com");
l.add("uid=saustin,ou=users,dc=carefirst,dc=com");
l.add("uid=ecasteel,ou=users,dc=carefirst,dc=com");
l.add("uid=eange,ou=users,dc=carefirst,dc=com");
l.add("uid=eange,ou=users,dc=carefirst,dc=com");
l.add("uid=EBRADSHAW,ou=users,dc=carefirst,dc=com");
l.add("uid=mgemmill,ou=users,dc=carefirst,dc=com");
l.add("uid=mgrowden,ou=users,dc=carefirst,dc=com");
l.add("uid=meddy,ou=users,dc=carefirst,dc=com");
l.add("uid=swatkins,ou=users,dc=carefirst,dc=com");
l.add("uid=swhite,ou=users,dc=carefirst,dc=com");
l.add("uid=swhite,ou=users,dc=carefirst,dc=com");
l.add("uid=swinston,ou=users,dc=carefirst,dc=com");
l.add("uid=switt,ou=users,dc=carefirst,dc=com");
l.add("uid=tbankston,ou=users,dc=carefirst,dc=com");
l.add("uid=tbeaver1,ou=users,dc=carefirst,dc=com");
l.add("uid=aac5706,ou=users,dc=carefirst,dc=com");
l.add("uid=twilliams3,ou=users,dc=carefirst,dc=com");
l.add("uid=6789,ou=users,dc=carefirst,dc=com");
l.add("uid=6789,ou=users,dc=carefirst,dc=com");
l.add("uid=8771,ou=users,dc=carefirst,dc=com");
l.add("uid=7301,ou=users,dc=carefirst,dc=com");
l.add("uid=8840,ou=users,dc=carefirst,dc=com");
l.add("uid=cpuffenbar,ou=users,dc=carefirst,dc=com");
l.add("uid=5096,ou=users,dc=carefirst,dc=com");
l.add("uid=5248,ou=users,dc=carefirst,dc=com");
l.add("uid=5248,ou=users,dc=carefirst,dc=com");
l.add("uid=8775,ou=users,dc=carefirst,dc=com");
l.add("uid=8775,ou=users,dc=carefirst,dc=com");
l.add("uid=7124,ou=users,dc=carefirst,dc=com");
l.add("uid=7124,ou=users,dc=carefirst,dc=com");
l.add("uid=dgransee,ou=users,dc=carefirst,dc=com");
l.add("uid=cmarshall,ou=users,dc=carefirst,dc=com");
l.add("uid=8747,ou=users,dc=carefirst,dc=com");
l.add("uid=7176,ou=users,dc=carefirst,dc=com");
l.add("uid=5878,ou=users,dc=carefirst,dc=com");
l.add("uid=8078,ou=users,dc=carefirst,dc=com");
l.add("uid=8078,ou=users,dc=carefirst,dc=com");
l.add("uid=8324,ou=users,dc=carefirst,dc=com");
l.add("uid=8324,ou=users,dc=carefirst,dc=com");
l.add("uid=6080,ou=users,dc=carefirst,dc=com");
l.add("uid=7237,ou=users,dc=carefirst,dc=com");
l.add("uid=5724,ou=users,dc=carefirst,dc=com");
l.add("uid=dgomez,ou=users,dc=carefirst,dc=com");
l.add("uid=6673,ou=users,dc=carefirst,dc=com");
l.add("uid=5680,ou=users,dc=carefirst,dc=com");
l.add("uid=djohnston,ou=users,dc=carefirst,dc=com");
l.add("uid=8162,ou=users,dc=carefirst,dc=com");
l.add("uid=cporter,ou=users,dc=carefirst,dc=com");
l.add("uid=8270,ou=users,dc=carefirst,dc=com");
l.add("uid=7363,ou=users,dc=carefirst,dc=com");
l.add("uid=7363,ou=users,dc=carefirst,dc=com");
l.add("uid=charmon,ou=users,dc=carefirst,dc=com");
l.add("uid=charmon,ou=users,dc=carefirst,dc=com");
l.add("uid=1885,ou=users,dc=carefirst,dc=com");
l.add("uid=ahicks,ou=users,dc=carefirst,dc=com");
l.add("uid=2211,ou=users,dc=carefirst,dc=com");
l.add("uid=hdorsey,ou=users,dc=carefirst,dc=com");
l.add("uid=hlamont,ou=users,dc=carefirst,dc=com");
l.add("uid=hlamont,ou=users,dc=carefirst,dc=com");
l.add("uid=hwade,ou=users,dc=carefirst,dc=com");
l.add("uid=mtildon,ou=users,dc=carefirst,dc=com");
l.add("uid=mtildon,ou=users,dc=carefirst,dc=com");
l.add("uid=mw90tgc,ou=users,dc=carefirst,dc=com");
l.add("uid=mw90tgc,ou=users,dc=carefirst,dc=com");
l.add("uid=mw90th3,ou=users,dc=carefirst,dc=com");
l.add("uid=mw90th3,ou=users,dc=carefirst,dc=com");
l.add("uid=mw90ty3,ou=users,dc=carefirst,dc=com");
l.add("uid=mw90tsj,ou=users,dc=carefirst,dc=com");
l.add("uid=mz99tfp,ou=users,dc=carefirst,dc=com");
l.add("uid=mz99tfp,ou=users,dc=carefirst,dc=com");
l.add("uid=mz99tit,ou=users,dc=carefirst,dc=com");
l.add("uid=1567,ou=users,dc=carefirst,dc=com");
l.add("uid=1567,ou=users,dc=carefirst,dc=com");
l.add("uid=mz99tqh,ou=users,dc=carefirst,dc=com");
l.add("uid=mz99tqh,ou=users,dc=carefirst,dc=com");
l.add("uid=1667,ou=users,dc=carefirst,dc=com");
l.add("uid=1707,ou=users,dc=carefirst,dc=com");
l.add("uid=1725,ou=users,dc=carefirst,dc=com");
l.add("uid=1759,ou=users,dc=carefirst,dc=com");
l.add("uid=1759,ou=users,dc=carefirst,dc=com");
l.add("uid=1834,ou=users,dc=carefirst,dc=com");
l.add("uid=1918,ou=users,dc=carefirst,dc=com");
l.add("uid=1921,ou=users,dc=carefirst,dc=com");
l.add("uid=2006,ou=users,dc=carefirst,dc=com");
l.add("uid=2006,ou=users,dc=carefirst,dc=com");
l.add("uid=2017,ou=users,dc=carefirst,dc=com");
l.add("uid=2017,ou=users,dc=carefirst,dc=com");
l.add("uid=2103,ou=users,dc=carefirst,dc=com");
l.add("uid=asimpkins,ou=users,dc=carefirst,dc=com");
l.add("uid=asperr,ou=users,dc=carefirst,dc=com");
l.add("uid=award,ou=users,dc=carefirst,dc=com");
l.add("uid=award,ou=users,dc=carefirst,dc=com");
l.add("uid=bbanks,ou=users,dc=carefirst,dc=com");
l.add("uid=bbanks,ou=users,dc=carefirst,dc=com");
l.add("uid=jbassetti,ou=users,dc=carefirst,dc=com");
l.add("uid=6015,ou=users,dc=carefirst,dc=com");
l.add("uid=6015,ou=users,dc=carefirst,dc=com");
l.add("uid=4310,ou=users,dc=carefirst,dc=com");
l.add("uid=4310,ou=users,dc=carefirst,dc=com");
l.add("uid=aaa1688,ou=users,dc=carefirst,dc=com");
l.add("uid=ctuveson,ou=users,dc=carefirst,dc=com");
l.add("uid=ctuveson,ou=users,dc=carefirst,dc=com");
l.add("uid=jconley,ou=users,dc=carefirst,dc=com");
l.add("uid=wcullings,ou=users,dc=carefirst,dc=com");
l.add("uid=mdefoe,ou=users,dc=carefirst,dc=com");
l.add("uid=ndavid,ou=users,dc=carefirst,dc=com");
l.add("uid=nknapper,ou=users,dc=carefirst,dc=com");
l.add("uid=2360,ou=users,dc=carefirst,dc=com");
l.add("uid=2368,ou=users,dc=carefirst,dc=com");
l.add("uid=2368,ou=users,dc=carefirst,dc=com");
l.add("uid=2914,ou=users,dc=carefirst,dc=com");
l.add("uid=3261,ou=users,dc=carefirst,dc=com");
l.add("uid=jdaddezio,ou=users,dc=carefirst,dc=com");
l.add("uid=5371,ou=users,dc=carefirst,dc=com");
l.add("uid=8394,ou=users,dc=carefirst,dc=com");
l.add("uid=8243,ou=users,dc=carefirst,dc=com");
l.add("uid=dford,ou=users,dc=carefirst,dc=com");
l.add("uid=8441,ou=users,dc=carefirst,dc=com");
l.add("uid=jdorsey,ou=users,dc=carefirst,dc=com");
l.add("uid=jdorsey,ou=users,dc=carefirst,dc=com");
l.add("uid=5823,ou=users,dc=carefirst,dc=com");
l.add("uid=5805,ou=users,dc=carefirst,dc=com");
l.add("uid=191,ou=users,dc=carefirst,dc=com");
l.add("uid=264,ou=users,dc=carefirst,dc=com");
l.add("uid=102,ou=users,dc=carefirst,dc=com");
l.add("uid=261,ou=users,dc=carefirst,dc=com");
l.add("uid=350,ou=users,dc=carefirst,dc=com");
l.add("uid=9988,ou=users,dc=carefirst,dc=com");
l.add("uid=9988,ou=users,dc=carefirst,dc=com");
l.add("uid=9839,ou=users,dc=carefirst,dc=com");
l.add("uid=9998,ou=users,dc=carefirst,dc=com");
l.add("uid=9962,ou=users,dc=carefirst,dc=com");
l.add("uid=aberson,ou=users,dc=carefirst,dc=com");
l.add("uid=aberson,ou=users,dc=carefirst,dc=com");
l.add("uid=ablizzard,ou=users,dc=carefirst,dc=com");
l.add("uid=rsantos,ou=users,dc=carefirst,dc=com");
l.add("uid=mfrick,ou=users,dc=carefirst,dc=com");
l.add("uid=mfrick,ou=users,dc=carefirst,dc=com");
l.add("uid=dblessing,ou=users,dc=carefirst,dc=com");
l.add("uid=dblessing,ou=users,dc=carefirst,dc=com");
l.add("uid=dshuey,ou=users,dc=carefirst,dc=com");
l.add("uid=lburrier,ou=users,dc=carefirst,dc=com");
l.add("uid=1093,ou=users,dc=carefirst,dc=com");
*/
  /*String a="";
l.add("CN=Koby\\,Wyatt,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Kole\\,Blanka,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Leighton\\,Zakariya,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Matteo\\,Blayke,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Mikolaj\\,Alastair,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Millar\\,Cadence,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Mitchell\\,Ally,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Nolan\\,Caitlyn,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Rayyan\\,Anton,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Rogan\\,Cassidy,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Saul\\,Avery,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Syed\\,Celeste,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Tate\\,Ayan,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Ace\\,Chiara,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Ajay\\,Barclay,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Albi\\,Chelsea,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Aydin\\,Bjorn,OU=Contractors,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Borys\\,Eadie,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Brayden\\,Cayden,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Cory\\,Colt,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Edan\\,Etta,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Fynn\\,Corran,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Gordon\\,Hailie,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Hughie\\,Dawid,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Ismail\\,India,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Jaiden\\,Emmanuel,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Lenny\\,Ivy-Rose,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Lockie\\,Forrest,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Loki\\,Jorgia,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Mackenzie\\,Gavin,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Malachy\\,Kiana,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Mohamed\\,Grant,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");
l.add("CN=Olivier\\,Zynnell,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");




  for(String b:l){

String result=  singleAccountAggregation("Active Directory",b);
    b=a;

  }
  return a;*/
  //return  singleAccountAggregation("BizAppAD","CN=aam0168,OU=Users,OU=Corporate,DC=bizappstest,DC=local");
  /*return  singleAccountAggregation("ISAM LDAP","uid=od22abc186,ou=users,dc=carefirst,dc=com");
  return  singleAccountAggregation("Active Directory","CN=Charles\\,Harris,OU=AzureUsers,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");

 //return STR_ASSOCIATE_OU;
    public List getEntValues(Bundle bundle){
	List entValueList  = new ArrayList();
    if(null != bundle){
		if(null != bundle.getProfiles()){
     	List profiles = bundle.getProfiles();
		for (Profile profile : profiles) {
			List constraints = profile.getConstraints();
			for (Filter filter : constraints) {
				if(filter instanceof Filter.LeafFilter){
 				Object value = ((LeafFilter) filter).getValue();
					if(value instanceof String){
	//					entValueList.add(value);
					}
					if(value instanceof List){
						entValueList.addAll((Collection) value);
					}
			    }
		    }

        }
		 return entValueList; 
	  }
    }
 }

Bundle bundle = context.getObjectByName(Bundle.class, "ITRole1-NN");
 return getEntValues(bundle);

        Logger log = Logger.getLogger("com.carefirst.MyTest-Rule");
  log.info("Checcking loggers");
  return "Succes";

  Identity identity =context.getObjectByName(Identity.class,"100207");

//return dnValidation("CN=Deena\\,Madanee,OU=Associates,OU=Users,OU=Corporate,DC=carefirsttest,DC=com");

 return getUniqueDN(identity);
  ProvisioningPlan plan = new ProvisioningPlan();
// plan= buildjoinerPlan(identity.getName());
  //return plan;

    if(identity != null){
     plan = new ProvisioningPlan();
      System.out.println("Joiner:: Identity object found: "+identity);
      String userType = identity.getAttribute(ATR_EMPLOYEETYPE);

      AccountRequest acctReqIIQ = new AccountRequest();
      acctReqIIQ.setOperation(AccountRequest.Operation.Modify);
      acctReqIIQ.setApplication(APP_IIQ);
      acctReqIIQ.setNativeIdentity(identity.getName());
      //Check User Type
      acctReqIIQ.add(new AttributeRequest(ATR_ASSIGNEDROLES,"AD-TEST-T-CLMS &amp; SRVS CORP SRV -IT"));
plan.add(acctReqIIQ);
       plan.setIdentity(identity);
    }
  // return plan;
Provisioner  prov = new Provisioner(context);
   prov.compile(plan);
   prov.execute();
  return prov.getProject();*/
      </Source>
  </Rule>
  <Rule created="1604263674875" id="0a111e5875691e4f8175859103fb271d" language="beanshell" modified="1615518172175" name="CF-EmployeeId-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String employeeid = identity.getAttribute("employeeid");

return employeeid;</Source>
  </Rule>
  <Rule created="1604263674940" id="0a111e5875691e4f81758591043c271e" language="beanshell" modified="1617916827111" name="CF-HomeDrive-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>
  import sailpoint.object.*;

  System.out.println("**** Entering Rule: CF-HomeDrive-Rule ****");

  String location = identity.getAttribute(ATR_LOCATION);
  String homedrive = "";
  String homeDriveLocation = "";
  String hLocation = "";
  if(location !=null){
    if(location.equals("CANTN")){
      hLocation="\\\\carefirst.com\\corp\\canhome\\";
    }
    else if(location.equals("WSTVA")){
      hLocation="\\\\carefirst.com\\corp\\cashome\\";
    }

    else if(location.equals("COLUM")){

      hLocation="\\\\carefirst.com\\corp\\cdchome\\";
    }

    else if(location.equals("CGATE")){

      hLocation="\\\\carefirst.com\\corp\\cgwhome\\";
    }
    else if(location.equals("CUMBL")){

      hLocation="\\\\sm-combocmb-p3\\";
    }
    else if(location.equals("REOCU")){

      hLocation="\\\\sm-combocmb-p3\\";
    }
    else if(location.equals("UNION")){

      hLocation="\\\\carefirst.com\\corp\\dchome\\";
    }

    else if(location.equals("DELMA")){

      hLocation="\\\\sm-comboedo-p1\\";
    }

    else if(location.equals("REOSA")){
      hLocation="\\\\sm-comboedo-p1\\";
    }

    else if(location.equals("REOEA")){
      hLocation="\\\\sm-comboedo-p1\\";
    }

    else if(location.equals("OWML1")){

      hLocation="\\\\carefirst.com\\corp\\omhome\\";
    }

    else if(location.equals("OWML2")){
      hLocation="\\\\carefirst.com\\corp\\omhome\\";


    }
    else if(location.equals("OWML3")){

      hLocation="\\\\carefirst.com\\corp\\omhome\\";
    }

    else if(location.equals("REDRN")){

      hLocation="\\\\carefirst.com\\corp\\rrhome\\";
    }

    else if(location.equals("RDRN2")){

      hLocation="\\\\carefirst.com\\corp\\rrhome\\";
    }

    else if(location.equals("RR711")){

      hLocation="\\\\carefirst.com\\corp\\rrhome\\";
    }

    else if(location.equals("RR715")){

      hLocation="\\\\carefirst.com\\corp\\rrhome\\";
    }

    else if(location.equals("RR800")){

      hLocation="\\\\carefirst.com\\corp\\rrhome\\";
    }
    else if(location.equals("RR802")){

      hLocation="\\\\carefirst.com\\corp\\rrhome\\";
    }
    else{

      hLocation="\\\\carefirst.com\\corp\\cdchome\\";
    }
  }
  String userid = identity.getAttribute("userid");
  if(null != userid)
  	homeDriveLocation=hLocation+userid.toUpperCase();
  System.out.println("Inside Rule: CF-HomeDrive-Rule, homeDriveLocation = "+homeDriveLocation);
  System.out.println("**** Exiting Rule: CF-HomeDrive-Rule ****");
  return homeDriveLocation;</Source>
  </Rule>
  <Rule created="1604263675052" id="0a111e5875691e4f8175859104ac271f" language="beanshell" modified="1616829288312" name="NN-LaunchPowerShell-Rule">
    <Source>
  import sailpoint.object.Application;


  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;


  String strADAppName = "Active Directory Production";
  String identityName ="100208";
  
  //return appObj;
    Identity identity = context.getObjectByName(Identity.class,identityName);
  
//return identity;
  if(identity != null){
    Application appObj = context.getObjectByName(Application.class, strADAppName);
   // return appObj;
//Link linkObj = identity.getLink(appObj);
    
  // Fake account request
  AccountRequest accountRequest = new AccountRequest();
  accountRequest.setApplication(strADAppName);
   // accountRequest.setApplication("IIQ");
  accountRequest.setNativeIdentity(identityName);
  accountRequest.setOperation(AccountRequest.Operation.Create);
 accountRequest.add(new AttributeRequest("sAMAccountName",ProvisioningPlan.Operation.Set,"aaa7111"));
  accountRequest.add(new AttributeRequest("email",ProvisioningPlan.Operation.Set,"test.email@carefirsttest.com"));
  // return accountRequest;
  Map data = new HashMap();
  //Rule ruleObj = context.getObjectByName(Rule.class,"NN-Static-HomedriveCreation-Rule");
 // Rule ruleObj = context.getObjectByName(Rule.class,"NN-HomedriveCreation-Rule");
 // Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedriveCreation-Rule");
  //Rule ruleObj = context.getObjectByName(Rule.class,"CF-ExchangeSetRemoteAttrs-Rule");

    Rule ruleObj = context.getObjectByName(Rule.class,"ADUserPermissionsPSCommands-Rule");
  
  //return ruleObj;
  data.put("postScript",ruleObj);

	data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  
String IQServiceServer = "sv-spidsvc-d1.carefirst.com";
// String IQServiceServer = "SV-SPIDSVC-D3.carefirsttest.com";
  int IQServicePort = 5050;
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
//return data;
  RpcResponse response = service.execute(request);
  return response;
  }
  </Source>
  </Rule>
  <Rule created="1604263675168" id="0a111e5875691e4f8175859105202720" language="beanshell" modified="1604263683856" name="NN-Static-HomedriveCreation-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="50000"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
     #  Add-type -path E:\sailpoint\IQService\utils.dll -ErrorAction Stop
  # Add-type -path E:\IQService\utils.dll
      
        try{
    
    ECHO "**** Testing Homedrive and Homedirectory creation*111***"Get-Date |Add-Content -path E:\Test\static-succes.txt -FORCE
      

 $path = "E:\Test\"
  #  $path ="\\carefirst.com\corp\cdchome\"
      

$homeDirectory = $path + 'APF9495'
      ECHO $homeDirectory  |Add-Content -path E:\Test\succes.txt -FORCE
new-item -path $homeDirectory -itemtype directory;
ECHO "**** Testing Homedrive and Homedirectory Createdd2222****" |Add-Content -path E:\Test\static-succes.txt -FORCE
$Domain = 'BCBSMD'
$userId = 'AD - Security Admins'
$UsersAm = "$Domain\$userId"


$FileSystemAccessRights = [System.Security.AccessControl.FileSystemRights]"FullControl"

$InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]::"ContainerInherit", "ObjectInherit"

$PropagationFlags = [System.Security.AccessControl.PropagationFlags]::None

$AccessControl =[System.Security.AccessControl.AccessControlType]::Allow 

$NewAccessrule = New-Object System.Security.AccessControl.FileSystemAccessRule($UsersAm, $FileSystemAccessRights, $InheritanceFlags, $PropagationFlags, $AccessControl)

  ECHO "**** Testing Homedrive and Homedirectory creation33333333****" |Add-Content -path E:\Test\static-succes.txt -FORCE
    
    
    $currentACL = Get-ACL -path $homeDirectory

$currentACL.SetAccessRule($NewAccessrule)

    
	    ECHO "**** Testing Homedrive and Homedirectory 4444444****" |Add-Content -path E:\Test\static-succes.txt -FORCE
	$acl = Get-Acl -path $homeDirectory
	$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("AAC4398","Read","Allow")
	$acl.SetAccessRule($AccessRule)
	$acl | Set-Acl -path $homeDirectory    
   
     
        
      ECHO "**** Completed ****" |Add-Content -path E:\Test\static-succes.txt -FORCE
    
        
 }
   

  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Test\static-ErrorFile.txt -FORCE
  }

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263675401" id="0a111e5875691e4f8175859106092721" language="beanshell" modified="1616494895371" name="CF-ImportWorkgroup-Rule" type="Correlation">
    <Description>
    Import template-defined Workgroups from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.util.ArrayList;
  import java.util.HashMap;
  import sailpoint.object.*;

  
  public void buildWorkgroup (HashMap workgroupHash){
     // Creation of a WorkGroup and setting the owner
		System.out.println("Key Values Map "+workgroupHash);
		String groupName  = (String) workgroupHash.get("groupname");
		String groupOwner  = (String) workgroupHash.get("groupowner");
		String people  = (String) workgroupHash.get("people");
		String [] groupMembers = people.split(",");
    List objects = new ArrayList();
    
    						Identity workGroupObj = new Identity();
                
    Filter useridFilter = Filter.eq("userid",groupOwner);

      				if(useridFilter != null){

       				System.out.println("Filter is not null");

        			QueryOptions options = new QueryOptions().addFilter(useridFilter);

        			if (options != null){
          			objects = context.getObjects(Identity.class, options);
          			System.out.println("objects"+objects);
          			if(objects.isEmpty()){
            					objects=null;
          				}
       	 			}
      			}
	
    if(objects!=null)
          {
      			for(Identity identity:objects)
  					{
            //Identity identity = context.getObjectByName(Identity.class,currentUser);
              	workGroupObj.setWorkgroup(true);
                workGroupObj.setName(groupName);
              	workGroupObj.setOwner(identity);
                context.saveObject(workGroupObj);
                context.commitTransaction();
            }
    }
   // Add a workgroup to a user

        //Identity id1;
		for(int i=0; i &lt; groupMembers.length; i++){
      
      List objectsGroupMember = new ArrayList();
    
    	Filter useridFilter = Filter.eq("userid",groupMembers[i]);

      				if(useridFilter != null){

       				System.out.println("Filter is not null");

        			QueryOptions optionsGroupMember = new QueryOptions().addFilter(useridFilter);

        			if (optionsGroupMember != null){
          			objectsGroupMember = context.getObjects(Identity.class, optionsGroupMember);
          			System.out.println("objectsGroupMember"+objectsGroupMember);
          			if(objectsGroupMember.isEmpty()){
            					objectsGroupMember=null;
          				}
       	 			}
      			}
      if(objectsGroupMember!=null)
          {
      			for(Identity identity:objectsGroupMember)
  					{
				//Identity identityMember = context.getObjectByName(Identity.class,groupMembers[i]);
        identity.add(workGroupObj);
        context.saveObject(workGroupObj);
        context.commitTransaction();
            }
      }
		}
	}	
	
  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  
  String csvFileName ="//home//iqadmin//Data//WorkgroupImport.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  
  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Workgroups from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildWorkgroup: " );
      buildWorkgroup (lineHash);
      System.out.println(" After calling buildWorkgroup: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Workgroup import Complete.");

  return "Success";  
  </Source>
  </Rule>
  <Rule created="1604263675516" id="0a111e5875691e4f81758591067c2722" language="beanshell" modified="1604263684057" name="SP-CIAM-TestRule">
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  import java.net.URL;
import java.util.HashMap;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import com.carefirst.ciam.services.uaas.BaseFault;
import com.carefirst.ciam.services.uaas.CiamSystemFault;
import com.carefirst.ciam.services.uaas.UAAS;
import com.carefirst.ciam.services.uaas.UAASPort;
import com.carefirst.ciam.services.uaas.UserAlreadyExistsFault;
import com.carefirst.ciam.services.uaas.UserAlreadyExistsWarning;
import com.carefirst.ciam.services.uaas.ValidationFault;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.BusinessUnit;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableAssociateInformation;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.EditableContractorInformation;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.FullName;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.Gender;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonStatus;
import com.insidecarefirst.associate.ciamservices.service.ciam_types.PersonType;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.CreateContractorOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.ReactivatePersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.SuspendPersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.TerminatePersonOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateAssociateOutput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateContractorOutput;
 
   String nextUserId = "";

		//URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort/");
  URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort/wsdl/ciam_uaas.wsdl");
  
		UAAS u = new UAAS(url);
		UAASPort port = u.getUAASPort();
		GenerateNextUserIDInput parameters = new GenerateNextUserIDInput();
		parameters.setUaasAdminUserID("aac5790");
		GenerateNextUserIDOutput s = port.generateNextUserID(parameters);
  	System.out.println("s is:::"+s);
		 nextUserId = s.getAvailableUserID();
		System.out.println("Next user id is:::"+nextUserId);
  /*generateNextUserID();
   
 public static String generateNextUserID() throws Exception {
		String nextUserId = "";
		try{

		URL url = new URL("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort/WSDL");
		UAAS u = new UAAS(url);
		UAASPort port = u.getUAASPort();
		GenerateNextUserIDInput parameters = new GenerateNextUserIDInput();
		parameters.setUaasAdminUserID("aac5790");
		GenerateNextUserIDOutput s = port.generateNextUserID(parameters);
		 nextUserId = s.getAvailableUserID();
		System.out.println("Next user id is:::"+nextUserId);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return nextUserId;

	}
 
   
  </Source>
  </Rule>
  <Rule created="1604263675631" id="0a111e5875691e4f8175859106ef2723" language="beanshell" modified="1604263684120" name="CF-Native-HomeDrive-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="450"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
   import sailpoint.object.Application;


  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;


  
  if(null != null){
   
    Identity identity = plan.getIdentity();
    System.out.println("Inside Native-Rule Identity is "+identity);
  

  if(identity != null){
    AccountRequest accountRequest  = plan.getAccountRequest("Active Directory");
  Map data = new HashMap();
 // Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedriveAndHomedirectoryProvision-Rule");
Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedriveCreation-Rule");
   // Rule ruleObj = context.getObjectByName(Rule.class,"CF-ExchangeSetRemoteAttrs-Rule");
  //Rule ruleObj = context.getObjectByName(Rule.class,"CF-HomedirectoryCreate-Rule");
  
  //return ruleObj;
  data.put("postScript",ruleObj);

	data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  
  String IQServiceServer = "sv-spidsvc-d1.carefirst.com";
  //String IQServiceServer = "SV-SPIDSVC-D3.carefirsttest.com";
  int IQServicePort = 5050;
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
// return data;
  RpcResponse response = service.execute(request);
  //return response;
     System.out.println("Inside Native-Rule Powershell Script Executed ");
  }
  }
  </Source>
  </Rule>
  <Rule created="1604263675751" id="0a111e5875691e4f8175859107672724" language="beanshell" modified="1604263684184" name="CF-ScheduleTaskExchange-Rule">
    <Source>
  
import sailpoint.api.IdentityService;
import sailpoint.api.SailPointContext;
import sailpoint.object.Application;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.object.QueryOptions;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;
     Filter appFilter = Filter.eq("links.application.name", "Active Directory");
     List identityList = context.getObjects(Identity.class, new QueryOptions().addFilter(appFilter));
 
		Iterator iterator = identityList.iterator();
		String exchangeRemoteType = "";
		while(iterator.hasNext()){
			Identity identity = (Identity)iterator.next();
			IdentityService idSvc = new IdentityService(context);

			  Application application = context.getObjectByName(Application.class, "Active Directory");

			  if(null != application) {
				
				  List links = idSvc.getLinks(identity,application);
          
          Link link = (Link) links.get(0);
		//return link;
			
			if(null != link &amp;&amp; null != link.getAttribute("msExchRemoteRecipientType") )  {

			       exchangeRemoteType = (String) link.getAttribute("msExchRemoteRecipientType");
			   if(Util.isNotNullOrEmpty(exchangeRemoteType))  {
				   // Single AccountAggregation
				   return identity;
			   }

			  }else{

			    System.out.println( "Error: Identity has "+links.size()+" account links.");

			  }
			  }
		}
  
  
  </Source>
  </Rule>
  <Rule created="1604263675862" id="0a111e5875691e4f8175859107d62725" language="beanshell" modified="1616844865143" name="CF-Office365-Enable-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>  
  Add-type -path E:\IQService\IQService\utils.dll

    try{

    $secpasswd = ConvertTo-SecureString "Here2dayGone2morrow" -AsPlainText -Force
      $mycreds = New-Object System.Management.Automation.PSCredential -ArgumentList "tim_o365@carefirsttest.com", $secpasswd
        Connect-exchangeonline -Credential $mycreds -CommandName get-mailbox,set-mailbox,set-casmailbox


           $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
      $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
      $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);

     

        foreach ($attribute in $requestObject.AttributeRequests){
          if($attribute.Name -eq "sAMAccountName"){
            [string]$samAccountName = $attribute.Value
          }

        }


        ECHO "**** User: ***" +$samAccountName  |Add-Content -path E:\Test\CF-Office365-Logs.txt -FORCE

          $upn= $samAccountName+"@carefirsttest.com"

Set-CASMailbox -Identity $upn -ImapEnabled $false -PopEnabled $false -SmtpClientAuthenticationDisabled $true
          Set-Mailbox -identity $upn -litigationholdenabled $true -AuditEnabled $true -AuditLogAgeLimit 180 -AuditAdmin Update, MoveToDeletedItems, SoftDelete, HardDelete, SendAs, SendOnBehalf, Create, UpdateFolderPermission -AuditDelegate Update, SoftDelete, HardDelete, SendAs, Create, UpdateFolderPermissions, MoveToDeletedItems, SendOnBehalf -AuditOwner UpdateFolderPermission, MailboxLogin, Create, SoftDelete, HardDelete, Update, MoveToDeletedItems 
      
          
          ECHO "**** Completed2333333FINAL ****" |Add-Content -path E:\Test\CF-Office365-Logs.txt -FORCE

  }


  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Test\CF-Office365Errors-Logs.txt -FORCE
  }

  </Source>
  </Rule>
  <Rule created="1604263675982" id="0a111e5875691e4f81758591084e2726" language="beanshell" modified="1604263684316" name="NN-HomedriveCreation-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="50000"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
   # Add-type -path E:\sailpoint\IQService\utils.dll
Add-type -path E:\IQService\utils.dll

      try{
  $date = Get-Date

      ECHO "**** Entering Homedrive and Homedirectory creation ***"$date |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
        $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
     ECHO "**** Entering Homedrive and Homedirectory creation1111 ***" $sReader |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
      $xmlReader = [System.xml.XmlTextReader]([Sailpoint.Utils.xml.XmlUtil]::getReader($sReader))
    ECHO "**** Entering Homedrive and Homedirectory creation 22222***" $sReader |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
      $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
 ECHO "**** Entering Homedrive and Homedirectory creation 333333 ***" $requestObject |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
   ECHO "**** Entering Homedrive and Homedirectory creation 444444**Operation *" $requestObject.Operation |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
 if($requestObject.Operation -eq "Create"){      
        foreach ($attribute in $requestObject.AttributeRequests){
         # if($attribute.Name -eq "sAMAccountName"){
            [string]$samAccountName = $attribute.Value
        #  }

        

        ECHO "**** User: ***" $samAccountName |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE

          #To be deleted when moving to Production
          $path = "C:\Test\"
          $homeDirectory = $path + "APF7004"


          ECHO "**** Test homedirectory value: " +$homedirectory  |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
        
            new-item -path $homeDirectory -itemtype directory;
        
        ECHO "**** Test homedirectory created on: "+Get-Date+" ****" |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
          $Domain = 'BCBSMD'
          $userId = 'AD - Security Admins'
          $UsersAm = "$Domain\$userId"


          $FileSystemAccessRights = [System.Security.AccessControl.FileSystemRights]"FullControl"

          $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]::"ContainerInherit", "ObjectInherit"

          $PropagationFlags = [System.Security.AccessControl.PropagationFlags]::None

          $AccessControl =[System.Security.AccessControl.AccessControlType]::Allow 

          $NewAccessrule = New-Object System.Security.AccessControl.FileSystemAccessRule($UsersAm, $FileSystemAccessRights, $InheritanceFlags, $PropagationFlags, $AccessControl)

          ECHO "**** Testing Homedrive and Homedirectory creation33333333****" |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE


            $currentACL = Get-ACL -path $homeDirectory

            $currentACL.SetAccessRule($NewAccessrule)


            ECHO "**** Testing Homedrive and Homedirectory 4444444****" |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE
              $acl = Get-Acl -path $homeDirectory
              $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($samAccountName,"Read","Allow")
              $acl.SetAccessRule($AccessRule)
              $acl | Set-Acl -path $homeDirectory    



              ECHO "**** Completed ****" |Add-Content -path E:\Test\CF-TestHomeDrive-Logs.txt -FORCE


     }
 }
    }


  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Test\CF-TestHomeDriveErrors-Logs.txt -FORCE
  }


  </Source>
  </Rule>
  <Rule created="1604263676093" id="0a111e5875691e4f8175859108bd2727" language="beanshell" modified="1616681648106" name="CF-HomedriveUpdatedCreation-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="1000"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  # Add-type -path E:\sailpoint\IQService\utils.dll
    Add-type -path E:\IQService\utils.dll

      try{

      $timeNow=Get-Date
        
      ECHO "**** Entering Homedirectory creation rule, time now = ***"$timeNow |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
      ECHO "**** Inside Homedirectory creation $sReader = "$sReader |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
      ECHO "**** Inside Homedirectory creation, $xmlReader = "$xmlReader |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
      ECHO "**** Inside Homedirectory creatio,n $requestObject = "$requestObject |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        #$requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
      #ECHO "**** Inside Homedirectory creation, $requestObject.Operation = "$requestObject.Operation |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
        

        #if($requestObject.Operation -eq "Create"){
        ECHO "**** Inside Create Operation ***" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

          foreach ($attribute in $requestObject.AttributeRequests){
          if($attribute.Name -eq "sAMAccountName"){
            [string]$samAccountName = $attribute.Value
              ECHO "**** Inside sAMAccountName ***" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
          }

          if($attribute.Name -eq "homedirectory"){
            [string]$homedirectory = $attribute.Value
          }
        }


        ECHO "**** User: ***" +$samAccountName +", homedirectory value: " +$homedirectory +" ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

          #To be deleted when moving to Production
          $path = "E:\Test\"
          $homeDirectory = $path + $samAccountName


          ECHO "**** Test homedirectory value: " +$homedirectory +" ****"$homeDirectory  |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE

            new-item -path $homeDirectory -itemtype directory;

        ECHO "**** Test homedirectory created on: "+Get-Date+" ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
          $Domain = 'BCBSMD'
          $userId = 'AD - Security Admins'
          $UsersAm = "$Domain\$userId"


          $FileSystemAccessRights = [System.Security.AccessControl.FileSystemRights]"FullControl"
          

          $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]::"ContainerInherit", "ObjectInherit"

          $PropagationFlags = [System.Security.AccessControl.PropagationFlags]::None

          $AccessControl =[System.Security.AccessControl.AccessControlType]::Allow 

          #$NewAccessrule = New-Object System.Security.AccessControl.FileSystemAccessRule($UsersAm, $FileSystemAccessRights, $InheritanceFlags, $PropagationFlags, $AccessControl)

          $NewAccessrule = New-Object System.Security.AccessControl.FileSystemAccessRule($UsersAm, $FileSystemAccessRights, $InheritanceFlags,$PropagationFlags, "Allow")

          
          ECHO "**** Testing Homedrive and Homedirectory creation33333333****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE


            $currentACL = Get-ACL -path $homeDirectory

            $currentACL.SetAccessRule($NewAccessrule)


            ECHO "**** Testing Homedrive and Homedirectory 4444444****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
              $acl = Get-Acl -path $homeDirectory              
              
              $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($samAccountName,"Modify","ContainerInherit,ObjectInherit","None","Allow")
              
              $acl.SetAccessRule($AccessRule)
              $acl | Set-Acl -path $homeDirectory    



              ECHO "**** Completed ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE


      #}else
      #{
       # ECHO "**** Operation is not Create  ****" |Add-Content -path E:\Test\CF-HomeDrive-Logs.txt -FORCE
			#}
    }


  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\Test\CF-HomeDriveErrors-Logs.txt -FORCE
      $errorMsg =$_.exception.message
      foreach ($attribute in $requestObject.AttributeRequests){
          if($attribute.Name -eq "CmdletResponse"){
            $attribute.Value = $errorMsg;
          }
       }
		$env:Request =$requestObject.toXml() | out-file $args[0];
  }

  //return "Success";
  </Source>
  </Rule>
  <Rule created="1604263676204" id="0a111e5875691e4f81758591092c2728" language="beanshell" modified="1604263684446" name="SP-CIAM-EmailCheck">
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  
import java.rmi.RemoteException;

import EmailCheck_WebService_thisNamespace.EmailCheck_WebService_definitionNamePortTypeProxy;


		
		//**Email generation logic happens before this */		
		EmailCheck_WebService_definitionNamePortTypeProxy t = new EmailCheck_WebService_definitionNamePortTypeProxy();
		t.setEndpoint("http://associate.insidecarefirst.com/EmailChecker/EmailChecker");
		
		String s = t.emailCheck_WebService("aac5790@carefirst.com");
		
		System.out.println(s);

	
return s;
 
   
  </Source>
  </Rule>
  <Rule created="1604263676321" id="0a111e5875691e4f8175859109a12729" language="beanshell" modified="1604263684511" name="SP-CIAM-WebService-Test-Rule">
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e98226e3" name="CF-CommonWebServiceLibrary-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  

/*import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import com.carefirst.www.ciam.services.uaas.UAASLocator;
import com.carefirst.www.ciam.services.uaas.UAASPort;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.GenerateNextUserIDOutput;


	
	
		
		UAASLocator uaas = new UAASLocator();
		uaas.setUAASPortEndpointAddress("http://associatedev.insidecarefirst.com/UAASCIAMWebServices/services/UAASPort");
		UAASPort port = uaas.getUAASPort();
		GenerateNextUserIDInput input = new GenerateNextUserIDInput();
		input.setUaasAdminUserID("SAILPOINT");
		GenerateNextUserIDOutput output = port.generateNextUserID(input);
		System.out.println("Next userIs is:::"+output.getAvailableUserID());
  return output;*/
  //String updatedUserName = sendRequest(STR_USERID_REQUESTXML,STR_USERID_ENDPOINT,"");
  String updatedUserName = GenerateNextID();
		return updatedUserName;

 
  </Source>
  </Rule>
  <Rule created="1604263676437" id="0a111e5875691e4f817585910a15272a" language="beanshell" modified="1604263684574" name="CF-RequestObjectSelectorPOC_DB-Rule" type="RequestObjectSelector">
    <Description>Request Object Selector Rules are used by the Life Cycle Manager to determine the Objects that can be requested by a given user on a given population.  For bulk request this rule is run twice.  The first time the result determines which applications are shown to the requestor.  The second time the result determines whether or not the specified requestee has access to the object.  On the first execution the requestee is always null, so the rule needs to expect and handle that case in order to be usable for bulk requests.</Description>
    <Signature returnType="sailpoint.object.QueryInfo">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="requestor" type="sailpoint.object.Identity">
          <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
        </Argument>
        <Argument name="requestee" type="sailpoint.object.Identity">
          <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="filter">
          <Description>
          A Filter object that will be used to search for accessible request objects.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.api.ScopeService;
import sailpoint.object.*;
      import sailpoint.object.Identity;
      import sailpoint.object.Scope;
      import sailpoint.object.QueryOptions;
      import sailpoint.object.QueryInfo;
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
  
  
  System.out.println("deptid requestee"+requestee.getAttribute("deptid"));
System.out.println("deptid requestor"+requestor.getAttribute("deptid"));
System.out.println("employeeid"+requestee.getAttribute("employeeid"));
System.out.println("employeetype"+requestee.getAttribute("employeetype"));
System.out.println("businessunit"+requestee.getAttribute("businessunit"));
System.out.println("company"+requestee.getAttribute("company"));
  
  String AssignmentString1 = requestee.getAttribute("businessunit")+"|"+requestee.getAttribute("company");
String AssignmentString2= requestee.getAttribute("businessunit")+"|"+requestee.getAttribute("deptid")+"|"+requestee.getAttribute("company");
String AssignmentString3= requestee.getAttribute("company");
ArrayList assignmentStringList = new ArrayList();
assignmentStringList.add(AssignmentString1);
assignmentStringList.add(AssignmentString2);
assignmentStringList.add(AssignmentString3);
System.out.println("size "+assignmentStringList.size());

			Connection conn = null;
			String columnNames= "role_name,application,sensitivity,department,costcenter,extended1,extended2,extended3";
			ArrayList columnList= new ArrayList(Arrays.asList(columnNames.split(",")));
			ArrayList roleList =new ArrayList();
			try {
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection("jdbc:sqlserver://sv-spidsql-d1.carefirst.com:1433;databaseName=identityiqdev","identityiqdev","Identityiq123$");
			Statement stmt = conn.createStatement();
			
		for(int i=0;i&lt;assignmentStringList.size();i++){
    	
			
        ResultSet rs = stmt.executeQuery("select * from role_details where extended1='"+assignmentStringList.get(i)+"'");
        
        
			while(rs.next()){
				HashMap userDetailsMap = new HashMap();
				
				System.out.println(rs.getString("role_name"));
				
				
				roleList.add(rs.getString("role_name"));
				
				
				
			}
      rs.close();
		}
			System.out.println(roleList);
			
			stmt.close();
			conn.close();
			} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			}
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			}
  

System.out.println("objectselector starting");

ArrayList filterList = new ArrayList();

  for(int i=0;i&lt;roleList.size();i++){
    filterList.add(Filter.eq("name",roleList.get(i)));
  }
//Filter appFilter = Filter.eq("applicationName","AD");
//Filter reqFilter = Filter.eq("requestableRole","True");
       
Filter baseFilter = Filter.eq("assignment_condition","Associate");
           //filterList.add(baseFilter);
Filter orFilter = Filter.or(filterList);                   

QueryOptions qo = new QueryOptions();
//qo.addFilter(appFilter);
//qo.addFilter(reqFilter);

qo.addFilter(orFilter);
                  
    QueryInfo qi = new QueryInfo(qo);  
      return qi;</Source>
  </Rule>
  <Rule created="1604263676556" id="0a111e5875691e4f817585910a8c272b" language="beanshell" modified="1617905406496" name="CF-Library-AccessRequestWorkflowRuleLibrary-Rule">
    <Source>

  import java.util.ArrayList;
  import java.util.LinkedHashMap;
  import java.util.List;
  import java.util.Map;
  import java.util.Iterator;
  import java.util.Calendar;
  import java.util.Date;

  import org.apache.commons.lang.StringUtils;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;

  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest;

  import sailpoint.object.ApprovalItem;
  import sailpoint.object.ApprovalSet;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Link;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.WorkItem.State;
  import sailpoint.object.Workflow.Approval;
  import sailpoint.object.IdentityEntitlement;
  import sailpoint.object.Comment;
  import sailpoint.object.Identity;

  import sailpoint.api.ManagedAttributer;
  import sailpoint.api.IdentityService;
  import sailpoint.api.ObjectUtil;
  import sailpoint.tools.GeneralException;
  import sailpoint.tools.Util;
  import sailpoint.tools.xml.XMLObjectFactory;
  import sailpoint.object.Form;


  private static Logger logger = Logger.getLogger("cf.iiq.workflow.AccessRequestWorkflowRuleLibrary");
  logger.setLevel(Level.DEBUG);

  private static String KEY_APPROVAL_ITEM_ATTR_NAME_OPERATION = "operation";
  private static String KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE = "Remove";

  private static String KEY_DIRECT_REPORTS_TO_APPROVAL_STRING = "approval1";
  private static String KEY_SECOND_APROVAL_STRING = "approval2";
  private static String KEY_MANAGER2_APPROVAL_STRING = "Manager Approval";
  private static String KEY_DIRECTOR_APPROVAL_STRING = "Director Approval";
  private static String KEY_VP_APPROVAL_STRING = "VP Approval";
  private static String KEY_SELFATTESTATION_APPROVAL_STRING = "self attestation";
  private static String KEY_SELFATTESTATION_STRING = "Self attestation - In performing the duties of my job, I may have access to knowledge of associates, their dependents and beneficiaries claims and/or medical records and hereby agree to treat all such information as strictly confidential. I have read the applicable policy and procedure regarding confidentiality of associate records and understand my responsibility as an associate of CareFirst. Further, I understand the failure to adhere to all appropriate policy and procedures relating to the confidentiality of associate records may result in immediate termination of employment.";




  /**
              * Build Approvals related application owners
              *
              * @param approvalSet
              * @return
              */
  public static List firstLevelAppoval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - firstLevelAppoval **");
	Identity identity=context.getObject(Identity.class,identityName);                            
    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   
    Identity manager=null;
    String requesteeAuthSource = null;
    Identity requestee=context.getObject(Identity.class,identityName);
    if(requestee!=null){
      manager=requestee.getManager();
    }
    if(null == manager){
      manager=context.getObject(Identity.class,"FallbackApprovers");
    }

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();
          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          /*if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          } */            
          Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
            //approvalScheme = getApprovalScheme((Object)entitlement);
            if(null != launcher){ 
              String managerName = manager.getName();
              if(!managerName.equalsIgnoreCase(launcher)){
                objectOwner=manager;
                Map prefrencesmap = objectOwner.getPreferences();
                if(null != prefrencesmap){
                Object forwardUser = prefrencesmap.get("forward");
                if (null != forwardUser) {
                  Identity neForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                  objectOwner=neForwarduseIs;
                }
                }
                enableObjectOwnerApproval=true;
              }else {
                autoApproveRequest(item);
              }
            }
          }

          else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel1 = "approval1";
            approvalScheme = getApprovalScheme(itemBundle,approvalLevel1);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);

            if(null != launcher){ 
              String managerName = manager.getName();
              if(!managerName.equalsIgnoreCase(launcher)){
                objectOwner=manager;
                Map prefrencesmap = objectOwner.getPreferences();
                 if(null != prefrencesmap){
                Object forwardUser = prefrencesmap.get("forward");
                if (null != forwardUser) {
                  Identity neForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                  objectOwner=neForwarduseIs;
                }
                }
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName)){
                    objectOwner = getDirector(objectOwner);
                    System.out.println("----In First level approval owner is:::"+objectOwner);
                    
                  }
                }
                enableObjectOwnerApproval=true;
              }
              else {
                autoApproveRequest(item);
              }
            }
          }

          logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
          // If appOwner approval not required continue to the next item
          if(!enableObjectOwnerApproval)
            continue;

          if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
            item.setState(null);
          if(enableObjectOwnerApproval)
            finalApprovalItems.add(item);
        }


        logger.info("size fo the current item::"+finalApprovalItems.size());

        if(finalApprovalItems==null || finalApprovalItems.isEmpty())
        {
          logger.info("***no items to process....");
          haveApprovalItems=false;
        }
        newApprovalSet.setItems(finalApprovalItems);
      }

      
      logger.info("haveApprovalItems to set::"+haveApprovalItems);
      if(haveApprovalItems)
      {
        logger.info("***Get the manager to set as approver***");
        Approval approval = new Approval();
        approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
        approval.addArg("workItemTargetName", identityName);
        setApprovalDescription("First Level Approval", identityDisplayName, approval);
        approval.setOwner(objectOwner.getName());
        approval.setApprovalSet(newApprovalSet);
        finalApprovals.add(approval);
      }
    }
    logger.info("***End - firstLevelAppoval");
    return finalApprovals;
  }

  public static List secondApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - secondApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
            approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
					//	enableObjectOwnerApproval=true;
            }
          }
          else{
            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel2 = "approval2";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel2);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              logger.info("****approvaerValusIs: " + approvaerValusIs);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  logger.info("****prefrencesmap: " + prefrencesmap);
                  Object forwardUser = prefrencesmap.get("forward");
                  logger.info("****forwardUser: " + forwardUser);
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;

                  }
                   }
				   if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }
          }
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Second Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }

    public static List thirdApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - thirdApproval **");

      Identity identity=context.getObject(Identity.class,identityName);                            
      
      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;

      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }         
            
            Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel3 = "approval3";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel3);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }

          }
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Third Level Approval", identityDisplayName, approval);
            }
          }

          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - thirdApproval ***");
      return finalApprovals;
    }

    public static List fourthApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - fourthApproval **");
      Identity identity=context.getObject(Identity.class,identityName);                            
      
      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;

      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }             

            Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel4 = "approval4";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel4);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }
          }

            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);

          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Fourth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      
      logger.info("***End - fourthApproval ***");
      return finalApprovals;
    }


    public static List fifthApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - fifthApproval **");

      Identity identity=context.getObject(Identity.class,identityName);                            
      
      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;


      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }             

           Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel5 = "approval5";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel5);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }


            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }

          }
          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        
        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);

          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Fifth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      
      logger.info("***End - fifthApproval ****");
      return finalApprovals;
    }

    public static List sixthApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - sixthApproval **");
      Identity identity=context.getObject(Identity.class,identityName);                            
      

      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;

      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }             

            Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel6 = "approval6";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel6);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }
          }

            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        
        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);

          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Sixth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      
      logger.info("***End - sixthApproval ***");
      return finalApprovals;
    }

    public static List seventhApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - seventhApproval **");

      Identity identity=context.getObject(Identity.class,identityName);                            
      
      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;

      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }             

            Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel7 = "approval7";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel7);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }

          }
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        
        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);

          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Seventh Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
     logger.info("***End - seventhApproval ***");
      return finalApprovals;
    }

    public static List eieghthApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - eieghthApproval **");
      Identity identity=context.getObject(Identity.class,identityName);                            
     
      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;
      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }             

            Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{

            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel8 = "approval8";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel8);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }
          }

            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        
        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);

          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Eieghth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - eieghthApproval ***");
      return finalApprovals;
    }


    public static List ninethApproval(ApprovalSet approvalSet,WorkflowContext wfc)
    {
      logger.info("***Begin - ninthApproval **");

      Identity identity=context.getObject(Identity.class,identityName);                            
     
      Identity objectOwner = null;
      List finalApprovals = new ArrayList();      
      String approvalScheme = null;   

      Identity manager=null;
      String requesteeAuthSource = null;


      //Iterate through the approvals
      if(approvalSet != null)
      {
        logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

        ApprovalSet newApprovalSet=new ApprovalSet();
        Boolean haveApprovalItems = true;

        if(approvalSet !=null)
        {
          List approvalItems=approvalSet.getItems();
          List finalApprovalItems=new ArrayList();

          for(ApprovalItem item: approvalItems)
          {
            boolean enableObjectOwnerApproval = false;

            // check current state
            if (item.getState() != null 
                &amp;&amp; (item.getState().equals(State.Rejected) 
                            || item.getState().equals(State.Expired))) 
            {
              logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
              continue;
            }

            String accessName = null;
            logger.info("***approval Item values:::"+item.getValue());
            if (item.getValue() instanceof ArrayList) 
              accessName = item.getValue().get(0);
            else
              accessName = item.getValue();

            logger.info("***Got accessName:: " + accessName);

            // Verifying Operation type
            String operationType = item.getOperation();

            logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
            if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
            {
              logger.info("***For remove operation no approvals are required:: " + operationType);
              completeApprovalItem(item);
              continue;
            }             

            Application application = context.getObject(Application.class, item.getApplicationName()); 

          ManagedAttribute entitlement = ManagedAttributer.get(context, application, item.getName(), accessName);
          if (entitlement != null) 
          {
            //enableManagerApproval = checkIfSpecifiedApprovalRequired((Object)entitlement, KEY_MANAGER_APPROVAL_ATTR_NAME);
             approvalScheme = null;
            if(null != approvalScheme){
            Identity ownerIdentity=context.getObject(Identity.class,approvalScheme);           
            objectOwner=ownerIdentity;
						enableObjectOwnerApproval=true;
            }
          }else{
            Bundle itemBundle = getBundle(accessName);
            if (itemBundle == null) 
            {
              logger.info("***Requested role is null");
              continue;
            }
            String approvalLevel9 = "approval9";
            approvalScheme = getApprovalScheme(itemBundle, approvalLevel9);
            logger.info("****enabled appowner approval for Bundle: " + approvalScheme);
            if(approvalScheme!=null){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
                manager = context.getObject(Identity.class,approvaerValusIs);
                if(null != manager){
                  objectOwner=manager;
                  Map prefrencesmap = objectOwner.getPreferences();
                   if(null != prefrencesmap){
                  Object forwardUser = prefrencesmap.get("forward");
                  if (null != forwardUser) {
                    Identity newForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                    objectOwner=newForwarduseIs;
                  }
                  }
				  if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getDirector(objectOwner);
                  }
                }
                  enableObjectOwnerApproval=true;
                }

              }
            }
          }

            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

       
        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Ninth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - ninthApproval approval**");
      return finalApprovals;
    }




    /**
              * Auto approve the given approvalItem
              * 
               * @param approvalItem
              */
    public static void autoApproveRequest(ApprovalItem approvalItem) {
      logger.info("***Begin - autoApproveRequest. Got approvalItem as::: " + approvalItem);
      autoApproveRequest(approvalItem, "Item is auto-approved by system as approver and requester are same person.");
      logger.info("***Exiting method autoApproveRequest***");
    }

    /**
              * Auto approve the given approvalItem
              * 
               * @param approvalItem
              */
    public static void autoApproveRequest(ApprovalItem approvalItem, String commentString) {
      logger.info("***Begin - autoApproveRequest. Got approvalItem as:: " + approvalItem + " and commentString as:: "
                         + commentString);

      approvalItem.setState(State.Finished);
      approvalItem.add(new Comment(commentString, "system"));
      approvalItem.setOwner(launcher);
      logger.info("approvalItem: " + approvalItem.toXml());
      try {
        IdentityLibrary.auditDecision(wfcontext, approvalItem);
      } catch (GeneralException e) {
        logger.error("***Failed to audit approval auto approve", e);
      }
      logger.info("***Exiting method autoApproveRequest****");
    }

    /**
              * Complete the approvalItem to process further
              * 
               * @param approvalItem
              */
    public static void completeApprovalItem(ApprovalItem approvalItem) {
      logger.info(launcher+"Begin - completeApprovalItem. Got approvalItem as:: " + approvalItem);

      approvalItem.setState(State.Finished);
      //approvalItem.setOwner(launcher);
      logger.info("***Exiting method completeApprovalItem***");
    }

    /**
              * 
               * @param approvalType
              * @param identityDisplayName
              * @param approval
              */
    public void setApprovalDescription(String approvalType, String identityDisplayName, Approval approval) {
      logger.info("***Begin - setApprovalDescription***");
      String description = Util.splitCamelCase(approvalType) + "- Account Changes for User: "
        + identityDisplayName;

      approval.setDescription(description);
      logger.info("***End - setApprovalDescription***");
    }

    /**
              * 
               * @param approvalSetMap
              * @param approvalItem
              * @param approver
              */
    public static void addApproverToSet(Map approvalSetMap, ApprovalItem approvalItem, String approver) {
      logger.info("***Begin - addApproverToSet***");
      ApprovalSet approvalSet = null;
      if (!approvalSetMap.containsKey(approver)) {
        approvalSet = new ApprovalSet();
      } else {
        approvalSet = (ApprovalSet) approvalSetMap.get(approver);
      }

      ApprovalItem approvalItemCopy = (ApprovalItem) XMLObjectFactory.getInstance().clone(approvalItem, context);
      approvalItemCopy.setOwner(null);
      approvalItemCopy.setApprover(null);
      approvalItemCopy.setState(null);
      approvalSet.add(approvalItemCopy);
      approvalSetMap.put(approver, approvalSet);
      logger.info("***End - addApproverToSet***");
    }             


    /**
              * Get requestee's manager
              * 
               * @param identityName
              */
    public static Identity getIdentityManager(String identityName)
    {

      Identity manager=null;
      String requesteeAuthSource = null;
      Identity requestee=context.getObject(Identity.class,identityName);
      if(requestee!=null){
        manager=requestee.getManager();
      }
      if(null == manager)
        requesteeAuthSource = requestee.getAttribute("authSource");
      if(Util.isNotNullOrEmpty(requesteeAuthSource) &amp;&amp; !requesteeAuthSource.equalsIgnoreCase("HR"))
      {
        String managerId=requestee.getAttribute("reportingsupid");
        manager=context.getObject(Identity.class,managerId);
      }
      return manager;
    }

    /**
              * Get approval schema from entitlement/role/application
              * 
               * @param accessObject
              * @return approvalScheme
              */
    public static String getApprovalScheme(Object accessObject, String approvalLevel)
    {
      String approvalScheme = null;
      if(null != accessObject &amp;&amp; accessObject instanceof Bundle)
        approvalScheme = ((Bundle)accessObject).getAttribute(approvalLevel);
      if(null != accessObject &amp;&amp; accessObject instanceof ManagedAttribute)
        approvalScheme = null;

      return approvalScheme;
    }

    public static String fetchApproverValue(String approvalScheme, Identity identity){
      if(approvalScheme.equalsIgnoreCase(KEY_MANAGER2_APPROVAL_STRING)){
        String manager2 = identity.getAttribute("manager2");
        return manager2;
      }else if(approvalScheme.equalsIgnoreCase(KEY_DIRECTOR_APPROVAL_STRING)){
        String director = identity.getAttribute("director");
        return director;
      }
      else if(approvalScheme.equalsIgnoreCase(KEY_VP_APPROVAL_STRING)){
        String vp = identity.getAttribute("vp");
        return vp;

      }
      else if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){

        return identityName;
      }

      else {
        return approvalScheme;
      }

    }
    /**
              * Checking if the specified approval is required or not
              * 
              * @param ApprovalSchema, ApprovalSchema, approvalStage
              * @return approvalScheme
              */
    public static boolean requireSpecifiedApproval(String approvalScheme, ApprovalItem item, String approvalStage)
    {
      if(Util.isNullOrEmpty(approvalScheme))
      {
        logger.info("approvalScheme: " + approvalScheme);
        return false;
      }
      if(!approvalScheme.contains(approvalStage))
      {
        logger.info("***No approval Needed***");
        logger.info("***complete the buildManagerApproval step to continue further***");
        completeApprovalItem(item);
        return false;                                   
      }
      return true;
    }

    /**
              * For the given roleName return role/Bundle object
              * 
               * @param roleName
              * @return
              */
    public static Bundle getBundle(String roleName) {

      logger.info("***Begin - getBundle. Got roleName as::: " + roleName);

      Bundle bundle = context.getObject(Bundle.class, roleName);
      logger.info("***For the given roleName:: " + roleName + " query result is:: " + rolesList);

      logger.info("***For  roleName:: " + roleName + " found object:: " + bundle);
      logger.info("***End - getBundle");
      return bundle;
    }

    public static Identity getForwardUserIdentity(Map prefrencesmap, Identity objectOwner, String forwardUser){

      Date startDate = prefrencesmap.get("forwardStartDate");
      Date endtDate =  prefrencesmap.get("forwardEndDate");
      Date todayDateIs = new Date();

      Identity newForwardUser = objectOwner;

      if (startDate == null &amp;&amp; null == endtDate) {

        newForwardUser = context.getObject(Identity.class,forwardUser);
      } else if (startDate == null &amp;&amp; endtDate != null) {
        if (todayDateIs.before(endtDate) || todayDateIs.before(endtDate)) {
          newForwardUser = context.getObject(Identity.class,forwardUser);
        }else {
          logger.info("#####End Date Lessthan today date");
        }
      } else if (startDate != null &amp;&amp; endtDate == null) {
        if (todayDateIs.after(startDate) || todayDateIs.equals(startDate)) {
          newForwardUser = context.getObject(Identity.class,forwardUser);
        }
      } else if (startDate != null &amp;&amp; endtDate != null) {
        if ((todayDateIs.after(startDate) || todayDateIs.equals(startDate))
            &amp;&amp; (todayDateIs.before(endtDate) || todayDateIs.before(endtDate))) {
          newForwardUser = context.getObject(Identity.class,forwardUser);

        }else {
          logger.info("** No Action");
        }
      } 


      return newForwardUser;

    }
  
   public static Identity getDirector(Identity objectOwner){
     Identity targetIdentity=context.getObject(Identity.class,identityName); 
     System.out.println("-----identityName-----"+identityName);
 					String approverDirector = targetIdentity.getAttribute("director");
     System.out.println("-----approverDirector-----"+approverDirector);
      logger.info("approverDirector name is *****"+approverDirector);
     System.out.println("-----Owner-----"+objectOwner.getName());
          if(null !=approverDirector){
            if(identityName.equalsIgnoreCase(approverDirector)){
              System.out.println("----Target user and approver director same");
              String approvervp = targetIdentity.getAttribute("vp");
              if(null !=approvervp &amp;&amp; !objectOwner.getName().equalsIgnoreCase(approvervp)){
                objectOwner=context.getObject(Identity.class,approvervp); 
              }else{
								objectOwner=context.getObject(Identity.class,"FallbackApprovers"); 
              }
            }else{
              System.out.println("----Target user and approver director NOT same");
               objectOwner=context.getObject(Identity.class,approverDirector); 
            }
           }else{
               String approvervpIs = targetIdentity.getAttribute("vp");
              if(null !=approvervpIs &amp;&amp; !objectOwner.getName().equalsIgnoreCase(approvervpIs)){
                objectOwner=context.getObject(Identity.class,approvervpIs); 
              }else{
            objectOwner=context.getObject(Identity.class,"FallbackApprovers"); 
              }
            }
     
     System.out.println("----Finla Object owner  name is:::"+objectOwner);
     Map prefrencesmapIs = objectOwner.getPreferences();
                 if(null != prefrencesmapIs){
                Object forwardUserIs = prefrencesmapIs.get("forward");
                if (null != forwardUserIs) {
                  Identity neForwarduseIs = getForwardUserIdentity(prefrencesmapIs, objectOwner, forwardUserIs);
                  if(neForwarduseIs.getName().equalsIgnoreCase(identityName)){
                     System.out.println("----In First level approval approver and forward user are same:::"+objectOwner);
                  objectOwner=objectOwner=context.getObject(Identity.class,"FallbackApprovers"); 
                  }
                }
                }
      return objectOwner;
    }

    </Source>
  </Rule>
  <Rule created="1604263676667" id="0a111e5875691e4f817585910afb272c" language="beanshell" modified="1604263684701" name="CF-ImportBirthrightBusinessRoles-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String roleName  = (String) roleHash.get("Role Name");
    String roleDisplayName  = (String) roleHash.get("Role DisplayName");
    String roleType  = (String) roleHash.get("Role Type");
    String roleDesc  = (String) roleHash.get("Role Description");
    String roleOwner = (String) roleHash.get("Role Owner");
    String subRoles  = (String) roleHash.get("Sub Roles/IT Roles");
    String appName   = (String) roleHash.get("TargetSystem Name");
    String attrName  = (String) roleHash.get("Attribute");
    String entsList  = (String) roleHash.get("Entitlements");
    String classificationName  = (String) roleHash.get("Classification");
    String isRequestable  = (String) roleHash.get("Requestable Role");

    // boolean isRequestable  = (Boolean) roleHash.get("Requestable Role");
    //String assignRule  = (String) roleHash.get("AssignmentRule");
    String costCentre  = (String) roleHash.get("costcenter");
    String jobCode  = (String) roleHash.get("jobcode");


    System.out.println("Role: '" + roleName + "' type: [" + roleType + "]");

    Bundle role = context.getObject(Bundle.class, roleName);
    if (null == role) {
      System.out.println(" - role does not exist, creating new: " + roleName);
      role = new sailpoint.object.Bundle();
    }   
    if(Util.isNotNullOrEmpty(roleName)) {
      role.setName(roleName);
    }
    if(Util.isNotNullOrEmpty(roleDisplayName)) {
      role.setDisplayName(roleDisplayName);
    }

    if(Util.isNotNullOrEmpty(roleDesc)) {
      Map descMap  = new HashMap();
      descMap.put("en_US", roleDesc);
      role.setDescriptions(descMap);
    }


    if (roleType.toLowerCase().startsWith("it")) {
      role.setType("it");	  
    } else {
      role.setType("business");
    }
    //System.out.println("Requestable Role string " + requestable);
    System.out.println("Requestable Role boolean " + isRequestable);
    // Set a privileged flag on the bundle.  Default to false (not privileged).
    role.setAttribute("requestable", "false");

    if ((null != isRequestable) &amp;&amp; (0 &lt; isRequestable.length())) {
      if (isRequestable.toLowerCase().contains("t") || 
          isRequestable.toLowerCase().contains("Y")   ) {
        role.setAttribute("requestable", "true");
      }
    } 

    Identity ownerId = context.getObject(Identity.class, roleOwner);
    if (null == ownerId) {
      System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
      ownerId = context.getObject(Identity.class, "spadmin");
    }
    role.setOwner(ownerId);

    // We need to translate application names coming in from the CSV feed.
    // Add new application names to translate to the following hash map.
    // The CSV feed name goes on the left (key) of the hash and the IIQ name
    // for the application goes in the right (value) side of the hash.
    HashMap appNameTranslations = new HashMap();
    appNameTranslations.put("AD",       "Active Directory");
    // appNameTranslations.put("ERP",      "Oracle ERP");

    // Do the actual application name translation here:
    if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
      if (null != appNameTranslations.get(appName)) {
        appName = (String) appNameTranslations.get(appName);
      }
    }

    // Lookup the application for the role, if one is required.
    Application appObj = null;
    if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
      appObj = context.getObject(Application.class, appName);
      if (null == appObj) {
        System.out.println("ERROR: Could not find application: " + appName);
        System.out.println("ERROR: Skipping role creation for " + roleName);
        System.out.println();
        return;		 
      }
    }

    // Make sure the application (if specified) has the specified entitlement.
    if (null != appObj) {
      Schema appSchema = appObj.getSchema("account");
      if (null != appSchema) {
        List entAttrNames = appSchema.getEntitlementAttributeNames();
        if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
          // Deterministic single entitlement name.
          String entAttrName = entAttrNames.get(0);
          if (!entAttrName.equals(attrName)) {
            System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
            attrName = entAttrName;
          }
        }
      }
    }

    // Convert the entitlements list into a java.util.List object.
    if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
      entsList = entsList.replace("\\/", "/");
    }
    RFC4180LineParser entParser = new RFC4180LineParser("|");
    List entitlements = entParser.parseLine(entsList);

    // Convert the sub-roles list into a java.util.List object.
    RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
    List subRolesList = entParser.parseLine(subRoles);

    // Handle IT-role specifc build out options here.
    if (role.getType().contains("it")) {

      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        role.getProfiles().clear();
      }	  

      // Build the filterString for entitlements matching this IT role.
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   

      Profile profile = new Profile();
      profile.setDescription("Entitlements required by '" + roleName + "' for " + appName);
      profile.setApplication(appObj);
      profile.addConstraint(filter);
      role.add(profile);

    }

    // Handle Business-role specific build out options here.
    if (role.getType().contains("business")) {

      // Setting the classification to the Role
      if(Util.isNotNullOrEmpty(classificationName)) {
        List classificList = new ArrayList();

        ObjectClassification objClassific = new ObjectClassification();
        objClassific.setOwnerType("Bundle");
        objClassific.setSource("UI");
        Classification classification = context.getObjectByName(Classification.class, classificationName);
        if(classification != null) {

          objClassific.setClassification(classification);
          classificList.add(objClassific);
          role.setClassifications(classificList);
        }
        else
        {
          classification = new Classification();
          classification.setName(classificationName);
          classification.setDisplayName(classificationName);
          classification.setOrigin("MyIndependentDataSource");
          Map descMap  = new HashMap();
          descMap.put("en_US", "Allow Access specified Role");
          classification.setDescriptions(descMap);
          context.saveObject(classification);
          context.commitTransaction();
          objClassific.setClassification(classification);
          classificList.add(objClassific);
          role.setClassifications(classificList);

        }



      }


      // Build an assignment rule using the identity attributes.
      // Identities are auto-matched to assignemnt rules with this class:

      IdentitySelector idSelector = new IdentitySelector();
      MatchExpression matExp = new MatchExpression();
      matExp.setAnd(true);
      /*if(Util.isNotNullOrEmpty(costCentre)) {
        if ((null != costCentre) &amp;&amp; (0 &lt; costCentre.length())) {
          costCentre = costCentre.replace("\\/", "/");
        }
        RFC4180LineParser costParser = new RFC4180LineParser("|");
        List costCenterList = costParser.parseLine(costCentre);
        MatchTerm matchTerm = new MatchTerm();
        matchTerm.setContainer(true);
        for(String strCost : costCenterList){	                                   

          MatchTerm matchTerm1 = new MatchTerm();
          matchTerm1.setName("costcenter");
          matchTerm1.setType(Type.IdentityAttribute);
          matchTerm1.setValue(strCost);
          matchTerm.addChild(matchTerm1);

        }
        matExp.addTerm(matchTerm);
      }
      if(Util.isNotNullOrEmpty(jobCode)) {
        MatchTerm matchTerm2 = new MatchTerm();
        matchTerm2.setName("jobcode");
        matchTerm2.setType(Type.IdentityAttribute);
        matchTerm2.setValue(jobCode);
        matExp.addTerm(matchTerm2);
      }*/
	  MatchTerm matchTerm = new MatchTerm();
	  matchTerm.setName("costcenter");
	  matchTerm.setValue(costCentre);
	  matExp.addTerm(matchTerm);
	  
	  matchTerm = new MatchTerm();
	  matchTerm.setName("jobcode");
	  matchTerm.setValue(jobCode);
	  matExp.addTerm(matchTerm);

      idSelector.setMatchExpression(matExp);
      role.setSelector(idSelector); 

      // Clear the previous list of requirements for this Role.
      if (null != role.getRequirements()) {
        // role.getRequirements().clear();
      }

      System.out.println("subRolesList: " + subRolesList);
      // Add the required IT roles for this business role.
      for (String subRoleName : subRolesList) {

        Bundle requiredRole = context.getObjectByName(Bundle.class, subRoleName);
        if (null == requiredRole) {
          System.out.println(" - ERROR: Required role not found: " + subRoleName);
        } else {
          role.addRequirement(requiredRole);
        }         	  

      }	  
    }

    System.out.println("role: " + role.toXml());

    context.saveObject(role);
    context.commitTransaction();

    return;
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";
	String csvFileName ="//home//iqadmin//Data//BusinessRoles.csv";
  
  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263676782" id="0a111e5875691e4f817585910b6d272d" language="beanshell" modified="1604263684764" name="CF-JoinerTrigger-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="boolean"/>
    <Source>import sailpoint.tools.Util;
import org.apache.log4j.Logger;


Logger mylogger = Logger.getLogger("com.carefirst.loggers");
System.out.println("Starting Carefirst Joiner Trigger Rule");
	try{
	 String strAction = newIdentity.getAttribute(ATR_ACTION) != null ? newIdentity.getAttribute(ATR_ACTION) : "";
	 String strEmpStatus = newIdentity.getAttribute(ATR_EMPLOYEESTATUS) != null ? newIdentity.getAttribute(ATR_EMPLOYEESTATUS) : "";

    
   System.out.println("**** Starting CareFirst Joiner Trigger Rule ****");

   System.out.println("Inside CareFirst Joiner Trigger Rule action = "+strAction);
   System.out.println("Inside CareFirst Joiner Trigger Rule employee status = "+strEmpStatus); 
   System.out.println("Inside CareFirst Joiner Trigger Rule, previous identity = "+previousIdentity);
   System.out.println("Inside CareFirst Joiner Trigger Rule, new identity = "+newIdentity);
    
	 if(newIdentity != null &amp;&amp; previousIdentity == null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp; Util.isNotNullOrEmpty(strEmpStatus) &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_HIR) &amp;&amp; strEmpStatus.equalsIgnoreCase("A")) {
             
		
     
		return true;
	  
	 }else{
	 return false;
	 }
	}
	catch(Exception e){
return false;
	}</Source>
  </Rule>
  <Rule created="1604263676895" id="0a111e5875691e4f817585910bde272e" language="beanshell" modified="1604263684826" name="CF-ImportITRolesWithEntitlements-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import sailpoint.object.ManagedAttribute;

  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
    public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
       String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
	  String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
	  String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
	  String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
	  String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
   
	

    Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
    if (null == role) {
      System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
      role = new sailpoint.object.Bundle();
    }   
    if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
      role.setName(strCiamITRoleName);
	   role.setDisplayName(strCiamITRoleName);
	   role.setType("it");
	    role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessROleID,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
     // role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);

    }
    

    if(Util.isNotNullOrEmpty(strITRoleDesc)) {
      Map descMap  = new HashMap();
      descMap.put("en_US", strITRoleDesc);
      role.setDescriptions(descMap);
	     }

   
  /*  Identity ownerId = context.getObject(Identity.class, roleOwner);
    if (null == ownerId) {
      System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
      ownerId = context.getObject(Identity.class, "spadmin");
    }
    role.setOwner(ownerId);
*/
  

    // Lookup the application for the role, if one is required.
    Application appObj = null;
    if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
      appObj = context.getObject(Application.class, appName);
      if (null == appObj) {
        //System.out.println("ERROR: Could not find application: " + appName);
        //System.out.println("ERROR: Skipping role creation for " + roleName);
        //System.out.println();
		
		Application appObj1 = context.getObject(Application.class, "CIAM_USER_ROLE_SYNC");
		ManagedAttribute ent=new ManagedAttribute();
		ent.setDisplayName(entsList);
		ent.setValue(entsList);
        ent.setApplication(appObj1);
		ent.setAttribute("entitlement");
        ent.setType("Entitlement");
        ent.setRequestable(false);
		context.saveObject(ent);
        return;		 
		//
      }
    }

	String entAttrName = "";
    // Make sure the application (if specified) has the specified entitlement.
    if (null != appObj) {
      Schema appSchema = appObj.getSchema("account");
      if (null != appSchema) {
        List entAttrNames = appSchema.getEntitlementAttributeNames();
        if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
          // Deterministic single entitlement name.
           entAttrName = entAttrNames.get(0);
      
        }
      }
    }

    // Convert the entitlements list into a java.util.List object.
    if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
      entsList = entsList.replace("\\/", "/");
    }
    RFC4180LineParser entParser = new RFC4180LineParser("|");
    List entitlements = entParser.parseLine(entsList);


    // Handle IT-role specifc build out options here.
  

      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
     //   role.getProfiles().clear();
      }	  

      // Build the filterString for entitlements matching this IT role.
      String comma = "";
      String filterString = entAttrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   

      Profile profile = new Profile();
      profile.setDescription("Entitlements required by '" + roleName + "' for " + appName);
      profile.setApplication(appObj);
      profile.addConstraint(filter);
      role.add(profile);

    

    System.out.println("role: " + role.toXml());

    context.saveObject(role);
    context.commitTransaction();

    return;
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CiamBulkITRole.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  
  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      
      //return lineHash;
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263677007" id="0a111e5875691e4f817585910c4f272f" language="beanshell" modified="1604263684901" name="CF-ImportEntitlements-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import sailpoint.object.ManagedAttribute;

 		Application appObj1 = context.getObject(Application.class, "CIAM_USER_ROLE_SYNC");
		ManagedAttribute ent=new ManagedAttribute();
		ent.setDisplayName("EDI_OPS_PROD_SUPT_READ");
		ent.setValue("EDI_OPS_PROD_SUPT_READ");
        ent.setApplication(appObj1);
		ent.setAttribute("entitlement");
        ent.setType("Entitlement");
        ent.setRequestable(false);
		context.saveObject(ent);
  context.commitTransaction();
		return ent;
        
	</Source>
  </Rule>
  <Rule created="1604263677145" id="0a111e5875691e4f817585910cd92730" language="beanshell" modified="1604263684962" name="NN-ImportITRoles-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";

    Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
    if (null == role) {
      System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
      role = new sailpoint.object.Bundle();
    }   
    if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
      role.setName(strCiamITRoleName);
      role.setDisplayName(strCiamITRoleName);
      role.setType("it");
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessROleID,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      // role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
      // unused attributes
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
    }


    if(Util.isNotNullOrEmpty(strITRoleDesc)) {
      Map descMap  = new HashMap();
      descMap.put("en_US", strITRoleDesc);
      role.setDescriptions(descMap);
    }

    String roleOwner = "";
    Identity ownerId = context.getObject(Identity.class, roleOwner);
    if (null == ownerId) {
      System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
      ownerId = context.getObject(Identity.class, "spadmin");
    }
    role.setOwner(ownerId);



    // Lookup the application for the role, if one is required.
    Application appObj = null;
    if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
      appObj = context.getObject(Application.class, appName);
      if (null == appObj) {
        System.out.println("ERROR: Could not find application: " + appName);
        System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
        Application ciamAppObj = context.getObject(Application.class, "CIAM_USER_ROLE_SYNC");
        ManagedAttribute ma=new ManagedAttribute();
        ma.setDisplayName(entsList);
        ma.setValue(entsList);
        ma.setApplication(ciamAppObj);
        ma.setAttribute("entitlement");
        ma.setType("Entitlement");
        ma.setRequestable(false);
        context.saveObject(ma);
        context.commitTransaction();
        appObj = ciamAppObj; 
        //  return;		 

      }
    }

    String entAttrName = "";
    // Make sure the application (if specified) has the specified entitlement.
    if (null != appObj) {
      Schema appSchema = appObj.getSchema("account");
      if (null != appSchema) {
        List entAttrNames = appSchema.getEntitlementAttributeNames();
        if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
          // Deterministic single entitlement name.
          entAttrName = entAttrNames.get(0);
          if (!entAttrName.equals(attrName)) {
            System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
            attrName = entAttrName;
          } 

        }
      }
    }

    // Convert the entitlements list into a java.util.List object.
    if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
      entsList = entsList.replace("\\/", "/");
    }
    // RFC4180LineParser entParser = new RFC4180LineParser("|");
    // List entitlements = entParser.parseLine(entsList);


    // Handle IT-role specifc build out options here.


    // Clear out the previous profiles on the role.
    if (null != role.getProfiles()) {
      // role.getProfiles().clear();
    }	  
    List entitlements = new ArrayList();
    Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
    if(newRole != null){
      entitlements = getEntValues(newRole);
    }
    entitlements.add(entsList);
    // Build the filterString for entitlements matching this IT role.
    String comma = "";
    String filterString = attrName + ".containsAllIgnoreCase({";
    for (String entValue : entitlements) {
      filterString += comma + "\"" + entValue + "\"";
      comma = ",";
    }
    filterString += "})";

    Filter filter = Filter.compile(filterString);   
    List filterList = new ArrayList();
    filterList.add(filter);
System.out.println("Inside create IT Role Method 111111111111111111");
 /*  if(role.getProfiles() != null){
      System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
      List profiles = role.getProfiles();

      for (Profile prof : profiles) {
        if(null != prof.getApplication()){
          System.out.println("Inside create IT Role Method 333333333333333333333333333");
        Application profileObj = prof.getApplication();
          
        if(profileObj.getName().equalsIgnoreCase(appObj.getName())){
        //  prof.setConstraints(filterList);
          System.out.println("Inside iff Application name is same");
          List constraints = prof.getConstraints();
			for (Filter filter : constraints) {
				if(filter instanceof Filter.LeafFilter){
          System.out.println("Inside create IT Role Method 444444444444444444");

				//	filter.getExpression();
					((Filter.LeafFilter) filter).setValue(entitlements);
          System.out.println("Inside create IT Role Method 555555555555555555555");
				prof.addConstraint(filter);
          role.add(prof);
          System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
			}
		}
          //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        //profile.setApplication(appObj);
         // profile.addConstraint(filter);
          //role.add(prof);
        }
        }

      }
    }  
   else
   { */
     System.out.println("Inside create IT Role Method 7777777777777777777");
      Profile profile = new Profile();
      profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
      profile.setApplication(appObj);
      //profile.addConstraint(filter);
      profile.setConstraints(filterList);
      role.add(profile);
     System.out.println("Inside create IT Role Method 88888888888888888888");

   // }

    System.out.println("role: " + role.toXml());
    context.saveObject(role);
    context.commitTransaction();

    return;
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CiamBulkITRole.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604263677260" id="0a111e5875691e4f817585910d4c2731" language="beanshell" modified="1604263685024" name="PolicyViolationPOC-Rule" type="Policy">
    <Description>This rule is used to determine if a Policy has been violated.</Description>
    <Signature returnType="PolicyViolation">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
          The Identity being inspected.
        </Description>
        </Argument>
        <Argument name="policy">
          <Description>
          The Policy being evaluated.
        </Description>
        </Argument>
        <Argument name="constraint">
          <Description>
          The Constraint being evaluated.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="violation">
          <Description>
          The PolicyViolation object.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
import java.util.*;
import java.text.*;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;

Logger log = Logger.getLogger("identity.test.sodPolicy");
log.debug("=== ENTER: Test SOD Policy ===");

PolicyViolation polVil = null;
boolean isViolation = false;

if (identity != null) {
String identityName = identity.getName();
// log.debug(" Test SOD : identityName ---"+identityName);
System.out.println(" Test SOD2 : identityName ---"+identityName);

List roleAssigns = identity.getAssignedRoles();
log.debug("Have roleAssigns: " + roleAssigns);


if (roleAssigns != null){
log.debug("# currently assigned = " + roleAssigns.size());

for (Bundle roleAssign : roleAssigns){
String rName = roleAssign.getName();
log.debug("Have role assign: " + rName);
System.out.println(" rName2---"+rName);
System.out.println(" roleAssign.getAttribute2---"+roleAssign.getAttribute("assignment_condition"));
if(rName.equalsIgnoreCase("AD-TEST-ASAP99A RO")){
if(roleAssign.getAttribute("assignment_condition").equals(identityName)){
isViolation=false;
}
else{
isViolation = true;
}
System.out.println(" isViolation 2---"+isViolation);
}
}
}

List links = identity.getLinks();

}

//==Check for Violation
if (isViolation) {
log.debug(" Test SOD : Inside Violation ---");
polVil = new PolicyViolation();
polVil.setActive(true);
polVil.setIdentity(identity);
polVil.setPolicy(policy);
polVil.setDescription("This combination of Role is not allowed for the Identity");
}

log.debug("=== EXIT: Test SOD Policy ===");
return polVil;</Source>
  </Rule>
  <Rule created="1604263677373" id="0a111e5875691e4f817585910dbd2732" language="beanshell" modified="1616840194932" name="CF-CIAM-WS-UpdateTimApplicationRolesAssignment-Rule">
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  import java.rmi.RemoteException;
  import java.util.Calendar;
  import java.util.GregorianCalendar;

  import javax.xml.rpc.ServiceException;
  import java.util.HashMap;
  import java.util.List;
  import sailpoint.object.Bundle;

  import com.carefirst.www.ciam.services.uaas.UAASLocator;
  import com.carefirst.www.ciam.services.uaas.UAASPort;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.*;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.Application;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.Assignment;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.AssignmentStatus;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.Role;
  import com.insidecarefirst.associate.ciamservices.service.faults.BaseFault;
  import com.insidecarefirst.associate.ciamservices.service.faults.CiamSystemFault;
  import com.insidecarefirst.associate.ciamservices.service.faults.UserNotExistFault;
  import com.insidecarefirst.associate.ciamservices.service.faults.ValidationFault;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateTimApplicationRolesAssignmentInput;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateTimApplicationRolesAssignmentOutput;
  import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateBusinessRolesAssignmentInput;
import com.insidecarefirst.associate.ciamservices.service.uaas_types.UpdateBusinessRolesAssignmentOutput;
  import com.insidecarefirst.associate.ciamservices.service.ciam_types.BusinessRole;

  
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
import sailpoint.tools.xml.XMLObjectFactory;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import java.util.HashMap;
import sailpoint.object.Identity;
 import org.apache.log4j.Logger;

  
  Logger loggerObj = Logger.getLogger("com.carefirst.roleassignment");

  loggerObj.info("Start Updatetime Role assignment");

  public  void updateTimApplicationRolesAssignmentInput(HashMap roleDetails) throws ServiceException, RemoteException   {
    System.out.println("Start updateTimApplicationRolesAssignmentInput is:::");
    loggerObj.info("Start updateTimApplicationRolesAssignmentInput is:::");

    try {
      UAASLocator uaas = new UAASLocator();
      uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
      UAASPort port = uaas.getUAASPort();
      UpdateTimApplicationRolesAssignmentInput updateTimApplicationRolesAssignmentInput = new UpdateTimApplicationRolesAssignmentInput();
      //updateTimApplicationRolesAssignmentInput.setUserName("aaa7818");
      updateTimApplicationRolesAssignmentInput.setUserName(roleDetails.get("username"));
       
       updateTimApplicationRolesAssignmentInput.setTimUserName(roleDetails.get("username"));
      updateTimApplicationRolesAssignmentInput.setUaasUserName("SAILPOINT");
      updateTimApplicationRolesAssignmentInput.setTsrNumber("SAILREQ");
     //updateTimApplicationRolesAssignmentInput.setUserName(roleDetails.get("username").toString());
      //updateTimApplicationRolesAssignmentInput.setTimUserName("aaa7818");
     
      com.insidecarefirst.associate.ciamservices.service.ciam_types.Application application = new com.insidecarefirst.associate.ciamservices.service.ciam_types.Application();
      application.setName(roleDetails.get("appName"));
      //application.setName("UAAS");
      //long id = 76;
      
      long id = Long.parseLong(roleDetails.get("appId"));
      
      application.setId(id);
      //application.setId(roleDetails.get("appId"));
      //long roleid = 76002;
      
      long roleid = Long.parseLong(roleDetails.get("roleId"));
      Role r = new Role();
      r.setId(roleid);
      //r.setId(roleDetails.get("roleId"));
      //r.setName("UAAS Global Read");
     
      r.setName(roleDetails.get("roleName"));
      if(null != roleDetails.get("roleAction")){
        if(roleDetails.get("roleAction").equalsIgnoreCase("ADD")){
      	r.setIsAssigned(true);
        }
        else{
        r.setIsAssigned(false);
      }
      }
      
      r.setIsAssignable(true);
      Assignment assignment = new Assignment();
      assignment.setAssigner("SAILPOINT");
      assignment.setAssignmentType(AssignmentStatus.Discretionary);
      assignment.setEffectiveDate(Calendar.getInstance());
      assignment.setTsrNumber("SAILREQ");
      Calendar endDate = new GregorianCalendar(3000, 01, 01); 
      assignment.setEndDate(endDate);
      r.setAssignment(assignment);
      Role[] roles = new Role[1]; 
      roles [0] =r;
      application.setRoles(roles);
      updateTimApplicationRolesAssignmentInput.setApplication(application);

      UpdateTimApplicationRolesAssignmentOutput output = port.updateTimApplicationRolesAssignment(updateTimApplicationRolesAssignmentInput);
      System.out.println("END UpdateTimApplicationRolesAssignmentOutput is:::"+output.getResponse().getResponseCode());
    } catch (UserNotExistFault e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    } catch (ValidationFault e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    } catch (CiamSystemFault e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    } catch (BaseFault e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    } catch (RemoteException e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    }

  }
  public void updateBusinessRoleAssignement(HashMap businessRoleDetails) throws ServiceException  {
    System.out.println("Start  updateBusinessRoleAssignement is:::");
    
		try {
			UAASLocator uaas = new UAASLocator();
			uaas.setUAASPortEndpointAddress(STR_WEBSERVICE_ENDPOINT);
			UAASPort port = uaas.getUAASPort();
			UpdateBusinessRolesAssignmentInput updateBusinessRolesAssignmentInput = new UpdateBusinessRolesAssignmentInput();
			updateBusinessRolesAssignmentInput.setUserName(businessRoleDetails.get("username"));
			updateBusinessRolesAssignmentInput.setUaasUserName("SAILPOINT");
			updateBusinessRolesAssignmentInput.setTsrNumber("SAILREQ");
			BusinessRole businessRole = new BusinessRole();
			BusinessRole[] businessRoles = new BusinessRole[1];
			businessRoles[0] = businessRole;
			businessRole.setName(businessRoleDetails.get("roleName"));
			//long ciamRoleId = 76;
      //long ciamRoleId = Long.parseLong(businessRoleDetails.get("cartRoleId"));
      long ciamRoleId = Long.parseLong(businessRoleDetails.get("cartRoleId"));
      
			businessRole.setId(ciamRoleId);
      if(null != businessRoleDetails.get("roleAction")){
        if(businessRoleDetails.get("roleAction").equalsIgnoreCase("ADD")){
      businessRole.setIsAssigned(true);
      }
        else{
						businessRole.setIsAssigned(false);
      }
      }
			businessRole.setIsAssignable(true);
			Assignment assignment = new Assignment();
			assignment.setAssigner("SAILPOINT");
			assignment.setAssignmentType(AssignmentStatus.Discretionary);
			assignment.setTsrNumber("SAILREQ");
			assignment.setEffectiveDate(Calendar.getInstance());
		
			Calendar endDate = new GregorianCalendar(3000, 01, 01);
			assignment.setEndDate(endDate);
			businessRole.setAssignment(assignment);
			updateBusinessRolesAssignmentInput.setBusinessRoles(businessRoles);
			
				UpdateBusinessRolesAssignmentOutput updateBusinessRolesAssignmentOutput = port.updateBusinessRolesAssignment(updateBusinessRolesAssignmentInput);
			System.out.println("END updateBusinessRolesAssignmentOutput is:::"+updateBusinessRolesAssignmentOutput.getResponse().getResponseCode());
    } catch (UserNotExistFault e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ValidationFault e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (CiamSystemFault e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (BaseFault e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	}


  public HashMap roleDetailsMap(String username, String rolename, String roleAction)throws Exception {
    HashMap hashMap = new HashMap();
    Bundle bundleObject = context.getObjectByName(Bundle.class, rolename);
    
   
    
    if(null != bundleObject){
       Bundle itBundleObject = context.getObjectByName(Bundle.class, rolename);
      //hashMap.put("appName", bundleObject.getAttribute("ciamApplicationName"));
      //hashMap.put("appId", bundleObject.getAttribute("ciamApplicationID"));
      
      hashMap.put("appName", itBundleObject.getAttribute("ciamApplicationName"));
      hashMap.put("appId", itBundleObject.getAttribute("ciamApplicationID"));
      
      //hashMap.put("roleId", bundleObject.getAttribute("ciamBusinessRoleId"));
      hashMap.put("roleId", bundleObject.getAttribute("ciamITRoleId"));
      //hashMap.put("roleName", bundleObject.getAttribute("ciamBusinessITRoleName"));
      hashMap.put("roleName", bundleObject.getName());
      hashMap.put("username", username);
      hashMap.put("roleAction", roleAction);
      return hashMap;
    }
  }
  
  public HashMap businessRoleDetailsMap(String username, String rolename, String roleAction)throws Exception {
    HashMap hashMap = new HashMap();
    Bundle bundleObject = context.getObjectByName(Bundle.class, rolename);
    if(null != bundleObject){
     // hashMap.put("appName", bundleObject.getAttribute("ciamApplicationName"));
      //hashMap.put("appId", bundleObject.getAttribute("ciamApplicationID"));
      //hashMap.put("cartRoleId", bundleObject.getAttribute("cartRoleId"));
      hashMap.put("cartRoleId", bundleObject.getAttribute("ciamBusinessRoleId"));
      
      //hashMap.put("roleName", bundleObject.getAttribute("ciamBusinessITRoleName"));
      hashMap.put("roleName", bundleObject.getName());
      hashMap.put("username", username);
      hashMap.put("roleAction", roleAction);
      return hashMap;
    }
  }
  
  public ProvisioningResult insertRole(ProvisioningPlan plan,AccountRequest acctRequest,Connection connection){

ProvisioningResult result = new ProvisioningResult();
String nativeIdentity=(String)acctRequest.getNativeIdentity();
String requestorId = plan.getArguments().get("requester").toString();
Identity requestorObject = context.getObjectByName(Identity.class,requestorId);
String requestorNetworkId = requestorObject.getAttribute("userid");
Identity requesteeObject = context.getObjectByName(Identity.class,nativeIdentity);
String requestee = requesteeObject.getDisplayName().toString();
String requesteeId = requesteeObject.getAttribute("userid");
String roleName = "";
String roleId = "";
String assigmentType="";
String applicationId = "";
String applicationName = "";
String startDate = "";
String endDate = "";
String timestamp = "";
if ( acctRequest != null ) {
AttributeRequest attrReq = acctRequest.getAttributeRequest("Role_name");
  System.out.println(" In Insert Role AttrRequ: " + attrReq);
if ( attrReq != null ) {
roleName = attrReq.getValue();
   System.out.println(" In Insert Role Role Namae : " + roleName);
}
}
if(roleName!=null &amp;&amp; !(roleName.equals(""))){

Bundle roleObject =  context.getObjectByName(Bundle.class,roleName);
System.out.println("Bundle "+roleObject.toXml());

if(rolObject!=null){
roleId = roleObject.getAttribute("ciamRoleID");
assigmentType = roleObject.getAttribute("roleProvisionType");
applicationId =  roleObject.getAttribute("ciamApplicationID");
applicationName = roleObject.getAttribute("ciamApplicationName");
}
}



try {

System.out.println("Operation [" + acctRequest.getOperation() + "] detected.");
PreparedStatement statement = connection.prepareStatement( "insert into CIAM_ROLESYNC_TABLE (Requestor_id,Requestor_Networkid,Requestee,Requestee_id,Native_Identity,Roleid,Role_name,Assignment_type,Application_id,Application_name,Start_Date,End_date,Timestamp) values (?,?,?,?,?,?,?,?,?,?,?,?,?)" );
statement.setString (1, requestorId);
statement.setString (2, requestorNetworkId);
statement.setString (3, requestee);
statement.setString (4, requesteeId);
statement.setString (5, nativeIdentity);
statement.setString (6, roleId);
statement.setString (7, roleName);
statement.setString (8, assigmentType);
statement.setString (9, applicationId);
statement.setString (10, applicationName);
statement.setString (11, startDate);
statement.setString (12, endDate);
statement.setString (13, timestamp);

statement.executeUpdate();
result.setStatus( ProvisioningResult.STATUS_COMMITTED );
  HashMap roleDetails = new HashMap();
  HashMap businessRoleDetails = new HashMap();
   Bundle bundleObject = context.getObjectByName(Bundle.class, roleName);
   System.out.println("IN Create before  CIAM Call requesteeId "+requesteeId);
  System.out.println("IN Create before Making CIAM Call roleName "+roleName);
   System.out.println("IN Create before Making CIAM Call Assignement Type "+bundleObject.getAttribute("assignment"));
  loggerObj.info("Assignemnet is:::"+bundleObject.getAttribute("assignment"));
   try{
     
     if(null != bundleObject.getAttribute("assignment") &amp;&amp; bundleObject.getAttribute("assignment").equalsIgnoreCase("Discretionary_IT")){
	 		/*String  dacITCiamApplicationName = bundleObject.getAttribute("ciamApplicationName");
       loggerObj.info("dacITCiamApplicationName is:::"+dacITCiamApplicationName);
       
      String  dacITCiamApplicationId = bundleObject.getAttribute("ciamApplicationID");
       loggerObj.info("dacITCiamApplicationId is:::"+dacITCiamApplicationId);
	  if(null != dacITCiamApplicationName &amp;&amp; null != dacITCiamApplicationId){
	     String[] dacITCiamApplicationNameArray = dacITCiamApplicationName.split(",");
		 String[] dacITCiamApplicationIdArray = dacITCiamApplicationId.split(",");
		 int dacITCiamApplicationNameLength = dacITCiamApplicationNameArray.length;
		 for (int i = 0; i &lt; dacITCiamApplicationNameLength; i++) {
		 roleDetails= roleDetailsMap(requesteeId, roleName, STR_ACTION_ADD);
		 roleDetails.put("appName", dacITCiamApplicationNameArray[i]);
		 roleDetails.put("appId", dacITCiamApplicationIdArray[i]);
        loggerObj.info("roleDetails is:::"+roleDetails);
		updateTimApplicationRolesAssignmentInput(roleDetails);
		
		 }
   
   }else {*/
	roleDetails= roleDetailsMap(requesteeId, roleName, STR_ACTION_ADD);
	updateTimApplicationRolesAssignmentInput(roleDetails);
  //}
     }else{
       businessRoleDetails = businessRoleDetailsMap(requesteeId, roleName, STR_ACTION_ADD);
       updateBusinessRoleAssignement(businessRoleDetails);
				/*List permitedRolesList = bundleObject.getPermits();
        for(Bundle permiteedRole:permitedRolesList){
          if(permiteedRole == null){
            continue;
          }
          String itRoleName = permiteedRole.getName();
           roleDetails= roleDetailsMap(requesteeId, itRoleName, STR_ACTION_ADD);
           updateTimApplicationRolesAssignmentInput(roleDetails);
        }*/
	
     }
  }catch(Exception e) {
System.out.println( e );

}
  
}
catch( SQLException e ) {
System.out.println( e );
result.setStatus( ProvisioningResult.STATUS_FAILED );
result.addError( e );
}
System.out.println( "result [" + result.toXml(false)+ "]");
return result;
  }


  </Source>
  </Rule>
  <Rule created="1604263677488" id="0a111e5875691e4f817585910e302733" language="beanshell" modified="1616840194930" name="CF-CIAMRoleSyncCreateProvisioning-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f817585910dbd2732" name="CF-CIAM-WS-UpdateTimApplicationRolesAssignment-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>The application whose data file is being processed.</Description>
        </Argument>
        <Argument name="schema">
          <Description>The Schema currently in use.</Description>
        </Argument>
        <Argument name="connection">
          <Description>A connection object to connect to database.</Description>
        </Argument>
        <Argument name="plan">
          <Description>The ProvisioningPlan created against the JDBC application.</Description>
        </Argument>
        <Argument name="request">
          <Description>The ProvisioningRequest created against the JDBC application.</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
import sailpoint.tools.xml.XMLObjectFactory;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import java.util.HashMap;
import sailpoint.object.Identity;
import sailpoint.object.Bundle;
  import org.apache.log4j.Logger;

  
  Logger loggerObj = Logger.getLogger("In CIAM ROLESYNCCreateprovisioining Rule");

  loggerObj.info("In CIAM ROLESYNCCreateprovisioining Rule");

System.out.println("Create Provisioning");
System.out.println("Plan"+plan.toXml());
System.out.println("request"+request.toXml());

  

  public ProvisioningResult insertRole(ProvisioningPlan plan,AccountRequest acctRequest,Connection connection){
System.out.println("insertRole:::");
ProvisioningResult result = new ProvisioningResult();
String nativeIdentity=(String)acctRequest.getNativeIdentity();
String requestorId = "";
Identity requestorObject = context.getObjectByName(Identity.class,nativeIdentity);
    System.out.println("nativeIdentity:::"+nativeIdentity);
    System.out.println("requestorId:::"+requestorId);
String requestorNetworkId = requestorObject.getAttribute("userid");
Identity requesteeObject = context.getObjectByName(Identity.class,nativeIdentity);
String requestee = "";
String requesteeId = requesteeObject.getAttribute("userid");
String roleName = "";
String roleId = "";
String assigmentType="";
String applicationId = "";
String applicationName = "";
String startDate = "";
String endDate = "";
String timestamp = "";
if ( requesteeObject != null ) {
  String employeeType = requesteeObject.getAttribute("employeetype");
  if(null !=employeeType &amp;&amp; employeeType.equalsIgnoreCase("ASSOCIATE")){
    System.out.println("employeeType:::"+employeeType);
    roleName = "Associate Biz Role";
  }else{
     roleName = "Contractor Biz Role";
    
  }
}
/*if(roleName!=null &amp;&amp; !(roleName.equals(""))){

Bundle roleObject =  context.getObjectByName(Bundle.class,roleName);
System.out.println("Bundle "+roleObject.toXml());

if(rolObject!=null){
roleId = roleObject.getAttribute("ciamRoleID");
assigmentType = roleObject.getAttribute("roleProvisionType");
applicationId =  roleObject.getAttribute("ciamApplicationID");
applicationName = roleObject.getAttribute("ciamApplicationName");
}
}*/



try {
if(null != nativeIdentity){
System.out.println("Operation [" + acctRequest.getOperation() + "] detected.");
PreparedStatement statement = connection.prepareStatement( "insert into CIAM_ROLESYNC_TABLE (Requestor_id,Requestor_Networkid,Requestee,Requestee_id,Native_Identity,Roleid,Role_name,Assignment_type,Application_id,Application_name,Start_Date,End_date,Timestamp) values (?,?,?,?,?,?,?,?,?,?,?,?,?)" );
statement.setString (1, requestorId);
statement.setString (2, requestorNetworkId);
statement.setString (3, requestee);
statement.setString (4, requesteeId);
statement.setString (5, nativeIdentity);
statement.setString (6, roleId);
statement.setString (7, roleName);
statement.setString (8, assigmentType);
statement.setString (9, applicationId);
statement.setString (10, applicationName);
statement.setString (11, startDate);
statement.setString (12, endDate);
statement.setString (13, timestamp);

statement.executeUpdate();
result.setStatus( ProvisioningResult.STATUS_COMMITTED );
   /*HashMap roleDetails = new HashMap();
  HashMap businessRoleDetails = new HashMap();
   Bundle bundleObject = context.getObjectByName(Bundle.class, roleName);
  System.out.println("IN Create before  CIAM Call requesteeId "+requesteeId);
  System.out.println("IN Create before Making CIAM Call roleName "+roleName);
   try{
     if(null != bundleObject){
     if(null != bundleObject.getAttribute("assignment") &amp;&amp; bundleObject.getAttribute("assignment").equalsIgnoreCase("Discretionary_IT")){
	String  dacITCiamApplicationName = bundleObject.getAttribute("ciamApplicationName");
      String  dacITCiamApplicationId = bundleObject.getAttribute("ciamApplicationID");
       loggerObj.info("In CIAM ROLESYNCCreateprovisioining Rule dacITCiamApplicationName IS:: "+dacITCiamApplicationName);
       loggerObj.info("In CIAM ROLESYNCCreateprovisioining Rule dacITCiamApplicationId IS::" + dacITCiamApplicationId);
	  if(null != dacITCiamApplicationName &amp;&amp; null != dacITCiamApplicationId){
	     String[] dacITCiamApplicationNameArray = dacITCiamApplicationName.split(",");
		 String[] dacITCiamApplicationIdArray = dacITCiamApplicationId.split(",");
		 int dacITCiamApplicationNameLength = dacITCiamApplicationNameArray.length;
		 for (int i = 0; i &lt; dacITCiamApplicationNameLength; i++) {
		 roleDetails= roleDetailsMap(requesteeId, roleName, STR_ACTION_ADD);
		 roleDetails.put("appName", dacITCiamApplicationNameArray[i]);
		 roleDetails.put("appId", dacITCiamApplicationIdArray[i]);
       loggerObj.info("In CIAM roleDetails Rule roleDetails IS::" + roleDetails);
		updateTimApplicationRolesAssignmentInput(roleDetails);
		
		 }
   
   }else {
	roleDetails= roleDetailsMap(requesteeId, roleName, STR_ACTION_ADD);
	updateTimApplicationRolesAssignmentInput(roleDetails);
  //}
     }else{
       businessRoleDetails = businessRoleDetailsMap(requesteeId, roleName, STR_ACTION_ADD);
       updateBusinessRoleAssignement(businessRoleDetails);
				/*List permitedRolesList = bundleObject.getPermits();
        for(Bundle permiteedRole:permitedRolesList){
          if(permiteedRole == null){
            continue;
          }
          String itRoleName = permiteedRole.getName();
           roleDetails= roleDetailsMap(requesteeId, itRoleName, STR_ACTION_ADD);
           updateTimApplicationRolesAssignmentInput(roleDetails);
        }
	
     }
     }
  }catch(Exception e ) {
System.out.println( e );

}*/
}
}
catch( SQLException e ) {
System.out.println( e );
result.setStatus( ProvisioningResult.STATUS_FAILED );
result.addError( e );
}
System.out.println( "result [" + result.toXml(false)+ "]");
return result;
  }    
    AccountRequest acctRequest = (AccountRequest) request;
  
 ProvisioningResult result = insertRole(plan,request,connection);
  return result;
    </Source>
  </Rule>
  <Rule created="1604263677625" id="0a111e5875691e4f817585910eb92734" language="beanshell" modified="1606205769163" name="CF-CIAMRoleSyncDeleteProvisioning-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f817585910dbd2732" name="CF-CIAM-WS-UpdateTimApplicationRolesAssignment-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>The application whose data file is being processed.</Description>
        </Argument>
        <Argument name="schema">
          <Description>The Schema currently in use.</Description>
        </Argument>
        <Argument name="connection">
          <Description>A connection object to connect to database.</Description>
        </Argument>
        <Argument name="plan">
          <Description>The ProvisioningPlan created against the JDBC application.</Description>
        </Argument>
        <Argument name="request">
          <Description>The ProvisioningRequest created against the JDBC application.</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
import sailpoint.tools.xml.XMLObjectFactory;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import java.util.HashMap;

System.out.println("Create Provisioning");
System.out.println("Plan"+plan.toXml());
System.out.println("request"+request.toXml());
//System.out.println("Plan.requestor"+plan.getAttributes().get("requester"));

public String getAttributeRequestValue(AccountRequest acctReq, String attribute) {
if ( acctReq != null ) {
AttributeRequest attrReq = acctReq.getAttributeRequest(attribute);
if ( attrReq != null ) {
return attrReq.getValue();
}
}
return null;
}

AccountRequest acctRequest = (AccountRequest) request;
ProvisioningResult result = new ProvisioningResult();
try {
//Ideally we should first check to see if the account already exists.
//As written, this just assumes it does not.
System.out.println("Operation [" + acctRequest.getOperation() + "] detected.");
PreparedStatement statement = connection.prepareStatement( "insert into CIAM_ROLESYNC_TABLE (native_identity,role_name) values (?,?)" );
statement.setString (1, (String) acctRequest.getNativeIdentity() );
//statement.setString (2, getAttributeRequestValue(acctRequest,"user_id") );
statement.setString (2, getAttributeRequestValue(acctRequest,"Role_name") );

statement.executeUpdate();
result.setStatus( ProvisioningResult.STATUS_COMMITTED );
  HashMap roleDetails = new HashMap();
   //roleDetails= roleDetailsMap((String) acctRequest.getNativeIdentity(), getAttributeRequestValue(acctRequest,"Role_name"), STR_DELETE);
  try{
  updateTimApplicationRolesAssignmentInput(roleDetails);
  }catch( SQLException e ) {
System.out.println( e );

}
}
catch( SQLException e ) {
System.out.println( e );
result.setStatus( ProvisioningResult.STATUS_FAILED );
result.addError( e );
}
System.out.println( "result [" + result.toXml(false)+ "]");
return result;</Source>
  </Rule>
  <Rule created="1604263677737" id="0a111e5875691e4f817585910f292735" language="beanshell" modified="1604263685295" name="CF-ADWWWHomePage-Rule" type="FieldValue">
    <Description>Rule to set wWWHomePage attribute of the user on AD.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  import sailpoint.object.*;

  if(identity != null){

    String userIDValue  = identity.getAttribute(ATR_USERID);
    String userWwwHomePage = userIDValue + ATR_WWWHOMEPAGE;
    
      return userWwwHomePage;
    }  
  </Source>
  </Rule>
  <Rule created="1604263677846" id="0a111e5875691e4f817585910f962736" language="beanshell" modified="1609238183608" name="Test DEC Rule">
    <Source>
  
  
return context.decrypt("1:ACP:I3XIbidfVQpVDW2pW3/o3zkEDaoN6unICZfNm/gT6ErM+JGlhxuSeudlgU9Ek5GR=");

  </Source>
  </Rule>
  <Rule created="1604263677962" id="0a111e5875691e4f81758591100a2737" language="beanshell" modified="1611845033751" name="CF-CIAMRoleSyncModifyProvisioning-Rule" type="JDBCOperationProvisioning">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f817585910dbd2732" name="CF-CIAM-WS-UpdateTimApplicationRolesAssignment-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult"/>
    <Source>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
  import sailpoint.object.Bundle;
  import sailpoint.object.Identity;
import sailpoint.tools.xml.XMLObjectFactory;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import java.util.HashMap;

System.out.println("UPDATE");
System.out.println("Plan"+plan.toXml());
System.out.println("request"+request.toXml());
System.out.println("getArguments"+plan.getArguments());
System.out.println("requester"+plan.getArguments().get("requester"));

String roleName = "";
String operation="";
  String removeRole = "";
AccountRequest acctRequest = (AccountRequest) request;
ProvisioningResult result = new ProvisioningResult();

String nativeIdentity=(String)acctRequest.getNativeIdentity();

if ( acctRequest != null ) {
AttributeRequest attrReq = acctRequest.getAttributeRequest("Role_name");
if ( attrReq != null ) {

System.out.println("Operation "+attrReq.getOp());
roleName = attrReq.getValue();
operation= attrReq.getOp().toString();
}
}


if(operation.equals("Add")){

result= insertRole(plan,request,connection);
}

else if(operation.equals("Remove")){
System.out.println("ELSE");
try {
  if ( acctRequest != null ) {
AttributeRequest attrReqRemove = acctRequest.getAttributeRequest("Role_name");
if ( attrReqRemove != null ) {
removeRole = attrReqRemove.getValue();

}
}
PreparedStatement st = connection.prepareStatement("DELETE FROM CIAM_ROLESYNC_TABLE WHERE native_identity= '"+nativeIdentity+"' AND role_name='"+removeRole+"'");
st.executeUpdate();
result.setStatus( ProvisioningResult.STATUS_COMMITTED );
  try{
  HashMap roleDetails = new HashMap();
  HashMap businessRoleDetails = new HashMap();
  Identity requesteeObject = context.getObjectByName(Identity.class,nativeIdentity);
  Bundle removebundleObject = context.getObjectByName(Bundle.class, removeRole);

String requesteeId = requesteeObject.getAttribute("userid");
 if(null != removebundleObject.getAttribute("assignment") &amp;&amp; removebundleObject.getAttribute("assignment").equalsIgnoreCase("Discretionary_IT")){
	 /*String  dacITCiamApplicationName = removebundleObject.getAttribute("ciamApplicationName");
      String  dacITCiamApplicationId = removebundleObject.getAttribute("ciamApplicationID");
	  if(null != dacITCiamApplicationName &amp;&amp; null != dacITCiamApplicationId){
	     String[] dacITCiamApplicationNameArray = dacITCiamApplicationName.split(",");
		 String[] dacITCiamApplicationIdArray = dacITCiamApplicationId.split(",");
		 int dacITCiamApplicationNameLength = dacITCiamApplicationNameArray.length;
		 for (int i = 0; i &lt; dacITCiamApplicationNameLength; i++) {
		 roleDetails= roleDetailsMap(requesteeId, removeRole, STR_DELETE);
		 roleDetails.put("appName", dacITCiamApplicationNameArray[i]);
		 roleDetails.put("appId", dacITCiamApplicationIdArray[i]);
		updateTimApplicationRolesAssignmentInput(roleDetails);
		
		 }
   
   }else {*/
	roleDetails= roleDetailsMap(requesteeId, removeRole, STR_DELETE);
	updateTimApplicationRolesAssignmentInput(roleDetails);
  //}
     }else{
    businessRoleDetails = businessRoleDetailsMap(requesteeId, removeRole, STR_DELETE);
       updateBusinessRoleAssignement(businessRoleDetails);
    
  }
  }catch(Exception e) {
System.out.println( e );

}

}
catch( SQLException e ) {
System.out.println( e );
result.setStatus( ProvisioningResult.STATUS_FAILED );
result.addError( e );
}
}
System.out.println( "result [" + result.toXml(false)+ "]");
return result;</Source>
  </Rule>
  <Rule created="1604484891088" id="0a111e587589146b817592c081d00ca8" language="beanshell" modified="1604488955274" name="CF-BulkImportITRoles-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
     role.setName(strCiamITRoleName);
      role.setDisplayName(strCiamITRoleName);
      role.setType("it");
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
      role.setAttribute("ciamITRoleId", strCiamITRoleID);
      // unused attributes
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Convert the entitlements list into a java.util.List object.
      if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
        entsList = entsList.replace("\\/", "/");
      }
      RFC4180LineParser entParser = new RFC4180LineParser("|");
      List entitlements = entParser.parseLine(entsList);

      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
        if (null == appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");

          for (String entName : entitlements) {



            Filter maFilter= Filter.and(Filter.eq("value",entName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entName);
              ma.setValue(entName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();
            }
          }
          appObj = ciamAppObj; 
          //  return;		 

        }
      }

      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        //  role.getProfiles().clear();
      }	  
      /*   List entitlements = new ArrayList();
    Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
    if(newRole != null){
      entitlements = getEntValues(newRole);
    }
   entitlements.add(entsList); */
      // Build the filterString for entitlements matching this IT role.
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();

        for (Profile prof : profiles) {
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();

            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              // prof.getConstraints().remove(filter);
              //  prof.setConstraints(filterList);
              System.out.println("Inside iff Application name is same");
              //  List constraints = prof.getConstraints();
              // constraints.add(filter);
              System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              /*  for (Filter filterNew : constraints) {
              if(filterNew instanceof Filter.LeafFilter){
                System.out.println("Inside create IT Role Method 444444444444444444");

                //	filter.getExpression();
              //  ((Filter.LeafFilter) filterNew).setValue(entitlements);
                System.out.println("Inside create IT Role Method 555555555555555555555");
                prof.addConstraint(filter);
                role.add(prof);
                System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
              }
            } */
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            }
          }

        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profile = new Profile();
        profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
        //profile.addConstraint(filter);
        profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 88888888888888888888");

      }

      System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("MissingRole");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//Active Directory.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604561082010" id="0a111e587589146b8175974b169a1a8d" language="beanshell" modified="1604562367452" name="CF-BulkBusinessRolesImport-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Attributes;

  import java.util.Map;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  //Getting the attribute values from assignement rule
  public List getMatchTerms(Bundle bundle){
    List valuesList = new ArrayList();
    if(null != bundle){
      if( null != bundle.getSelector()){
        IdentitySelector selector = bundle.getSelector();
        MatchExpression matchExpression = selector.getMatchExpression();

        List terms = matchExpression.getTerms();
        return terms; 

      }

    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);

    String strBZAssignType  = (String) roleHash.get("BZ_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("BZ_ASSIGNMENT_TYPE") : "";
    String strSRAssignType  = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
    String strCatagory  = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamRoleID  = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

    //  String strCiamBusinessITRoleName  = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strAction = (String) roleHash.get("Action") != null ?   (String) roleHash.get("Action"): "";
    String strAssignment = (String) roleHash.get("Assignment") != null ?   (String) roleHash.get("Assignment"): "";
    String strRoleName  = (String) roleHash.get("Business Role Name") != null ?   (String) roleHash.get("Business Role Name"): "";
    String strRoleOwner  = (String) roleHash.get("Business Role Owner") != null ?  (String) roleHash.get("Business Role Owner"): "";
    String strRoleDesc  = (String) roleHash.get("Role Description") != null ?   (String) roleHash.get("Role Description") : "";
    String subRoles  = (String) roleHash.get("CIAM Business IT Role Name") != null ?  (String) roleHash.get("CIAM Business IT Role Name"): "";
    String strBussinessUnit  = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
    String strDeptCode  = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
    String strJobCode  = (String) roleHash.get("JOB_CD  (Job Code)") != null ? (String) roleHash.get("JOB_CD  (Job Code)") : "";
    String strEeoCode  = (String) roleHash.get("EEO_CD (EEO Code)") != null ?   (String) roleHash.get("EEO_CD (EEO Code)") : "";
    String strCompanyCode  = (String) roleHash.get("CO_CD (Company Code)") != null ?   (String) roleHash.get("CO_CD (Company Code)") : "";
    String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ?   (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
    String strCostCenter  = (String) roleHash.get("COST_CENTER (Cost Center)") != null ?  (String) roleHash.get("COST_CENTER (Cost Center)") : "";
    String strMgrPositionNumber  = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ?  (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
    String strPositionNumber  = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
    String strLocationCode  = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ?  (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
    String strSupplierName  = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ?  (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    String classificationName   = "BirthRight";

    //String classificationName  = (String) roleHash.get("Classification");
    // String isRequestable  = (String) roleHash.get("Requestable Role");

    // boolean isRequestable  = (Boolean) roleHash.get("Requestable Role");
    //String assignRule  = (String) roleHash.get("AssignmentRule");
    //String costCentre  = (String) roleHash.get("costcenter");
    //String jobCode  = (String) roleHash.get("jobcode");


    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);

    try{
      Bundle role = context.getObject(Bundle.class, strCiamBusinessRoleName);
      if (null == role) {
        //System.out.println(" - role does not exist, creating new: " + roleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamBusinessRoleName)) {
        role.setName(strCiamBusinessRoleName);
        role.setDisplayName(strCiamBusinessRoleName);
        role.setType("business");
        role.setAttribute("category", strCatagory);
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        role.setAttribute("ciamBusinessRoleId", strCiamRoleID);// ciam role ID
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        //role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("action", strAction);
        role.setAttribute("assignment", strAssignment);

        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
      }
      if(Util.isNotNullOrEmpty(strRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strRoleDesc);
        role.setDescriptions(descMap);
      }



      Identity ownerId = context.getObject(Identity.class, strRoleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  strRoleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);

      System.out.println("role: " + role.toXml());
      if(Util.isNotNullOrEmpty(strBZAssignType)&amp;&amp;Util.isNotNullOrEmpty(strSRAssignType)&amp;&amp; strBZAssignType.equalsIgnoreCase("Mandatory") &amp;&amp; strSRAssignType.equalsIgnoreCase("Mandatory") ){
        // Setting the classification to the Role
        if(Util.isNotNullOrEmpty(classificationName)) {
          List classificList = new ArrayList();

          ObjectClassification objClassific = new ObjectClassification();
          objClassific.setOwnerType("Bundle");
          objClassific.setSource("UI");
          Classification classification = context.getObjectByName(Classification.class, classificationName);
          if(classification != null) {

            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);
          }
          else
          {
            classification = new Classification();
            classification.setName(classificationName);
            classification.setDisplayName(classificationName);
            classification.setOrigin("MyIndependentDataSource");
            Map descMap  = new HashMap();
            descMap.put("en_US", "Allow Access specified Role");
            classification.setDescriptions(descMap);
            context.saveObject(classification);
            context.commitTransaction();
            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);

          }



        }


        // Creating the Assignement Rule with below attributes 
        IdentitySelector idSelector = new IdentitySelector();
        MatchExpression matExp = new MatchExpression();
        MatchTerm andMatchTerm = new MatchTerm();
        andMatchTerm.setAnd(true);
        andMatchTerm.setContainer(true);
        MatchTerm matchTerm = null;
        // matExp.setAnd(true);
        if(Util.isNotNullOrEmpty(strJobCode) ) {
          matchTerm = new MatchTerm();
          matchTerm.setName("jobcode");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strJobCode);
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strBussinessUnit)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("businessunit");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strBussinessUnit);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strDeptCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("deptid");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strDeptCode);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strEeoCode)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("eeojobgroup");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strEeoCode); 
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCompanyCode)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("company");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCompanyCode);
          // matExp.addTerm(matchTerm);
          andMatchTerm.addChild(matchTerm);

          andMatchTerm.addChild(matchTerm);          
        }
        if(Util.isNotNullOrEmpty(strMgrCostCenter)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("mgrCostcenter");  // which attribute we have to take  here 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrCostCenter);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCostCenter)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("costcenter"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCostCenter);
          // matExp.addTerm(matchTerm); 
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strMgrPositionNumber)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("managerposnum"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrPositionNumber);
          andMatchTerm.addChild(matchTerm); 
        }
        if(Util.isNotNullOrEmpty(strPositionNumber)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("positionNumber"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strPositionNumber);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strLocationCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("location");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strLocationCode);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strSupplierName)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("supplierName"); // need to create the identity attribute for suppliier name 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strSupplierName);
          andMatchTerm.addChild(matchTerm);


        }

        if( null != role.getSelector()){
          IdentitySelector selector = role.getSelector();
          if(null != selector.getMatchExpression()){
            MatchExpression matchExpression = selector.getMatchExpression();
            if(matchExpression.getTerms() != null){

              List existingTerms = matchExpression.getTerms();
              if(null != existingTerms &amp;&amp; existingTerms.size() > 0){
                for (MatchTerm extTerm : existingTerms) {
                  matExp.addTerm(extTerm);
                }
              }

            }
          }

        }

        matExp.addTerm(andMatchTerm);
        idSelector.setMatchExpression(matExp);
        role.setSelector(idSelector); 
      } 

      // Convert the sub-roles list into a java.util.List object.
      /* RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
      List subRolesList = subRolePaser.parseLine(subRoles);

      System.out.println("subRolesList: " + subRolesList);
      // Add the required IT roles for this business role.
      if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
        for (String subRoleName : subRolesList) { */

      Bundle requiredRole = context.getObjectByName(Bundle.class, subRoles);
      if (null == requiredRole) {
        System.out.println(" - ERROR: Required role not found: " + subRoles);
      } else {
        role.addRequirement(requiredRole);
      }         	  

      //  }	 
      // }
      context.saveObject(role);
      context.commitTransaction();

      return;
    }    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      // Map map = new HashMap();
      // Attributes attrs = new Attributes();
      Custom customObj = context.getObjectByName(Custom.class,"Business-MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Business-MissingRole");
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);

      }
      else{
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);
      }



      // attrs.setMap(map);
      // customObj.setAttributes(attrs);

      context.saveObject(customObj);
      context.commitTransaction();

      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";

  //return csvFileName;

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");
  //return csvFileName;
  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      //  return lineHash;
      buildRole(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604567999319" id="0a111e587589146b817597b4a3571bad" language="beanshell" modified="1604829687287" name="BulkBusinessRoles-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Attributes;

  import java.util.Map;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  //Getting the attribute values from assignement rule
  public List getMatchTerms(Bundle bundle){
    List valuesList = new ArrayList();
    if(null != bundle){
      if( null != bundle.getSelector()){
        IdentitySelector selector = bundle.getSelector();
        MatchExpression matchExpression = selector.getMatchExpression();

        List terms = matchExpression.getTerms();
        return terms; 

      }

    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);

    String strBZAssignType  = (String) roleHash.get("BZ_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("BZ_ASSIGNMENT_TYPE") : "";
    String strSRAssignType  = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
    String strCatagory  = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamRoleID  = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

    //  String strCiamBusinessITRoleName  = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strAction = (String) roleHash.get("Action") != null ?   (String) roleHash.get("Action"): "";
    String strAssignment = (String) roleHash.get("Assignment") != null ?   (String) roleHash.get("Assignment"): "";
     String strAssignment = (String) roleHash.get("Assignment") != null ?   (String) roleHash.get("Assignment"): "";
    String strRoleName  = (String) roleHash.get("Business Role Name") != null ?   (String) roleHash.get("Business Role Name"): "";
    String strRoleOwner  = (String) roleHash.get("Business Role Owner") != null ?  (String) roleHash.get("Business Role Owner"): "";
    String strRoleDesc  = (String) roleHash.get("Role Description") != null ?   (String) roleHash.get("Role Description") : "";
    String subRoles  = (String) roleHash.get("CIAM Business IT Role Name") != null ?  (String) roleHash.get("CIAM Business IT Role Name"): "";
    String checkAssignment = (String) roleHash.get("Assignment Type") != null ?  (String) roleHash.get("Assignment Type"): "";
    String strBussinessUnit  = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
    String strDeptCode  = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
    String strJobCode  = (String) roleHash.get("JOB_CD  (Job Code)") != null ? (String) roleHash.get("JOB_CD  (Job Code)") : "";
    String strEeoCode  = (String) roleHash.get("EEO_CD (EEO Code)") != null ?   (String) roleHash.get("EEO_CD (EEO Code)") : "";
    String strCompanyCode  = (String) roleHash.get("CO_CD (Company Code)") != null ?   (String) roleHash.get("CO_CD (Company Code)") : "";
    String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ?   (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
    String strCostCenter  = (String) roleHash.get("COST_CENTER (Cost Center)") != null ?  (String) roleHash.get("COST_CENTER (Cost Center)") : "";
    String strMgrPositionNumber  = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ?  (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
    String strPositionNumber  = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
    String strLocationCode  = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ?  (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
    String strSupplierName  = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ?  (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    String classificationName   = "BirthRight";

    //String classificationName  = (String) roleHash.get("Classification");
    // String isRequestable  = (String) roleHash.get("Requestable Role");

    // boolean isRequestable  = (Boolean) roleHash.get("Requestable Role");
    //String assignRule  = (String) roleHash.get("AssignmentRule");
    //String costCentre  = (String) roleHash.get("costcenter");
    //String jobCode  = (String) roleHash.get("jobcode");


    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);

    try{
      Bundle role = context.getObject(Bundle.class, strCiamBusinessRoleName);
      if (null == role) {
        //System.out.println(" - role does not exist, creating new: " + roleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamBusinessRoleName)) {
        role.setName(strCiamBusinessRoleName);
        role.setDisplayName(strCiamBusinessRoleName);
        role.setType("business");
        role.setAttribute("category", strCatagory);
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        role.setAttribute("ciamBusinessRoleId", strCiamRoleID);// ciam role ID
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        //role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("action", strAction);
        role.setAttribute("assignment", strAssignment);

        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
        
      }
      if(Util.isNotNullOrEmpty(strRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strRoleDesc);
        role.setDescriptions(descMap);
      }



      Identity ownerId = context.getObject(Identity.class, strRoleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  strRoleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);

      System.out.println("role: " + role.toXml());
      if(Util.isNotNullOrEmpty(strBZAssignType)&amp;&amp;Util.isNotNullOrEmpty(strSRAssignType)&amp;&amp; strBZAssignType.equalsIgnoreCase("Mandatory") &amp;&amp; strSRAssignType.equalsIgnoreCase("Mandatory") ){
        // Setting the classification to the Role
        if(Util.isNotNullOrEmpty(classificationName)) {
          List classificList = new ArrayList();

          ObjectClassification objClassific = new ObjectClassification();
          objClassific.setOwnerType("Bundle");
          objClassific.setSource("UI");
          Classification classification = context.getObjectByName(Classification.class, classificationName);
          if(classification != null) {

            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);
          }
          else
          {
            classification = new Classification();
            classification.setName(classificationName);
            classification.setDisplayName(classificationName);
            classification.setOrigin("MyIndependentDataSource");
            Map descMap  = new HashMap();
            descMap.put("en_US", "Allow Access specified Role");
            classification.setDescriptions(descMap);
            context.saveObject(classification);
            context.commitTransaction();
            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);

          }



        }

	if(! "0".equalsIgnoreCase(checkAssignment)){
        // Creating the Assignement Rule with below attributes 
        IdentitySelector idSelector = new IdentitySelector();
        MatchExpression matExp = new MatchExpression();
        MatchTerm andMatchTerm = new MatchTerm();
        andMatchTerm.setAnd(true);
        andMatchTerm.setContainer(true);
        MatchTerm matchTerm = null;
        // matExp.setAnd(true);
        if(Util.isNotNullOrEmpty(strJobCode) ) {
          matchTerm = new MatchTerm();
          matchTerm.setName("jobcode");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strJobCode);
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strBussinessUnit)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("businessunit");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strBussinessUnit);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strDeptCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("deptid");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strDeptCode);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strEeoCode)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("eeojobgroup");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strEeoCode); 
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCompanyCode)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("company");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCompanyCode);
          // matExp.addTerm(matchTerm);
          andMatchTerm.addChild(matchTerm);

          andMatchTerm.addChild(matchTerm);          
        }
        if(Util.isNotNullOrEmpty(strMgrCostCenter)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("mgrCostcenter");  // which attribute we have to take  here 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrCostCenter);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCostCenter)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("costcenter"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCostCenter);
          // matExp.addTerm(matchTerm); 
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strMgrPositionNumber)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("managerposnum"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrPositionNumber);
          andMatchTerm.addChild(matchTerm); 
        }
        if(Util.isNotNullOrEmpty(strPositionNumber)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("positionNumber"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strPositionNumber);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strLocationCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("location");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strLocationCode);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strSupplierName)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("supplierName"); // need to create the identity attribute for suppliier name 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strSupplierName);
          andMatchTerm.addChild(matchTerm);


        }

        if( null != role.getSelector()){ // checking for exsting match Terms 
          IdentitySelector selector = role.getSelector();
          if(null != selector.getMatchExpression()){
            MatchExpression matchExpression = selector.getMatchExpression();
            if(matchExpression.getTerms() != null){

              List existingTerms = matchExpression.getTerms();
              if(null != existingTerms &amp;&amp; existingTerms.size() > 0 &amp;&amp; Util.isNullOrEmpty(checkAssignment)){
                for (MatchTerm extTerm : existingTerms) {
                  matExp.addTerm(extTerm);
                }
              }
              if(null != existingTerms &amp;&amp; existingTerms.size() > 0 &amp;&amp; Util.isNotNullOrEmpty(checkAssignment) &amp;&amp; "1".equalsIgnoreCase(checkAssignment) ){
                for (MatchTerm extTerm : existingTerms) {

                  List childrenTerms = extTerm.getChildren();
                  MatchTerm newChildTerm = andMatchTerm.getChildren().get(0);
                  for (MatchTerm childTerm : childrenTerms) {


                    if(!childTerm.getValue().equalsIgnoreCase(newChildTerm.getValue())){
                      matExp.addTerm(extTerm);

                    } // child term compare closing 


                  } //child iterator closing

                } // existing term iterator closing 
              } // checking assignment 1 closing

            }
          }

        }


        matExp.addTerm(andMatchTerm);
        idSelector.setMatchExpression(matExp);
        role.setSelector(idSelector); 
      } 
    }
      // Convert the sub-roles list into a java.util.List object.
      /* RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
      List subRolesList = subRolePaser.parseLine(subRoles);

      System.out.println("subRolesList: " + subRolesList);
      // Add the required IT roles for this business role.
      if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
        for (String subRoleName : subRolesList) { */

       Bundle requiredRole = context.getObjectByName(Bundle.class, subRoles);
     if (null != requiredRole) {
       
        if(role.getRequirements() != null){
          List requirements = role.getRequirements();
          for (Bundle bundle2 : requirements) {
            String name = bundle2.getName();
            if(!name.equalsIgnoreCase(requiredRole.getName())){
              
				     role.addRequirement(requiredRole);
              break;
            }
                        
           
          }

        }
        else
        {
          role.addRequirement(requiredRole);
        }


      } else  
      {
      System.out.println(" - ERROR: Required role not found: " + subRoles);
      } 

      //  }	 
      // }
      context.saveObject(role);
      context.commitTransaction();

      return;
    }    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      // Map map = new HashMap();
      // Attributes attrs = new Attributes();
      Custom customObj = context.getObjectByName(Custom.class,"Business-MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Business-MissingRole");
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);

      }
      else{
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);
      }



      // attrs.setMap(map);
      // customObj.setAttributes(attrs);

      context.saveObject(customObj);
      context.commitTransaction();

      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
//  String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";
 
  


  //return csvFileName;

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");
  //return csvFileName;
  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
     // return lineHash;
      buildRole(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604912340828" id="0a111e587589146b8175ac3adf5c506d" language="beanshell" modified="1604912953595" name="BulkImportITRoles-TestRule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
 // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entitlementName = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
        role.setName(strCiamITRoleName);
        role.setDisplayName(strCiamITRoleName);
        role.setType("it");
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
        role.setAttribute("ciamITRoleId", strCiamITRoleID);
        // unused attributes
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
        if (null == appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          if(appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
          Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");

            Filter maFilter= Filter.and(Filter.eq("value",entitlementName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entitlementName);
              ma.setValue(entitlementName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();
              
          }
         appObj = ciamAppObj;
          //  return;		
          }

        }
      }
if(appName.equalsIgnoreCase("Active Directory")|| appName.equalsIgnoreCase("BizAppAD")||appName.equalsIgnoreCase("ISAM LDAP")||appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
			
	
      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        //  role.getProfiles().clear();
      }	  

      // Build the filterString for entitlements matching this IT role.
	  List entitlements = new ArrayList();
	  entitlements.add(entitlementName);
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();

        for (Profile prof : profiles) {
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();

            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              // prof.getConstraints().remove(filter);
              //  prof.setConstraints(filterList);
              System.out.println("Inside iff Application name is same");
              List existingEntList = new ArrayList();
              List constraints = prof.getConstraints();
              // constraints.add(filter);
             // System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              for (Filter filterNew : constraints) {
                if(filterNew instanceof Filter.LeafFilter){
                  System.out.println("Inside create IT Role Method 444444444444444444");

                  //	filter.getExpression();
                  Object objValue = ((Filter.LeafFilter) filterNew).getValue();
                  if(objValue instanceof String){
                    existingEntList.add((String)objValue);
                  }
                  if(objValue instanceof List){
                    existingEntList.addAll((Collection) objValue);
                  }
                  if(null !=existingEntList &amp;&amp; existingEntList.size() > 0){ 
                    System.out.println("Inside create IT Role Method 555555555555555555555 Existing Ent lIst "+existingEntList);
                    System.out.println("Inside create IT Role Method New ENtilement "+entitlementName);

                    for(String oldEnt : existingEntList){
                      if(oldEnt.equalsIgnoreCase(entitlementName)){
                        System.out.println("Inside create IT Role Method Existing Entitlement and new Entitlement is same so returing ");
                        return;
                      }
                    }
                  }
                  System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
                }

              }
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
             // System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
             // System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            } 
            else
              break;
          
          }

        }
         System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profilee = new Profile();
        profilee.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profilee.setApplication(appObj);
        //profile.addConstraint(filter);
        profilee.setConstraints(filterList);
        role.add(profilee);
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profile = new Profile();
        profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
        //profile.addConstraint(filter);
        profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 88888888888888888888");

      }
}
     // System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"Missing-IT-Roles");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-IT-Roles");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
//    String csvFileName ="//home//iqadmin//Data//BulkRoleImport//ITRoles_Batch4.csv";
  
  String csvFileName ="//home//iqadmin//Data//DACITRoles_Test.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
    // return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1605018102418" id="0a111e5875ac1d808175b288aa920930" language="beanshell" modified="1616695946753" name="CF-DeptID-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
String bucode = "";
String departmentName = "";
if (identity.getAttribute("businessunit") != null) {
    bucode = identity.getAttribute("businessunit");
}
if (identity.getAttribute("departmentName") != null) {
    departmentName = identity.getAttribute("departmentName");
}
String deptID = bucode + " " + "-" + " " + departmentName;
return deptID;</Source>
  </Rule>
  <Rule created="1605019403225" id="0a111e5875ac1d808175b29c83d90960" language="beanshell" modified="1605188172543" name="CF-Telephone-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String phone= identity.getAttribute(ATR_PHONE);
return phone;</Source>
  </Rule>
  <Rule created="1605020035475" id="0a111e5875ac1d808175b2a629930983" language="beanshell" modified="1617916817290" name="CF-Homepage-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
  String homePage="";
  String userid = identity.getAttribute(ATR_USERID);
  if(null != userid) 
    homePage=STR_HOMEPAGECONSTANT+userid.toUpperCase();
  return homePage;</Source>
  </Rule>
  <Rule created="1605186894016" id="0a111e5875b51a258175bc9838c00f49" language="beanshell" modified="1616518038394" name="CF-CostCenter-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String company = identity.getAttribute(ATR_COSTCENTER);
return company;</Source>
  </Rule>
  <Rule created="1605187150740" id="0a111e5875b51a258175bc9c23940f51" language="beanshell" modified="1605188144289" name="CF-EEOCode-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String eeocode= identity.getAttribute(ATR_EEOCODE);
return eeocode;</Source>
  </Rule>
  <Rule created="1605187379330" id="0a111e5875b51a258175bc9fa0820f5a" language="beanshell" modified="1606372832876" name="CF-ISAMLDAPCN-Rule" type="FieldValue">
    <Description></Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

  
  String userFN = identity.getAttribute(ATR_FIRSTNAME);
  String userLN = identity.getAttribute(ATR_IDEN_LASTNAME);

  String isamLdapCn=userFN + " " + userLN;
System.out.println("isamLdapCn...."+isamLdapCn);
System.out.println("userFN ...."+userFN );
System.out.println("userLN ...."+userLN );




  return isamLdapCn;</Source>
  </Rule>
  <Rule created="1605187621757" id="0a111e5875b51a258175bca3537d0f62" language="beanshell" modified="1616517992577" name="CF-BusinessUnit-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String businessUnit= identity.getAttribute(ATR_BUSINESSUNIT);
return businessUnit;</Source>
  </Rule>
  <Rule created="1606118566491" id="0a111e5875e014d08175f4206a5b3de3" language="beanshell" modified="1606590995549" name="CF-ADEMAIL-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>  import sailpoint.object.*;

//String employeetype = identity.getAttribute("employeetype");
  String employeetype = STR_EMPLOYEE;
  System.out.println("CF-Global-EmailRule"+employeetype);
String firstname = "";
 // String firstname =  identity.getFirstname();
if(employeetype.equalsIgnoreCase(STR_EMPLOYEE)){
if(identity.getAttribute("preffirstname")!=null){
firstname =  identity.getAttribute("preffirstname");
}
else{
firstname =  identity.getFirstname();
}
}
 else{
firstname =  identity.getFirstname();
}
  System.out.println("CF-Global-EmailRule"+firstname);
String lastname =  identity.getLastname();
  System.out.println("CF-Global-EmailRule"+lastname);
String company = identity.getAttribute(ATR_COMPANY);
//  String company = "WIL";
  System.out.println("CF-Global-EmailRule: "+company);
String domain = "";

if(company.equalsIgnoreCase("CCO")){
domain=STR_CCO_MAIL;
}
else if(company.equalsIgnoreCase("TRU")){
domain=STR_TRU_MAIL;
}
else if(company.equalsIgnoreCase("WIL")||company.equalsIgnoreCase("NCS")){
domain=STR_WIL_MAIL;
}
else if(company.equalsIgnoreCase("SBP")){
domain=STR_SBP_MAIL;
}
else {
domain=STR_CAREFIRST_MAIL;
}
System.out.println("CF-Global-EmailRule"+domain);
String email = firstname+"."+lastname+domain;
  System.out.println("email::"+email);
 boolean flag = true;

  Identity identity = null; 
  Filter emailFilter= null;
    emailFilter = Filter.eq("email",email);
   identity = context.getUniqueObject(Identity.class,emailFilter);
   
   if(identity != null){
     System.out.println("identity......."+email);
		String middleInit = identity.getAttribute("middlename");
		List middleList = new ArrayList();
		if(middleInit != null @and middleInit.length() != 0){
		email = firstname+"."+middleInit.charAt(0)+"."+lastname+domain;
		//middleList.add(Character.toString(middleInit.charAt(0)));
		emailFilter = Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+domain;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch @lteq 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+domain;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
	  else{
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+domain;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch @lteq 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+domain;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
  }
   System.out.println("Before Return::"+email);
return email;
  
/*import sailpoint.object.*;

String firstname =  identity.getFirstname();
String lastname =  identity.getLastname();

String email = firstname+"."+lastname+STR_CAREFIRST_MAIL;
 boolean flag = true;

  Identity identity = null; 
  Filter emailFilter= null;
    emailFilter = Filter.eq("email",email);
   identity = context.getUniqueObject(Identity.class,emailFilter);
   
   if(identity != null){
   
		String middleInit = identity.getAttribute("middlename");
		List middleList = new ArrayList();
		if(middleInit != null &amp;amp;&amp;amp; middleInit.length() != 0){
		email = firstname+"."+middleInit.charAt(0)+"."+lastname+STR_CAREFIRST_MAIL;
		//middleList.add(Character.toString(middleInit.charAt(0)));
		emailFilter = Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+STR_CAREFIRST_MAIL;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch &amp;lt;= 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+STR_CAREFIRST_MAIL;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
	  else{
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+STR_CAREFIRST_MAIL;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch &amp;lt;= 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+STR_CAREFIRST_MAIL;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
  }
  
return email;*/
 /* import sailpoint.object.*;

String firstname =  identity.getFirstname();
 
String lastname =  identity.getLastname();
String email = firstname+"."+lastname+STR_CAREFIRST_MAIL;

return email;*/</Source>
  </Rule>
  <Rule created="1606131326067" id="0a111e5875e014d08175f4e31c734024" language="beanshell" modified="1615240089285" name="BulkImport-DiscAppITROle-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entitlementName = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
        role.setName(strCiamITRoleName);
        role.setDisplayName(strCiamITRoleName);
        role.setType("it");
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
        role.setAttribute("ciamITRoleId", strCiamITRoleID);
        // unused attributes
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
       // if (null =! appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          if(appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
            Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");
            Filter maFilter= Filter.and(Filter.eq("value",entitlementName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entitlementName);
              ma.setValue(entitlementName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();

            } // 
          //  appObj = ciamAppObj;
            //  return;		
          }

        //}
      }
//if(appName.equalsIgnoreCase("Active Directory")|| appName.equalsIgnoreCase("BizAppAD")||appName.equalsIgnoreCase("ISAM LDAP")||appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
      
      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


   
      // Build the filterString for entitlements matching this IT role.
      List entitlements = new ArrayList();
      entitlements.add(entitlementName);
      String comma = "";
      String filterString = attrName + ".containsAll({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();
        int size = profiles.size();
         System.out.println("Inside create IT Role Method profiles size is "+size);
		int count = 0;
   boolean isCreateProfile =  false;
        for (Profile prof : profiles) {
         
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();
 							count = count + 1;
            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              System.out.println("Inside iff Application name is same");
              List existingEntList = new ArrayList();
              List constraints = prof.getConstraints();
            
              // System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              for (Filter filterNew : constraints) {
                if(filterNew instanceof Filter.LeafFilter){
                  System.out.println("Inside create IT Role Method 444444444444444444");

                  //	filter.getExpression();
                  Object objValue = ((Filter.LeafFilter) filterNew).getValue();
                  if(objValue instanceof String){
                    existingEntList.add((String)objValue);
                  }
                  if(objValue instanceof List){
                    existingEntList.addAll((Collection) objValue);
                  }
                  if(null !=existingEntList &amp;&amp; existingEntList.size() > 0){ 
                    System.out.println("Inside create IT Role Method 555555555555555555555 Existing Ent lIst "+existingEntList);
                    System.out.println("Inside create IT Role Method New ENtilement "+entitlementName);

                    for(String oldEnt : existingEntList){
                      if(oldEnt.trim().equalsIgnoreCase(entitlementName.trim())){
                        System.out.println("Inside create IT Role Method Existing Entitlement and new Entitlement is same so returing ");
                        return;
                      }
                    }
                  }
                  System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
                }

              }
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            } 
            else{
              if(size == count &amp;&amp; !profileObj.getName().equalsIgnoreCase(appObj.getName())){
					   System.out.println("Inside if count and profile size are same creatting new profile ===");
					 
              isCreateProfile = true;
              break;
				  }
            }

          } // prfile null check closing 

        } // 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        if(isCreateProfile){
        Profile profilee = new Profile();
        //profilee.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profilee.setApplication(appObj);
        profilee.addConstraint(filter);
       // profilee.setConstraints(filterList);
        role.add(profilee);
        System.out.println("Inside create IT Role Method Added entitlement to same profile");
        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 8888888888888888");
        Profile profile = new Profile();
        //profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
       profile.addConstraint(filter);
        //profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 999999999999999999999");

      }
//}
      // System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"Missing-IT-Roles");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-IT-Roles");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_DAC-IT-Roles.csv";
 //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SPManagedMissingITRoles.csv";
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_DAC-IT-Roles.csv";
//  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_MAC-IT-Roles.csv";
  
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAMRoleSync_ITRoles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//missingITRoles_retry.csv";
  
  
  
  
  
  
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles-SameTarget.csv";
  
   //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//DiscITRoles-IT-Roles_Demo.csv";
  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//SemiAuto-IT-Roles_Update_Missing.csv";

  // String csvFileName ="//home//iqadmin//Data//NNTestITRoles.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
   // return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1606131379056" id="0a111e5875e014d08175f4e3eb704025" language="beanshell" modified="1614951656311" name="BulkBusinessRoles-RuleRajModified" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
import java.util.List;
import java.util.HashMap;
import sailpoint.tools.Util;
import sailpoint.object.Attributes;

import java.util.Map;
import sailpoint.object.Application;
import sailpoint.object.Bundle;
import sailpoint.object.Custom;
import sailpoint.object.Classification;
import sailpoint.object.ObjectClassification;
import sailpoint.object.Identity;
import sailpoint.object.IdentitySelector;
import sailpoint.object.IdentitySelector.MatchExpression;
import sailpoint.object.IdentitySelector.MatchTerm;
import sailpoint.object.IdentitySelector.MatchTerm.Type;
import sailpoint.object.Link;
import sailpoint.object.Profile;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.Schema;
import sailpoint.tools.RFC4180LineIterator;
import sailpoint.tools.RFC4180LineParser;


//Getting the attribute values from assignement rule
    public void updateAttribute(Bundle role,String columnName,String attribute){
    System.out.println(" *** inside update Attribute");
    ////System.out.println(" role "+role);
    //System.out.println(" *** columnName "+columnName);
    //System.out.println(" *** attribute "+attribute);
    
    if(role.getAttribute(columnName)!=null){
     // System.out.println(" *** inside if lop "+role.getAttribute(columnName));
String attributeValue=role.getAttribute(columnName);
ArrayList attributeValueList = new ArrayList(Arrays.asList(attributeValue.split(",")));
     // System.out.println(" *** list "+attributeValueList);
if(attributeValueList!= null &amp;&amp; attributeValueList.size()>0){
if(!(attributeValueList.contains(attribute))){
// System.out.println(" *** inside inner if loop "+attributeValue);
attributeValue = attributeValue+","+attribute;
  role.setAttribute(columnName,attributeValue);
}

}
}
else{
 // System.out.println(" *** inside else loop "+attribute);
role.setAttribute(columnName, attribute);
}
    
  }
public List getMatchTerms(Bundle bundle){
List valuesList = new ArrayList();
if(null != bundle){
if( null != bundle.getSelector()){
IdentitySelector selector = bundle.getSelector();
MatchExpression matchExpression = selector.getMatchExpression();

List terms = matchExpression.getTerms();
return terms;

}

}
}
// Routine that takes a key/value hash of role data and builds it into roles
// in IdentityIQ.
public void buildRole (HashMap roleHash) {
System.out.println(" key Values Map "+roleHash);

String strBZAssignType = (String) roleHash.get("BZ_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("BZ_ASSIGNMENT_TYPE") : "";
String strSRAssignType = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
String strCatagory = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
String strCiamAppID = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
String strCiamAppName = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
String strCiamRoleID = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
String strCiamBusinessRoleName = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

// String strCiamBusinessITRoleName = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
String strCartRoleID = (String) roleHash.get("CART Role ID") != null ? (String) roleHash.get("CART Role ID") : "";

String strCartAppID = (String) roleHash.get("CART Applciation ID") != null ? (String) roleHash.get("CART Applciation ID") : "";
String strCartAppName = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name") : "";
String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ? (String) roleHash.get("Role Provision Type") : "";
String strManualProvisionType = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team") : "";
String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)") : "";
String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ? (String) roleHash.get("Role Sensitivity"): "";
String strAction = (String) roleHash.get("Action") != null ? (String) roleHash.get("Action"): "";
// String strAssignment = (String) roleHash.get("Assignment") != null ? (String) roleHash.get("Assignment"): "";
String strAssignment = (String) roleHash.get("Assignment Type") != null ? (String) roleHash.get("Assignment Type"): "";
String strRoleName = (String) roleHash.get("Business Role Name") != null ? (String) roleHash.get("Business Role Name"): "";
String strRoleOwner = (String) roleHash.get("Business Role Owner") != null ? (String) roleHash.get("Business Role Owner"): "";
String strRoleDesc = (String) roleHash.get("Role Description") != null ? (String) roleHash.get("Role Description") : "";
String subRoles = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name"): "";
String checkAssignment = (String) roleHash.get("Check Assignment") != null ? (String) roleHash.get("Check Assignment"): "";
String strBussinessUnit = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
String strDeptCode = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
String strJobCode = (String) roleHash.get("JOB_CD (Job Code)") != null ? (String) roleHash.get("JOB_CD (Job Code)") : "";
String strEeoCode = (String) roleHash.get("EEO_CD (EEO Code)") != null ? (String) roleHash.get("EEO_CD (EEO Code)") : "";
String strCompanyCode = (String) roleHash.get("CO_CD (Company Code)") != null ? (String) roleHash.get("CO_CD (Company Code)") : "";
String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ? (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
String strCostCenter = (String) roleHash.get("COST_CENTER (Cost Center)") != null ? (String) roleHash.get("COST_CENTER (Cost Center)") : "";
String strMgrPositionNumber = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ? (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
String strPositionNumber = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
String strLocationCode = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ? (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
String strSupplierName = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ? (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
String strNofApprovals = (String) roleHash.get("Number of Approvals") != null ? (String) roleHash.get("Number of Approvals") : "";
String strApproval1 = (String) roleHash.get("Approval 1") != null ? (String) roleHash.get("Approval 1") : "";
String strApproval2 = (String) roleHash.get("Approval 2") != null ? (String) roleHash.get("Approval 2") : "";
String strApproval3 = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3") : "";
String strApproval4 = (String) roleHash.get("Approval 4") != null ? (String) roleHash.get("Approval 4") : "";
String strApproval5 = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
String strApproval6 = (String) roleHash.get("Approval 6") != null ? (String) roleHash.get("Approval 6"): "";
String strApproval7 = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
String strApproval8 = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
String strApproval9 = (String) roleHash.get("Approval 9") != null ? (String) roleHash.get("Approval 9"): "";
String classificationName = "BirthRight";

//String classificationName = (String) roleHash.get("Classification");
// boolean isRequestable = (Boolean) roleHash.get("Requestable Role");
//String assignRule = (String) roleHash.get("AssignmentRule");
//String costCentre = (String) roleHash.get("costcenter");
//String jobCode = (String) roleHash.get("jobcode");


System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);

try{
Bundle role = context.getObject(Bundle.class, strCiamBusinessRoleName);
if (null == role) {
//System.out.println(" - role does not exist, creating new: " + roleName);
role = new sailpoint.object.Bundle();
}
if(Util.isNotNullOrEmpty(strCiamBusinessRoleName)) {
role.setName(strCiamBusinessRoleName);
role.setDisplayName(strCiamBusinessRoleName);

role.setAttribute("category", strCatagory);
          updateAttribute(role,"ciamApplicationID", strCiamAppID);
        updateAttribute(role,"ciamApplicationName", strCiamAppName);

role.setAttribute("ciamBusinessRoleId", strCiamRoleID);// ciam role ID
role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
//role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
role.setAttribute("cartRoleId", strCartRoleID);
        updateAttribute(role,"cartApplicationId", strCartAppID);
        updateAttribute(role,"cartApplicationName", strCartAppName);
role.setAttribute("roleProvisionType", strRoleProvisionType);
role.setAttribute("manualProvisionTeam", strManualProvisionType);
role.setAttribute("roleSensitivity", strRoleSensitivity);
role.setAttribute("action", strAction);


updateAttribute(role,"userType", strUserType);
role.setAttribute("noofapprovals", strNofApprovals);
role.setAttribute("approval1", strApproval1);
role.setAttribute("approval2", strApproval2);
role.setAttribute("approval3", strApproval3);
role.setAttribute("approval4", strApproval4);
role.setAttribute("approval5", strApproval5);
role.setAttribute("approval6", strApproval6);
role.setAttribute("approval7", strApproval7);
role.setAttribute("approval8", strApproval8);
role.setAttribute("approval9", strApproval9);
}
if(Util.isNotNullOrEmpty(strRoleDesc)) {
Map descMap = new HashMap();
descMap.put("en_US", strRoleDesc);
role.setDescriptions(descMap);
}

 

Identity ownerId = context.getObject(Identity.class, strRoleOwner);
if (null == ownerId) {
System.out.println(" - WARNING: Could not find owner [" + strRoleOwner + "] using 'spadmin' instead.");
ownerId = context.getObject(Identity.class, "spadmin");
}
role.setOwner(ownerId);

System.out.println("role: " + role.toXml());
if(Util.isNotNullOrEmpty(strBZAssignType)&amp;&amp;Util.isNotNullOrEmpty(strSRAssignType)&amp;&amp; strBZAssignType.equalsIgnoreCase("Mandatory") &amp;&amp; strSRAssignType.equalsIgnoreCase("Mandatory") ){
// Setting the classification to the Role
  
  role.setType("birthRightBusiness");
  role.setAttribute("assignment", "Mandatory");
  
if(Util.isNotNullOrEmpty(classificationName)) {
List classificList = new ArrayList();

ObjectClassification objClassific = new ObjectClassification();
objClassific.setOwnerType("Bundle");
objClassific.setSource("UI");
Classification classification = context.getObjectByName(Classification.class, classificationName);
if(classification != null) {

objClassific.setClassification(classification);
classificList.add(objClassific);
role.setClassifications(classificList);
}
else
{
classification = new Classification();
classification.setName(classificationName);
classification.setDisplayName(classificationName);
classification.setOrigin("MyIndependentDataSource");
Map descMap = new HashMap();
descMap.put("en_US", "Allow Access specified Role");
classification.setDescriptions(descMap);
context.saveObject(classification);
context.commitTransaction();
objClassific.setClassification(classification);
classificList.add(objClassific);
role.setClassifications(classificList);

}

 

}
System.out.println(" Check Assignment is === "+checkAssignment);
if(! "0".equalsIgnoreCase(checkAssignment)){
System.out.println(" Check Assignment is not Zero if condition=== ");
// Creating the Assignement Rule with below attributes
IdentitySelector idSelector = new IdentitySelector();
MatchExpression matExp = new MatchExpression();
MatchTerm andMatchTerm = new MatchTerm();
andMatchTerm.setAnd(true);
andMatchTerm.setContainer(true);
MatchTerm matchTerm = null;
String strAssignmentCondition = "";
String strRoleAssignemntCondition = "";
// matExp.setAnd(true);
if(Util.isNotNullOrEmpty(strJobCode) ) {
matchTerm = new MatchTerm();
matchTerm.setName("jobcode");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strJobCode);
andMatchTerm.addChild(matchTerm);
System.out.println(" jobcode "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strJobCode+",";

}
if(Util.isNotNullOrEmpty(strBussinessUnit)) {
matchTerm = new MatchTerm();
matchTerm.setName("businessunit");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strBussinessUnit);
andMatchTerm.addChild(matchTerm);
System.out.println(" businessunit "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strBussinessUnit +",";
}
if(Util.isNotNullOrEmpty(strDeptCode)) {
matchTerm = new MatchTerm();
matchTerm.setName("deptid");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strDeptCode);
andMatchTerm.addChild(matchTerm);
System.out.println(" deptid "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strDeptCode +",";
}
if(Util.isNotNullOrEmpty(strEeoCode)) {

matchTerm = new MatchTerm();
matchTerm.setName("eeojobgroup");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strEeoCode);
andMatchTerm.addChild(matchTerm);
System.out.println(" eeojobgroup "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strEeoCode +",";
}
if(Util.isNotNullOrEmpty(strCompanyCode)) {


matchTerm = new MatchTerm();
matchTerm.setName("company");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strCompanyCode);
andMatchTerm.addChild(matchTerm);
System.out.println(" company "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strCompanyCode +",";
}
if(Util.isNotNullOrEmpty(strMgrCostCenter)) {
matchTerm = new MatchTerm();
matchTerm.setName("mgrCostcenter"); // which attribute we have to take here
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strMgrCostCenter);
andMatchTerm.addChild(matchTerm);
System.out.println(" mgrCostcenter "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strMgrCostCenter +",";
}
if(Util.isNotNullOrEmpty(strCostCenter)) {


matchTerm = new MatchTerm();
matchTerm.setName("costcenter"); // need to create the iddentity attribute
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strCostCenter);

andMatchTerm.addChild(matchTerm);
System.out.println(" costcenter "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strCostCenter +",";

}
if(Util.isNotNullOrEmpty(strMgrPositionNumber)) {

matchTerm = new MatchTerm();
matchTerm.setName("managerposnum"); // need to create the iddentity attribute
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strMgrPositionNumber);
andMatchTerm.addChild(matchTerm);
System.out.println(" managerposnum "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strMgrPositionNumber +",";
}

if(Util.isNotNullOrEmpty(strPositionNumber)) {
matchTerm = new MatchTerm();
matchTerm.setName("positionNumber"); // need to create the iddentity attribute
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strPositionNumber);
andMatchTerm.addChild(matchTerm);
System.out.println(" positionNumber "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strPositionNumber +",";
}
if(Util.isNotNullOrEmpty(strLocationCode)) {
matchTerm = new MatchTerm();
matchTerm.setName("location");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strLocationCode);
andMatchTerm.addChild(matchTerm);
System.out.println(" location "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strLocationCode +",";
}
if(Util.isNotNullOrEmpty(strSupplierName)) {
matchTerm = new MatchTerm();
matchTerm.setName("supplierName"); // need to create the identity attribute for suppliier name
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strSupplierName);
andMatchTerm.addChild(matchTerm);
System.out.println(" supplierName "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strSupplierName +",";

}
if(Util.isNotNullOrEmpty(strUserType)) {
matchTerm = new MatchTerm();
matchTerm.setName("employeetype"); // need to create the identity attribute for suppliier name
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strUserType);
andMatchTerm.addChild(matchTerm);
System.out.println(" employeetype "+andMatchTerm.toXml());
strRoleAssignemntCondition = role.getAttribute("assignment_condition") != null ? role.getAttribute("assignment_condition") : "";
strAssignmentCondition = strRoleAssignemntCondition + strAssignmentCondition + strSupplierName +",";

}

strAssignmentCondition = strAssignmentCondition.substring(0, strAssignmentCondition.length()-1) +"|";
System.out.println(" strAssignmentCondition === "+strAssignmentCondition);
//role.setAttribute("assignment_condition", strAssignmentCondition);
System.out.println(" Assignment Match Term === "+andMatchTerm.toXml());
boolean isExistingChildTerm = false;
if( null != role.getSelector()){ // checking for exsting match Terms
System.out.println("Inside if Role has Match Terms== ");
IdentitySelector selector = role.getSelector();
if(null != selector.getMatchExpression()){
MatchExpression matchExpression = selector.getMatchExpression();

if(matchExpression.getTerms() != null){

List existingTerms = matchExpression.getTerms();
if(null != existingTerms &amp;&amp; existingTerms.size() > 0 ){
System.out.println("Inside if Check Assignment is Empty ");
boolean isDuplicateMatchList = false;
for (MatchTerm extTerm : existingTerms) {
//System.out.println(" *****extTerm "+extTerm.toXml());
//System.out.println(" *****andMatchTerm "+andMatchTerm.toXml());
if(extTerm.toXml().equals(andMatchTerm.toXml())){
isDuplicateMatchList =true;
}
System.out.println("compare "+extTerm.toXml().equals(andMatchTerm.toXml()));
//System.out.println(" *****extTerm "+extTerm);

matExp.addTerm(extTerm);
}
System.out.println(" *****isDuplicateMatchList "+isDuplicateMatchList);
if(!isDuplicateMatchList){
//System.out.println(" *****if "+andMatchTerm.toXml());
matExp.addTerm(andMatchTerm);
}

}

/*if(null != existingTerms &amp;&amp; existingTerms.size() > 0 &amp;&amp; Util.isNotNullOrEmpty(checkAssignment) &amp;&amp; "1".equalsIgnoreCase(checkAssignment) ){
System.out.println("Inside if Check Assignment is 1111111 ");
for (MatchTerm extTerm : existingTerms) {
System.out.println(" *****extTerm "+extTerm.toXml());
System.out.println(" *****andMatchTerm "+andMatchTerm.toXml());

System.out.println("compare "+extTerm.toXml().equals(andMatchTerm.toXml()));
List childrenTerms = extTerm.getChildren();
System.out.println("Inside if Check Assignment is 1111111 childrenTerms "+childrenTerms);
MatchTerm newChildTerm = andMatchTerm.getChildren().get(0);
for (MatchTerm childTerm : childrenTerms) {

System.out.println("Before comparing the match terms objects child term "+childTerm.toXml());
System.out.println("Before comparing the match terms objects newChildTerm "+newChildTerm.toXml());
if(!childTerm.getValue().equalsIgnoreCase(newChildTerm.getValue())){
System.out.println("Inside if Adding new Match Term 22222222222 ");
if(null != existingTerms &amp;&amp; existingTerms.size() > 0){
System.out.println("Inside Adding the existing terms to matchexpression ");
for (MatchTerm extTerm : existingTerms) {
matExp.addTerm(extTerm);
}
}
matExp.addTerm(andMatchTerm);
// childrenTerms.add(newChildTerm);
// matExp.setTerms(childrenTerms);
isExistingChildTerm = true;
System.out.println("Inside if Adding new Match Term 33333333 isExistingChildTerm "+isExistingChildTerm);
break;

} // child term compare closing

 

} //child iterator closing
if(isExistingChildTerm){
System.out.println("Inside if existing from Second for loop ");
break;
}


} // existing term iterator closing
System.out.println("After existing from Second for loop ");

}*/ // checking assignment 1 closing

}
}

}
else{
matExp.addTerm(andMatchTerm);
}
System.out.println("Inside if Adding new Match Term 44444 Outside loop isExistingChildTerm "+isExistingChildTerm);

/*if(!isExistingChildTerm){
matExp.addTerm(andMatchTerm);
}*/
/* MatchTerm userTypeMatchTerm = new MatchTerm();
matchTerm = new MatchTerm();
matchTerm.setName("employeetype");
matchTerm.setType(Type.IdentityAttribute);
matchTerm.setValue(strUserType);
userTypeMatchTerm.addChild(matchTerm);
matExp.addTerm(userTypeMatchTerm); */
idSelector.setMatchExpression(matExp);
role.setSelector(idSelector);
}
}
  //else for DAC MAC roles
  else{
    role.setType("business");
    //role.setAttribute("assignment_condition", "employeetype:ASSOCIATE||employeetype:CONTRACTOR");
    role.setAttribute("assignment", "Discretionary");
    
    String sensitiveClassificationName = "Sensitive";
    
    System.out.println(" *** inside DAC MAC else loop");
    if(Util.isNotNullOrEmpty(strRoleSensitivity)&amp;&amp; (!"0".equals(strRoleSensitivity)) ) {
List classificList = new ArrayList();
 System.out.println(" *** inside sensitive  loop "+strRoleSensitivity);
ObjectClassification objClassific = new ObjectClassification();
objClassific.setOwnerType("Bundle");
objClassific.setSource("UI");
Classification classification = context.getObjectByName(Classification.class, sensitiveClassificationName);
if(classification != null) {

objClassific.setClassification(classification);
classificList.add(objClassific);
role.setClassifications(classificList);
}
else
{
classification = new Classification();
classification.setName(sensitiveClassificationName);
classification.setDisplayName(sensitiveClassificationName);
classification.setOrigin("MyIndependentDataSource");
Map descMap = new HashMap();
descMap.put("en_US", "This access contains sensitive information");
classification.setDescriptions(descMap);
context.saveObject(classification);
context.commitTransaction();
objClassific.setClassification(classification);
classificList.add(objClassific);
role.setClassifications(classificList);

}

 

}
    
  }
// Convert the sub-roles list into a java.util.List object.
/* RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
List subRolesList = subRolePaser.parseLine(subRoles);

System.out.println("subRolesList: " + subRolesList);
// Add the required IT roles for this business role.
if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
for (String subRoleName : subRolesList) { */
Bundle requiredRole = context.getObjectByName(Bundle.class, subRoles);
if (null != requiredRole) {

if(role.getRequirements() != null &amp;&amp;!role.getRequirements().isEmpty() ){
List requirements = role.getRequirements();
for (Bundle bundle2 : requirements) {
String name = bundle2.getName();
if(!name.equalsIgnoreCase(requiredRole.getName())){

role.addRequirement(requiredRole);
break;
}

}

}
else
{
role.addRequirement(requiredRole);
}


} else
{
System.out.println(" - ERROR: Required role not found: " + subRoles);
}

// }
// }
context.saveObject(role);
context.commitTransaction();

return;
} catch(Exception e){
System.out.println("Inside Catch Block Exception is "+e);
// Map map = new HashMap();
// Attributes attrs = new Attributes();
Custom customObj = context.getObjectByName(Custom.class,"Business-MissingRole");
if(customObj == null){
customObj = new Custom();
customObj.setName("Business-MissingRole");
customObj.put(strCiamRoleID, strCiamBusinessRoleName);

}
else{
customObj.put(strCiamRoleID, strCiamBusinessRoleName);
}

 

// attrs.setMap(map);
// customObj.setAttributes(attrs);

context.saveObject(customObj);
context.commitTransaction();

return;
}
}

// What delimiter do we want to use in the CSV file.
String dlm = ",";

//String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
//String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";

//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//DACMAC_DummyITEntries.csv";
    //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Business_MAC_MAC_Birthright_Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Business_DAC_MAC_Roles_updated.csv";
  
   String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//RoleSensitivity_Approval_mismatch_businessRoles.csv";
  
  
 //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//BusinessRoleMissingITRoleMapping_retry.csv";
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SingleBusinessRoleTest.csv";



//return csvFileName;

File testFile = new File(csvFileName);
if ((!testFile.exists()) || (testFile.isDirectory())) {
System.out.println("Unable to find file: " + csvFileName);
return;
}

System.out.println("Importing Roles from: '" + csvFileName + "' ...");
//return csvFileName;
// Open the CSV file for reading.
BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

RFC4180LineParser parser = new RFC4180LineParser(dlm);
System.out.println(" After RFC418 ");
int lineCounter = 0;
ArrayList headerStrings = new ArrayList();
String thisLine = null;
System.out.println(" Before while ");
while (null != (thisLine = fileIn.readLine())) {
System.out.println("Inside while ");

List tokens = parser.parseLine(thisLine);
System.out.println(" tokens: " + tokens);

if (lineCounter == 0) {
System.out.println(" Inside IF condition: ");
// Header Line.
// Assign indexes to each position.
for (int i=0; i &lt; tokens.size(); i++) {
headerStrings.add(tokens.get(i).trim());
}
} else {
// Data Line. Read the data elements out.
HashMap lineHash = new HashMap();
System.out.println(" Inside else condition: ");
for (int i=0; i &lt; tokens.size(); i++) {
String headerString = headerStrings.get(i);
String valueString = tokens.get(i);
if (null != valueString) { valueString = valueString.trim(); }
System.out.println ("header " + headerString + " == " + valueString);
lineHash.put(headerString, valueString);
}
System.out.println(" Before calling buildRole: " );
//return lineHash;
buildRole(lineHash);
System.out.println(" After calling buildRole: " );

}

lineCounter++;

// Don't let objects accrue in memory, flush them out every so often.
if ((lineCounter % 20) == 0) { context.decache(); }

}

fileIn.close();

System.out.println("Role import Complete.");

return "Success";
  </Source>
  </Rule>
  <Rule created="1606224816230" id="0a111e5875e014d08175fa75a8666b23" language="beanshell" name="CF-MapAssignedRole-Rule" type="Correlation">
    <Description>
    Import template-defined Workgroups from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  
  import java.io.File;
  import java.util.List;
  import java.util.ArrayList;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import java.io.IOException;
  import java.io.FileNotFoundException;
	import java.io.PrintWriter;
  
  List missingUsers = new ArrayList();
  
				public void mapAssignedRole (HashMap workgroupHash){
							
							System.out.println("Key Values Map "+workgroupHash);
							String identity  = (String) workgroupHash.get("Native_identity");
							String roleName  = (String) workgroupHash.get("Role_name");
          		List objects = new ArrayList();
  
      				Filter useridFilter = Filter.eq("userid",identity);

      				if(useridFilter != null){

       				System.out.println("Filter is not null");

        			QueryOptions options = new QueryOptions().addFilter(useridFilter);

        			if (options != null){
          			objects = context.getObjects(Identity.class, options);
          			System.out.println("objects"+objects);
          			if(objects.isEmpty()){
            					objects=null;
          				}
       	 			}
      			}
          
  					//List identityList = new ArrayList();
          if(objects!=null)
          {
						for(Identity currentUser:objects)
  					{
              
	  					//Identity currentUser = context.getObjectByName(Identity.class,identity);
							ProvisioningPlan plan = new ProvisioningPlan();

                              plan.setIdentity(currentUser);
                              AccountRequest request = new AccountRequest();
                              request.setApplication("IIQ");
                              request.setNativeIdentity(currentUser.getName());
                              request.setOp(ProvisioningPlan.ObjectOperation.Modify);
                              request.setType("role");
                              AttributeRequest attr = new AttributeRequest();
                              attr.setName("assignedRoles");
                              attr.setOp(Operation.Add);
                              attr.setValue(roleName);
                              List attrs = new ArrayList();
                              attrs.add(attr);
                              request.setAttributeRequests(attrs);
                              List requests = new ArrayList();
                              requests.add(request);
                              plan.setAccountRequests(requests);

                            	Provisioner provisioner = new Provisioner(context);
															ProvisioningProject project = provisioner.compile(plan);
															provisioner.execute(project);
    
  					}
							
					}
          else{
            
            missingUsers.add(identity+","+roleName);
            
          }
      }
  
  public void writeToLog (List usersList){
			
  PrintWriter pw = null;
            try {
                  pw = new PrintWriter(new File("//home//iqadmin//Data//userRoleLog.csv"));
                } catch (FileNotFoundException e) {
                     e.printStackTrace();
                }
            StringBuilder builder = new StringBuilder();
    
    for(String user:usersList){
      
            builder.append(user);
            builder.append('\n');
            pw.write(builder.toString());
            
    }
    pw.close();
  }
					
					// What delimiter do we want to use in the CSV file.
  String dlm = ",";
  
  String csvFileName ="//home//iqadmin//Data//userRoleMapping.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  
  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Workgroups from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling mapAssignedRole: " );
      mapAssignedRole (lineHash);
      System.out.println(" After calling mapAssignedRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    //if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();
  
  writeToLog(missingUsers);

  return missingUsers;
  </Source>
  </Rule>
  <Rule created="1606731641059" id="0a111e5876131151817618ab30e31373" language="beanshell" modified="1608804650329" name="CF-ADSkypeRegistrarPool-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
 /* if(identity.getAttribute("company").equalsIgnoreCase("SBP")){
    return;
  }
  else{
return STR_SKYPE_REGISTRARPOOL;
  }*/
  return STR_SKYPE_REGISTRARPOOL;
  </Source>
  </Rule>
  <Rule created="1606810948182" id="0a111e58761a170f81761d655256048c" language="beanshell" modified="1616709539766" name="CF-BulkRoleExtendedAttributeUpdate-Rule" type="Correlation">
    <Description>
Import template-defined Roles from a CSV file.
</Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
The log object associated with the SailPointContext.
</Description>
        </Argument>
        <Argument name="context">
          <Description>
A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
</Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
// Sample Tool to import Roles.
import java.io.File;
import java.util.List;
import java.util.HashMap;
import sailpoint.tools.Util;
import sailpoint.object.Attributes;
  import sailpoint.api.Describer;

import java.util.Map;
import sailpoint.object.Application;
import sailpoint.object.Bundle;
import sailpoint.object.Custom;
import sailpoint.object.Classification;
import sailpoint.object.ObjectClassification;
import sailpoint.object.Identity;
import sailpoint.object.IdentitySelector;
import sailpoint.object.IdentitySelector.MatchExpression;
import sailpoint.object.IdentitySelector.MatchTerm;
import sailpoint.object.IdentitySelector.MatchTerm.Type;
import sailpoint.object.Link;
import sailpoint.object.Profile;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.Schema;
import sailpoint.tools.RFC4180LineIterator;
import sailpoint.tools.RFC4180LineParser;


// Routine that takes a key/value hash of role data and builds it into roles
// in IdentityIQ.
public void updateRoleExtendedAttribute (HashMap roleHash,String columnName) {
System.out.println(" key Values Map "+roleHash);

String attribute = (String) roleHash.get(columnName) != null ? (String) roleHash.get(columnName) : "";
String strRoleName = (String) roleHash.get("RoleName") != null ? (String) roleHash.get("RoleName") : "";

System.out.println("Role Name: '" + strRoleName);

try{
Bundle role = context.getObject(Bundle.class, strRoleName);
if (null == role) {
System.out.println(" - role does not exist");
  
  Custom customObj = context.getObjectByName(Custom.class,"Missing-DISC-Roles");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-DISC-Roles");
        customObj.put(strRoleName, strRoleName);

      }
      else{
        customObj.put(strRoleName, strRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();

}
else {
  role.setType("birthRightIT");

  /*if(role.getAttribute(columnName)!=null){
String attributeValue=role.getAttribute(columnName);
ArrayList attributeValueList = new ArrayList(Arrays.asList(attributeValue.split(",")));
if(attributeValueList!= null &amp;&amp; attributeValueList.size()>0){
if(!(attributeValueList.contains(attribute))){
attributeValue = attributeValue+","+attribute;
}
role.setAttribute(columnName,attributeValue);
}
}
else{
role.setAttribute(columnName, attribute);
}*/
  
  //role.setAttribute(columnName, attribute);
  
  //role.setDisplayName(attribute);
//role.setAttribute("ciamApplicationName",role.getAttribute("cartApplicationName"));
}

/*if(Util.isNotNullOrEmpty(attribute)) {
Map descMap = new HashMap();
descMap.put("en_US", attribute);
role.setDescriptions(descMap);
}*/

context.saveObject(role);
  
   Describer describer = new Describer(role);  

   describer.saveLocalizedAttributes(context);
  
context.commitTransaction();

return;
} catch(Exception e){
System.out.println("Inside Catch Block Exception is "+e);
}
}

// What delimiter do we want to use in the CSV file.
String dlm = ",";

//String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
//String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CareFirst_Role_Ciam.csv";
  
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//Disconnected_Namechange.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//RoleDescriptionUpdated_0313.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//DisplayName_Change0313.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//ApprovalflowUpdate.csv";

//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//ApprovalflowUpdate_Business.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//Role Applicaiton Name Changes_business.csv";
  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//Test.csv";

//return csvFileName;

File testFile = new File(csvFileName);
if ((!testFile.exists()) || (testFile.isDirectory())) {
System.out.println("Unable to find file: " + csvFileName);
return;
}

System.out.println("Importing Roles from: '" + csvFileName + "' ...");
//return csvFileName;
// Open the CSV file for reading.
BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

RFC4180LineParser parser = new RFC4180LineParser(dlm);
System.out.println(" After RFC418 ");
int lineCounter = 0;
ArrayList headerStrings = new ArrayList();
String thisLine = null;
System.out.println(" Before while ");
while (null != (thisLine = fileIn.readLine())) {
System.out.println("Inside while ");

List tokens = parser.parseLine(thisLine);
System.out.println(" tokens: " + tokens);

if (lineCounter == 0) {
System.out.println(" Inside IF condition: ");
// Header Line.
// Assign indexes to each position.
for (int i=0; i &lt; tokens.size(); i++) {
headerStrings.add(tokens.get(i).trim());
}
} else {
// Data Line. Read the data elements out.
HashMap lineHash = new HashMap();
System.out.println(" Inside else condition: ");
for (int i=0; i &lt; tokens.size(); i++) {
String headerString = headerStrings.get(i);
String valueString = tokens.get(i);
if (null != valueString) { valueString = valueString.trim(); }
System.out.println ("header " + headerString + " == " + valueString);
lineHash.put(headerString, valueString);
}
System.out.println(" Before calling buildRole: " );
 //return lineHash;
//updateRoleExtendedAttribute(lineHash,"ciamBusinessRoleName");
//updateRoleExtendedAttribute(lineHash,"ciamBusinessRoleId");

  //updateRoleExtendedAttribute(lineHash,"Desc");
  
  //updateRoleExtendedAttribute(lineHash,"assignment_condition");
 updateRoleExtendedAttribute(lineHash,"ciamApplicationName");
  //updateRoleExtendedAttribute(lineHash,"approval1");
  //updateRoleExtendedAttribute(lineHash,"approval2");
  //updateRoleExtendedAttribute(lineHash,"approval3");
  //updateRoleExtendedAttribute(lineHash,"approval4");
  //updateRoleExtendedAttribute(lineHash,"approval5");
  //updateRoleExtendedAttribute(lineHash,"approval6");
  //updateRoleExtendedAttribute(lineHash,"approval7");
  //updateRoleExtendedAttribute(lineHash,"approval8");
  //updateRoleExtendedAttribute(lineHash,"approval9");
  //updateRoleExtendedAttribute(lineHash,"category");
  //updateRoleExtendedAttribute(lineHash,"roleSensitivity");
  //updateRoleExtendedAttribute(lineHash,"ciamApplicationID");

  
System.out.println(" After calling buildRole: " );

}

lineCounter++;

// Don't let objects accrue in memory, flush them out every so often.
if ((lineCounter % 20) == 0) { context.decache(); }

}

fileIn.close();

System.out.println("Role update Complete.");

return "Success";
</Source>
  </Rule>
  <Rule created="1606811070801" id="0a111e58761a170f81761d67315105bb" language="beanshell" modified="1615157304330" name="CF-BulkRoleDescriptionUpdate-Rule" type="Correlation">
    <Description>
Import template-defined Roles from a CSV file.
</Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
The log object associated with the SailPointContext.
</Description>
        </Argument>
        <Argument name="context">
          <Description>
A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
</Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
// Sample Tool to import Roles.
import java.io.File;
import java.util.List;
import java.util.HashMap;
import sailpoint.tools.Util;
import sailpoint.object.Attributes;

import java.util.Map;
import sailpoint.object.Application;
import sailpoint.object.Bundle;
import sailpoint.object.Custom;
import sailpoint.object.Classification;
import sailpoint.object.ObjectClassification;
import sailpoint.object.Identity;
import sailpoint.object.IdentitySelector;
import sailpoint.object.IdentitySelector.MatchExpression;
import sailpoint.object.IdentitySelector.MatchTerm;
import sailpoint.object.IdentitySelector.MatchTerm.Type;
import sailpoint.object.Link;
import sailpoint.object.Profile;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.Schema;
import sailpoint.tools.RFC4180LineIterator;
import sailpoint.tools.RFC4180LineParser;


// Routine that takes a key/value hash of role data and builds it into roles
// in IdentityIQ.
public void updateRoleDescription (HashMap roleHash) {
System.out.println(" key Values Map "+roleHash);

//String attribute = (String) roleHash.get(columnName) != null ? (String) roleHash.get(columnName) : "";
String strRoleName = (String) roleHash.get("RoleName") != null ? (String) roleHash.get("RoleName") : "";
  String strDesc = (String) roleHash.get("Desc") != null ? (String) roleHash.get("Desc") : "";

System.out.println("Role Name: '" + strRoleName);

try{
Bundle role = context.getObject(Bundle.class, strRoleName);
if (null == role) {
System.out.println(" - role does not exist");

}
else {
  String applicationNames;
System.out.println(" - des "+role.getDescriptions());
if(role.getDescriptions()!=null) {
Map descMap = role.getDescriptions();
String desc=descMap.get("en_US");
if(desc!=null ){   //@and !(desc.contains(strDesc))
if(role.getAttribute("ciamApplicationName")!=null){
  applicationNames = role.getAttribute("ciamApplicationName");
  
  desc = "Application is \""+applicationNames+"\", Role is \""+strRoleName+"\", description is \""+desc+"\"";
  String strRoleSensitivity=role.getAttribute("roleSensitivity");
  if(Util.isNotNullOrEmpty(strRoleSensitivity)&amp;&amp; (!"0".equals(strRoleSensitivity)) ) {
desc=desc+", with sensitivity of \""+strRoleSensitivity+"\".";
  }
     else{
       desc=desc+".";
     }
descMap.put("en_US", desc);
role.setDescriptions(descMap);
}
}
  
}
else{
  if(role.getAttribute("ciamApplicationName")!=null){
    applicationNames = role.getAttribute("ciamApplicationName");
    desc = "Application(s) is/are \""+applicationNames+"\", Role is \""+strRoleName+"\"";
  String strRoleSensitivity=role.getAttribute("roleSensitivity");
    
    if(Util.isNotNullOrEmpty(strDesc)&amp;&amp; (!"0".equals(strDesc))){
      desc = desc+", description is \""+strDesc+"\"";
    }
    
  if(Util.isNotNullOrEmpty(strRoleSensitivity)&amp;&amp; (!"0".equals(strRoleSensitivity)) ) {
desc=desc+", with sensitivity of \""+strRoleSensitivity+"\".";
  }
     else{
       desc=desc+".";
     }
Map descMap = new HashMap();
descMap.put("en_US",desc);
role.setDescriptions(descMap);
  }
}

}

/*if(Util.isNotNullOrEmpty(strRoleDesc)) {
Map descMap = new HashMap();
descMap.put("en_US", strRoleDesc);
role.setDescriptions(descMap);
}*/

context.saveObject(role);
context.commitTransaction();

return;
} catch(Exception e){
System.out.println("Inside Catch Block Exception is "+e);
}
}

// What delimiter do we want to use in the CSV file.
String dlm = ",";

//String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
//String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CareFirst_Role_Ciam.csv";
  
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//Description_missing_SIT.csv";
  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//Test.csv";


//return csvFileName;

File testFile = new File(csvFileName);
if ((!testFile.exists()) || (testFile.isDirectory())) {
System.out.println("Unable to find file: " + csvFileName);
return;
}

System.out.println("Importing Roles from: '" + csvFileName + "' ...");
//return csvFileName;
// Open the CSV file for reading.
BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

RFC4180LineParser parser = new RFC4180LineParser(dlm);
System.out.println(" After RFC418 ");
int lineCounter = 0;
ArrayList headerStrings = new ArrayList();
String thisLine = null;
System.out.println(" Before while ");
while (null != (thisLine = fileIn.readLine())) {
System.out.println("Inside while ");

List tokens = parser.parseLine(thisLine);
System.out.println(" tokens: " + tokens);

if (lineCounter == 0) {
System.out.println(" Inside IF condition: ");
// Header Line.
// Assign indexes to each position.
for (int i=0; i &lt; tokens.size(); i++) {
headerStrings.add(tokens.get(i).trim());
}
} else {
// Data Line. Read the data elements out.
HashMap lineHash = new HashMap();
System.out.println(" Inside else condition: ");
for (int i=0; i &lt; tokens.size(); i++) {
String headerString = headerStrings.get(i);
String valueString = tokens.get(i);
if (null != valueString) { valueString = valueString.trim(); }
System.out.println ("header " + headerString + " == " + valueString);
lineHash.put(headerString, valueString);
}
System.out.println(" Before calling buildRole: " );
 //return lineHash;
updateRoleDescription(lineHash);

System.out.println(" After calling buildRole: " );

}

lineCounter++;

// Don't let objects accrue in memory, flush them out every so often.
if ((lineCounter % 20) == 0) { context.decache(); }

}

fileIn.close();

System.out.println("Role update Complete.");

return "Success";
</Source>
  </Rule>
  <Rule created="1606884533342" id="0a111e58761d1a34817621c8245e210c" language="beanshell" modified="1612544622727" name="CF-PSAccountCustomization-Rule" type="ResourceObjectCustomization">
    <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.

Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ResourceObject"/>
    <Source>import java.text.*;
  import java.util.Date;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;

  Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  mylogger.info("Starting PS Customization Rule");
 
  String strAction = object.get(ATR_OBJ_ACTION);
  String strEffectiveDate = object.get(ATR_EFFECTIVE_DATE);
String strTermDate = object.get("TERMINATION_DT");  
  mylogger.info("strEffectiveDate 111111111111 "+strEffectiveDate);
  System.out.println("strEffectiveDate 111111111111 "+strEffectiveDate);
  Date effectiveDate =null;
  Date termDate =null;

  if(strEffectiveDate != null ){
    SimpleDateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
    effectiveDate = formatter.parse(strEffectiveDate);
	
	DateFormat originalFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
	DateFormat targetFormat = new SimpleDateFormat("dd-MMM-yy");
	Date hrDateFormat = originalFormat.parse(strEffectiveDate);
	String formattedDate = targetFormat.format(hrDateFormat);
  effectiveDate=new SimpleDateFormat("dd-MMM-yy").parse(formattedDate); 
  object.put("EFFDT",formattedDate);
  }
   if(strTermDate != null ){
    SimpleDateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
    termDate = formatter.parse(strTermDate);
	
	DateFormat originalFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
	DateFormat targetFormat = new SimpleDateFormat("dd-MMM-yy");
	Date hrDateFormat = originalFormat.parse(strTermDate);
	String formattedDate = targetFormat.format(hrDateFormat);
  termDate=new SimpleDateFormat("dd-MMM-yy").parse(formattedDate); 
  object.put("TERMINATION_DT",formattedDate);
  }
  Date todayDate = new Date();
  mylogger.info("todayDate is == "+todayDate+effectiveDate );

 if(effectiveDate != null &amp;&amp; todayDate != null &amp;&amp; Util.isNotNullOrEmpty(strAction)) {

    if(todayDate.compareTo(effectiveDate) &lt; 0 &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_ADD)) {
      object.put(ATR_OBJ_EMP_STATUS,ATR_PREHIRE);
    }
    else if(todayDate.compareTo(effectiveDate) &lt; 0 &amp;&amp; strAction.equalsIgnoreCase(STR_ACTION_HIR)) {
      object.put(ATR_OBJ_EMP_STATUS,ATR_PREHIRE);
    }
	
 }
  //Set UserType
  if(object.get(ATR_OBJ_PER_ORG)!=null){
    if(object.get(ATR_OBJ_PER_ORG).toString().equals(STR_EMP)){
      
          object.put(ATR_OBJ_PER_ORG,STR_EMPLOYEE);
      
    }else if(object.get(ATR_OBJ_PER_ORG).toString().equals(STR_CWR)){
       
           object.put(ATR_OBJ_PER_ORG,STR_CONTRACTOR);
    
    }
    else{
      System.out.println("Not a Carefirst Associate");
    }
    
  }
  return object;</Source>
  </Rule>
  <Rule created="1607370849020" id="0a111e58762f19bf81763ec4bafc50dc" language="beanshell" modified="1616821021246" name="CF-Initial-SAMLCorrelation-Rule" type="SAMLCorrelation">
    <Description>A rule used to map SAML name Id and attributes to an Identity.</Description>
    <Signature returnType="SailPointObject">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="assertionAttributes">
          <Description>
          A map where the key is a string and value is a string. The map will always contain
          a key NameId with the value being the name Id sent by the Identity Provider.  All other
          SAML assertion attributes will be included in the map.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="identity Or Link">
          <Description>
          The Identity or Link that has been authenticated via SAML SSO.
          Returning the Link is the preferred way as it provides the
          exact account back to the server side which can be helpful
          when collecting authentication for electronic signatures.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.Identity;
import sailpoint.object.*;

// Assumption in this example is that the nameid-format is unspecified/persistent so it is a string

// Get the nameId from the assertionAttributes
//String nameId = (String)assertionAttributes.get("nameId");
String nameId = (String)assertionAttributes.get("tagvalue_employeenumber");

System.out.println("value of assertionAttributes : "+assertionAttributes);
System.out.println("value of nameId : "+nameId);

Identity identity;


//QueryOptions qo = new QueryOptions();
//Filter f1 = Filter.ignoreCase(Filter.eq("name", nameId));
//Filter f2 = Filter.ignoreCase(Filter.eq("userid", nameId));
//Filter f = Filter.or(f1, f2);
//qo.addFilter(f);


if(nameId != null) {
    // Lookup the identity based on nameId
    identity = context.getObject(Identity.class, nameId);
    System.out.println("returned identity : "+identity.getName());
}

if (identity == null) {
      System.out.println("returned null identity : ");
}
return identity;</Source>
  </Rule>
  <Rule created="1607416126227" id="0a111e5876401f8f817641779b130401" language="beanshell" modified="1616140865448" name="CF-Update-Director" type="IdentityAttribute">
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import org.apache.log4j.Logger;
    
Logger log = Logger.getLogger("com.carefirst.UpdateDirectorRule");
  
  log.info("identity value = "+identity);
  System.out.println("-------Setting Director for:"+identity+"---------");
           //Identity identity =context.getObjectByName(Identity.class,"100020");
  
  if(null != identity){
  
  Identity managerIdentity=identity.getManager();
  String identityEEOCode=identity.getAttribute("eeojobgroup");
  System.out.println("-------Immidiate Manager:"+managerIdentity+"---------"+identity);
    
  String managerEEOCode=null;
  
  int managerFound=0;
  int managerLevel=1;
    
  boolean searchManager=true;
  
  while(searchManager){
  
	if(managerIdentity!=null){
    
    managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
    System.out.println("-------Inside While First If Loop:"+managerEEOCode+"---------"+identity);
    if(identityEEOCode != null){
    
    if(identityEEOCode.equals("110") @or identityEEOCode.equals("100")){
      System.out.println("-------Identity is a director or above:"+identityEEOCode+"---------"+identity);
      managerFound++; 
    }
    
    else{
      if(managerEEOCode!=null){
      if((managerEEOCode.equals("110")) @and managerLevel == 1){
				identity.setAttribute("director","");
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 }  
      else if((managerEEOCode.equals("110")) @and managerFound==0  @and managerLevel != 1){
        if(null != managerIdentity){
          System.out.println("-------Manager is a director:"+managerIdentity.getName()+"---------"+identity);
		identity.setAttribute("director",managerIdentity.getName());
		managerFound++;
        }
		context.saveObject(identity);
		context.commitTransaction();
  		}
        else if(managerEEOCode.equals("100")){
          managerFound++;
        }
      else {
        if(null != managerIdentity){
        System.out.println("-------Manager is not director getting next manager:---------"+identity);
        managerIdentity =managerIdentity.getManager();
          managerLevel++;
		//managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
        }
      }
    }
      else{
        searchManager=false;
      }
   }
    if(managerFound>=1){
      searchManager=false;
    }
	}
    else{
      if(managerEEOCode!=null){
        if((managerEEOCode.equals("110")) @and managerLevel == 1){
				identity.setAttribute("director","");
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 }
      else if((managerEEOCode.equals("110")) @and managerFound==0   @and managerLevel != 1){
        if(null != managerIdentity){
		identity.setAttribute("director",managerIdentity.getName());
		managerFound++;
        }
		context.saveObject(identity);
		context.commitTransaction();
  }
        else if(managerEEOCode.equals("100")){
          managerFound++;
        }
      else{
        if(null != managerIdentity){
        managerIdentity =managerIdentity.getManager();
          managerLevel++;
		//managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
        }
      }
    }
      else{
        searchManager=false;
      } 
   }
    if(managerFound>=1){
      searchManager=false;
    }
  }
	
	else{
		break;
	}
  }
  }  
   </Source>
  </Rule>
  <Rule created="1607416155147" id="0a111e5876401f8f817641780c0b0402" language="beanshell" modified="1616140941807" name="CF-Update-Manager" type="IdentityAttribute">
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import org.apache.log4j.Logger;
    
Logger log = Logger.getLogger("com.carefirst.UpdateManagerRule");
  
  //Identity identity =context.getObjectByName(Identity.class,"100005");
  log.info("identity value = "+identity);
  
  if(null != identity){
  Identity managerIdentity=identity.getManager();
   log.info("managerIdentity"+managerIdentity);
    
  String identityEEOCode=identity.getAttribute("eeojobgroup");
    log.info("identityEEOCode"+identityEEOCode);
 
    log.info("Result of managerIdentity!=null check in if = "+managerIdentity!=null);
    
  String managerEEOCode=null;
  
  int managerFound=0;
  int managerLevel=1;
  
  boolean searchManager=true;
  
  while(searchManager){
  
	if(managerIdentity!=null){
    
    log.info("Inside if block, managerIdentity is not null.");
    
    managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
    
    if(identityEEOCode!=null){
    
    if(identityEEOCode.equals("120") @or identityEEOCode.equals("110") @or identityEEOCode.equals("100")){
      managerFound++; 
    }
    
    else{
      if(managerEEOCode!=null){
      if((managerEEOCode.equals("120")) @and managerLevel == 1){
				identity.setAttribute("manager2","");
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 } 
      else if((managerEEOCode.equals("120")) @and managerFound==0 @and managerLevel != 1){
		identity.setAttribute("manager2",managerIdentity.getName());
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 }
         else if((managerEEOCode.equals("100")) @or (managerEEOCode.equals("110"))){
          managerFound++;
        }
      else{
        if(null != managerIdentity){
        managerIdentity =managerIdentity.getManager();
        managerLevel++;
        }
		//managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
      }
    }
      else{
        searchManager=false;
      }
    }
    if(managerFound>=1){
      searchManager=false;
    }
    }
    else{
      if(managerEEOCode!=null){
        if((managerEEOCode.equals("120")) @and managerLevel == 1){
				identity.setAttribute("manager2","");
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 }
     	else if((managerEEOCode.equals("120")) @and managerFound==0  @and managerLevel != 1){
        if(null != managerIdentity){
		identity.setAttribute("manager2",managerIdentity.getName());
		managerFound++;
        }
		context.saveObject(identity);
		context.commitTransaction();
  			}
        else if((managerEEOCode.equals("100")) @or (managerEEOCode.equals("110"))){
          managerFound++;
        }
      else{
        if(null != managerIdentity){
        managerIdentity =managerIdentity.getManager(); 
          managerLevel++;
		//managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
        }
      }
    }
      else{
        searchManager=false;
      }
    }
    if(managerFound>=1){
      searchManager=false;
    } 
	}
	
	else{
		break;
	}
  }
  }
  
   </Source>
  </Rule>
  <Rule created="1607416179833" id="0a111e5876401f8f817641786c790403" language="beanshell" modified="1616140989516" name="CF-Update-VP" type="IdentityAttribute">
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import org.apache.log4j.Logger;
    
Logger log = Logger.getLogger("com.carefirst.UpdateVPRule");
  
  log.info("identity value = "+identity);
  
  //Identity identity =context.getObjectByName(Identity.class,"100005");
  if(null != identity){
  
  Identity managerIdentity=identity.getManager();
  String identityEEOCode=identity.getAttribute("eeojobgroup");
 
  String managerEEOCode=null;
  
  int managerFound=0;
  int managerLevel=1;
    
  boolean searchManager=true;
  
  while(searchManager){
  
	if(managerIdentity!=null){
    
    managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
    
    if(identityEEOCode!=null){
    
    if(identityEEOCode.equals("100")){
      managerFound++; 
    }
    
    else{
      if(managerEEOCode!=null){
      if((managerEEOCode.equals("100")) @and managerLevel == 1){
				identity.setAttribute("vp","");
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 }  
     else if((managerEEOCode.equals("100")) @and managerFound==0  @and managerLevel != 1){
        if(null != managerIdentity){
		identity.setAttribute("vp",managerIdentity.getName());
		managerFound++;
        }
		context.saveObject(identity);
		context.commitTransaction();
		}
      else{
        if(null != managerIdentity){
        managerIdentity =managerIdentity.getManager(); 
          managerLevel++;
		//managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
        }
      }
    }
      else{
        searchManager=false;
      }
   }
    if(managerFound>=1){
      searchManager=false;
    }
	}
    else{
       if(managerEEOCode!=null){
         if((managerEEOCode.equals("100")) @and managerLevel == 1){
				identity.setAttribute("vp","");
		managerFound++;
		context.saveObject(identity);
		context.commitTransaction();
 		 }
       else if((managerEEOCode.equals("100")) @and managerFound==0   @and managerLevel != 1){
         if(null != managerIdentity){
		identity.setAttribute("vp",managerIdentity.getName());
		managerFound++;
         }
		context.saveObject(identity);
		context.commitTransaction();
		}
      else{
        if(null != managerIdentity){
        managerIdentity =managerIdentity.getManager(); 
           managerLevel++;
		//managerEEOCode=managerIdentity.getAttribute("eeojobgroup");
        }
      }
    }
      else{
        searchManager=false;
      }
   }
    if(managerFound>=1){
      searchManager=false;
    }
    
  }
	
	else{
		break;
	}
  }
  }
   </Source>
  </Rule>
  <Rule created="1607420843483" id="0a111e5876401f8f817641bf95db05db" language="beanshell" modified="1607423808837" name="NN-MailboxReassign-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  Add-type -path  E:\IQService\utils.dll


    try{

    ECHO "Before creating the Variables 111111111111****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
      $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    ECHO "after sreader 2222 ****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
      $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
    ECHO "after xmlreader 333333  ****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
      $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);

    ECHO "Declared OOB Varaibles 444444444****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE


      foreach ($attribute in $requestObject.AttributeRequests){

      if($attribute.Name -eq "identityName"){
        $userID  = $attribute.Value

      }
      if($attribute.Name -eq "manageruserid"){
        $managerUserID  = $attribute.Value

      }
    }
    Add-MailboxPermission -Identity $userID -User  $managerUserID AccessRights FullAccess
      ECHO "User folder  moved to manager Folder 5555555555****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
        $path = "E:\Test\"
        $homeDirectory = $path + $managerUserID + $userID
        ECHO "Homedirectory ****" $homeDirectory |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE
          $currentACL = Get-ACL -path $homeDirectory
          $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($managerUserID,"Read","Allow")
          $currentACL.SetAccessRule($AccessRule)
          $currentACL | Set-Acl -path $homeDirectory 
          ECHO "Manager added in User folder 6666666666666****" |Add-Content -path E:\Test\mailboxReassignLogs.txt -FORCE

  }

  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\mailboxReassignError.txt -FORCE
  }


  </Source>
  </Rule>
  <Rule created="1607424421919" id="0a111e5876401f8f817641f6301f07f8" language="beanshell" modified="1607426358622" name="NN-HomeDirectoryReassign-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
 Add-type -path  E:\IQService\utils.dll


  try{
    
ECHO "Before creating the Variables 11222211****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
    $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    ECHO "after sreader  ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
        ECHO "after xmlreader  ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
    
    ECHO "Declared OOB Varaibles ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
      
     #Below two lines to be deleted when moving to Prod
     [string] $userID = "E:\Test\"
     [string]  $managerUserID = "E:\Test\"
      
      #Below two lines to be uncommented when moving to Prod
     #[string] $userID = "\\carefirst.com\corp\cdchome\"  
     #[string]  $managerUserID = "\\carefirst.com\corp\cdchome\" 
      
      
foreach ($attribute in $requestObject.AttributeRequests){

    if($attribute.Name -eq "identityName"){
      $userID  = $userID+$attribute.Value
      $sAMAccountName = $attribute.Value
    }
      if($attribute.Name -eq "manageruserid"){
     $managerUserID  = $managerUserID+$attribute.Value
       $managerName = $attribute.Value
      
    }
  }
    ECHO "Before moving folder to manager folder11111111111****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
   Move-Item -Path $userID -Destination $managerUserID
       ECHO "user folder is moved to manager folder22222222 ****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
                $slash = "\"
        $homeDirectory =  $managerUserID + $slash + $sAMAccountName
        ECHO "Homedirectory 3333333333****" $homeDirectory |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
          $currentACL = Get-ACL -path $homeDirectory
           ECHO "Homedirectory 44444****" $currentACL |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE
          $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($managerName,"Read","Allow")
          $currentACL.SetAccessRule($AccessRule)
          $currentACL | Set-Acl -path $homeDirectory 
          ECHO "Manager added in User folder 44444444****" |Add-Content -path E:\Test\homedriveReassignLogs.txt -FORCE

   
 }
  
  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\homedriveReassignError.txt -FORCE
  }


  </Source>
  </Rule>
  <Rule created="1607519538090" id="0a111e5876471dc9817647a18baa0069" language="beanshell" modified="1609837273770" name="CF-SkypeFilterForFepocUsers-Rule" type="BeforeProvisioning">
    <Description></Description>
    <Source>import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.GenericRequest;
import sailpoint.integration.ProvisioningPlan;
import sailpoint.object.ProvisioningProject;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.integration.*;
 import sailpoint.api.Provisioner;
import java.util.List;
import org.apache.log4j.Logger;
Logger log = Logger.getLogger("com.carefirst.ADBeforeProvrule");
        log.info("**** Starting new log for FEPOC Skype check in AD before prov rule ****");
  log.info("plan Map: ");
  log.info("**** identity ****"+plan.getIdentity().getName());
	Identity identity = plan.getIdentity();
   if(identity != null){
System.out.println("**** Inside Active Directory, entering Before Provisioning Rule ****");
     log.info("**** Company Code***"+identity.getAttribute("company"));
log.info("**** Inside Active Directory, entering Before Provisioning Rule ****");
if(identity.getAttribute("company").equalsIgnoreCase("SBP")){
AccountRequest acctReq = plan.getAccountRequest("Active Directory");
log.info("**** Inside Active Directory, entering Before Provisioning Rule, before removing Skype attributes, plan = ****"+acctReq.toXml());
List attributeRequests = acctReq.getAttributeRequests();
if ( attributeRequests != null ) {
			for ( AttributeRequest req : attributeRequests ) {
			String name = req.getName();
				if ( name != null &amp;&amp; name.compareTo("SipAddress") == 0 ){
					acctReq.remove(req);
					}
					if ( name != null &amp;&amp; name.compareTo("msRTCSIP-UserEnabled") == 0 ){
											acctReq.remove(req);
					}
				if ( name != null &amp;&amp; name.compareTo("SipAddressType") == 0 ){	
										acctReq.remove(req);
					}
				if ( name != null &amp;&amp; name.compareTo("RegistrarPool") == 0 ){
										acctReq.remove(req);
				}
			}
		}
log.info("**** Inside Active Directory, exiting Before Provisioning Rule, after removing Skype attributes, plan = ****"+acctReq.toXml());
	}
	
	AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
  String userObjName = plan.getNativeIdentity();
      Identity identity = context.getObjectByName(Identity.class,userObjName);

System.out.println("**** Inside AD after provisioning rule, BEFORE entering code to provision Skype attributes ****");
System.out.println("User company = "+identity.getAttribute("company"));
System.out.println("Account request = "+accountRequest);
System.out.println("Operation = "+accountRequest.getOperation());
System.out.println("Plan = "+plan.toXml());

if (!identity.getAttribute("company").equalsIgnoreCase("SBP") &amp;&amp; ( accountRequest != null ) &amp;&amp; ((AccountRequest.Operation.Create.equals(accountRequest.getOperation()))))
{
	System.out.println("**** Inside AD after provisioning rule, entering code to provision Skype attributes ****");
	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - BEFORE setting Skype attrs = "+plan.toXml());


 String SipAddress= "sip:"+identity.getAttribute("userid")+"@carefirsttest.com";
     ArrayList l=new ArrayList();
     l.add("SamAccountName");
      l.add("FirstLastName");
      l.add("EmailAddress");
	
AccountRequest accountRequest = plan.getAccountRequest("Active Directory");

// accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        
         accountRequest.add(new AttributeRequest("SipAddress",ProvisioningPlan.Operation.Add,SipAddress));
       accountRequest.add(new AttributeRequest("msRTCSIP-UserEnabled",ProvisioningPlan.Operation.Add,"true"));
       accountRequest.add(new AttributeRequest("SipAddressType",ProvisioningPlan.Operation.Add,l));
       accountRequest.add(new AttributeRequest("RegistrarPool",ProvisioningPlan.Operation.Set,"sfb.carefirsttest.com"));

     
      plan.add(accountRequest);
      plan.setIdentity(identity);

  Provisioner provisioner= new Provisioner(context);
    provisioner.setNoLocking(true);
    provisioner.setOptimisticProvisioning(true);
    ProvisioningProject project =  provisioner.compile(plan);

    provisioner.execute(plan); 


	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - AFTER setting Skype attrs = "+plan.toXml());

	System.out.println("#### Inside AD after provisioning rule, exiting code to provision Skype attributes ####");


}
}</Source>
  </Rule>
  <Rule created="1608490517874" id="0a111e58768115ff817681818572030d" language="beanshell" name="CF-ISAMLDAPObjectClass-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="List"/>
    <Source>
  import java.util.List;
  
  List isamLdapObjectClass = new ArrayList();
  
  isamLdapObjectClass.add("PersonCarefirstPerson");
  isamLdapObjectClass.add("ibm-dynamicMember");
  isamLdapObjectClass.add("ePerson");
  
  return isamLdapObjectClass;
  
  </Source>
  </Rule>
  <Rule created="1609085981624" id="0a111e587693143d8176a4ff93b72fcc" language="beanshell" modified="1617914036864" name="CF-ISAMLDAPDisable-Rule" type="ResourceObjectCustomization">
    <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.

Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.</Description>
    <Signature returnType="ResourceObject">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="object">
          <Description>
          The ResourceObject built by the connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          Application that references the connector.
        </Description>
        </Argument>
        <Argument name="connector">
          <Description>
          The connector object.
        </Description>
        </Argument>
        <Argument name="state">
          <Description>
          A Map containing state information.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="resourceObject">
          <Description>
          The updated resource object.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>System.out.println("**** Starting ISAM LDAP Aggreg Customization Rule ****");
System.out.println("Inside ISAM LDAP Aggreg Customization Rule, active status = "+object.get("active"));

System.out.println("Inside ISAM LDAP Aggreg Customization Rule, is active equal to false? - "+object.get("active")==false);

if(object.get("active")==false){
object.put("IIQDisabled",true);

System.out.println("Inside ISAM LDAP Aggreg Customization Rule, inside if block.");
}
else{
return object;
}
System.out.println("#### Exiting ISAM LDAP Aggreg Customization Rule ####");</Source>
  </Rule>
  <Rule created="1609246822474" id="0a111e587693143d8176ae95d04a50e8" language="beanshell" modified="1609415919895" name="CF-ADAfterProvSkype-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Source>  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningResult;
if(plan != null){
    AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
    System.out.println("|||||accountRequest ::::"+accountRequest);

    Operation operation = accountRequest.getOperation();
    System.out.println("|||||accountRequest operation::::"+operation);
   System.out.println"|||||Boolean operation::::"+operation.equals(Operation.Create));
if(operation.equals(Operation.Create)){
System.out.println("999999999999999999999999999999999999999999999999999999999999999999999");
}
}</Source>
  </Rule>
  <Rule created="1609420328587" id="0a111e587693143d8176b8ed4e8b0827" language="beanshell" modified="1609420876581" name="CF-AfterProvisioningSkype-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
   import sailpoint.object.*;
  import java.util.*;
        import sailpoint.api.Provisioner;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan;
   System.out.println("999999999999999999999999999999999999999999999999999999999999999999999");
  System.out.println("After Prov Rule plan..............................."+plan.toXml()+plan.getNativeIdentity());

 Identity  identity = context.getObjectByName(Identity.class,plan.getNativeIdentity().toString());
 ProvisioningPlan plan1 = new ProvisioningPlan();

ArrayList a =new ArrayList ();

a=plan.getAccountRequests();
for(AccountRequest accountRequest:a){
 String h=accountRequest.getNativeIdentity().toString();
 String SipAddress= "sip:"+identity.getAttribute("userid")+"@carefirsttest.com";
     ArrayList l=new ArrayList();
     l.add("SamAccountName");
      l.add("FirstLastName");
      l.add("EmailAddress");
    if(identity != null){
      //plan = new ProvisioningPlan();
      linkObj = identity.getLink("Active Directory");
      System.out.println("linkObj"+linkObj+identity.getName());
    
 AccountRequest accountRequest1 = new AccountRequest();

   // if(linkObj != null){
      log.info("Inside Common Rule Library buildCustomPlan()  inside null check");
      accountRequest1.setApplication("Active Directory");
      accountRequest1.setNativeIdentity(h);

      
        accountRequest1.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        
         accountRequest1.add(new AttributeRequest("SipAddress",SipAddress));
       accountRequest1.add(new AttributeRequest("msRTCSIP-UserEnabled","true"));
       accountRequest1.add(new AttributeRequest("SipAddressType",l));
       accountRequest1.add(new AttributeRequest("RegistrarPool","sfb.carefirsttest.com"));

     
      plan1.add(accountRequest1);
      plan1.setIdentity(identity);
          
  //  }
    System.out.println("plan:::: "+plan1);
   // return plan; 
  }
 Provisioner  prov = new Provisioner(context);
        prov.compile(plan1);
        prov.execute();
}
  
  
  
  </Source>
  </Rule>
  <Rule created="1609837572057" id="0a111e5876b914098176d1cbefd90c4e" language="beanshell" modified="1609840120507" name="CF-Rule" type="BeforeProvisioning">
    <Description>An IdentityIQ server-side rule that is executed before the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan BEFORE it is sent to the underlying connectors used in provisioning. 

This rule will be called for any application found in a plan that also has a configured 'beforeProvisioningRule' configured.  

The plan can be updated directly in the rule by reference and does not need to return the plan.</Description>
    <Source>import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.GenericRequest;
import sailpoint.integration.ProvisioningPlan;
import sailpoint.object.ProvisioningProject;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.integration.*;
 import sailpoint.api.Provisioner;
import java.util.List;
import org.apache.log4j.Logger;
Logger log = Logger.getLogger("com.carefirst.ADBeforeProvrule");
        System.out.println("**** Starting new log for FEPOC Skype check in AD before prov rule ****");
   System.out.println("plan Map: ");
    System.out.println("**** identity ****"+plan.getIdentity().getName());
	Identity identity = plan.getIdentity();
   if(identity != null){
System.out.println("**** Inside Active Directory, entering Before Provisioning Rule ****");
     log.info("**** Company Code***"+identity.getAttribute("company"));
log.info("**** Inside Active Directory, entering Before Provisioning Rule ****");
if(identity.getAttribute("company").equalsIgnoreCase("SBP")){
AccountRequest acctReq = plan.getAccountRequest("Active Directory");
  System.out.println("**** Inside Active Directory, entering Before Provisioning Rule, before removing Skype attributes, plan = ****"+acctReq.toXml());
List attributeRequests = acctReq.getAttributeRequests();
if ( attributeRequests != null ) {
			for ( AttributeRequest req : attributeRequests ) {
			String name = req.getName();
				if ( name != null &amp;&amp; name.compareTo("SipAddress") == 0 ){
					acctReq.remove(req);
					}
					if ( name != null &amp;&amp; name.compareTo("msRTCSIP-UserEnabled") == 0 ){
											acctReq.remove(req);
					}
				if ( name != null &amp;&amp; name.compareTo("SipAddressType") == 0 ){	
										acctReq.remove(req);
					}
				if ( name != null &amp;&amp; name.compareTo("RegistrarPool") == 0 ){
										acctReq.remove(req);
				}
			}
		}
log.info("**** Inside Active Directory, exiting Before Provisioning Rule, after removing Skype attributes, plan = ****"+acctReq.toXml());
	}
	
	AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
  String userObjName = plan.getNativeIdentity();
      Identity identity = context.getObjectByName(Identity.class,userObjName);

System.out.println("**** Inside AD after provisioning rule, BEFORE entering code to provision Skype attributes ****");
System.out.println("User company = "+identity.getAttribute("company"));
System.out.println("Account request = "+accountRequest);
System.out.println("Operation = "+accountRequest.getOperation());
System.out.println("Plan = "+plan.toXml());

if (!identity.getAttribute("company").equalsIgnoreCase("SBP") &amp;&amp; ( accountRequest != null ) &amp;&amp; ((AccountRequest.Operation.Create.equals(accountRequest.getOperation()))))
{
	System.out.println("**** Inside AD after provisioning rule, entering code to provision Skype attributes ****");
	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - BEFORE setting Skype attrs = "+plan.toXml());


 String SipAddress= "sip:"+identity.getAttribute("userid")+"@carefirsttest.com";
     ArrayList l=new ArrayList();
     l.add("SamAccountName");
      l.add("FirstLastName");
      l.add("EmailAddress");
	
AccountRequest accountRequest = plan.getAccountRequest("Active Directory");

// accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        
         accountRequest.add(new AttributeRequest("SipAddress",ProvisioningPlan.Operation.Add,SipAddress));
       accountRequest.add(new AttributeRequest("msRTCSIP-UserEnabled",ProvisioningPlan.Operation.Add,"true"));
       accountRequest.add(new AttributeRequest("SipAddressType",ProvisioningPlan.Operation.Add,l));
       accountRequest.add(new AttributeRequest("RegistrarPool",ProvisioningPlan.Operation.Set,"sfb.carefirsttest.com"));

     
      plan.add(accountRequest);
      plan.setIdentity(identity);
  System.out.println("..............................dddddddd");

 // Provisioner provisioner= new Provisioner(context);
   // provisioner.setNoLocking(true);
   // provisioner.setOptimisticProvisioning(true);
   // ProvisioningProject project =  provisioner.compile(plan);

    //provisioner.execute(plan); 


	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - AFTER setting Skype attrs = "+plan.toXml());

	System.out.println("#### Inside AD after provisioning rule, exiting code to provision Skype attributes ####");


}
}</Source>
  </Rule>
  <Rule created="1609851402696" id="0a111e5876b914098176d29ef9c80f35" language="beanshell" modified="1611911657635" name="CF-Test" type="BeforeProvisioning">
    <Description>An IdentityIQ server-side rule that is executed before the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan BEFORE it is sent to the underlying connectors used in provisioning. 

This rule will be called for any application found in a plan that also has a configured 'beforeProvisioningRule' configured.  

The plan can be updated directly in the rule by reference and does not need to return the plan.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.GenericRequest;
import sailpoint.integration.ProvisioningPlan;
import sailpoint.object.ProvisioningProject;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.integration.*;
 import sailpoint.api.Provisioner;
import java.util.List;
import org.apache.log4j.Logger;
  import sailpoint.object.RoleMetadata;
  
   Identity identity =context.getObjectByName(Identity.class,"000726");
  List l= identity.getAssignedRoles();
  ArrayList rolel= new ArrayList();
  for(Bundle b:l){
    rolel.add(b.getName());
    
  }
  return rolel;
  //return identity.getAssignedRoles();

 return context.decrypt("1:ACP:kGEr5p0a6CZkZMU6xe+K+NdyWZOa7ywyFAkTlEbOkLY=");
  
  
   String upperAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String lowerAlphabet = "abcdefghijklmnopqrstuvwxyz";
    String numbers = "0123456789";

    // combine all strings
    String alphaNumeric = upperAlphabet + lowerAlphabet + numbers;

    // create random string builder
    StringBuilder sb = new StringBuilder();

    // create an object of Random class
    Random random = new Random();

    // specify length of random string
    int length = 10;

    for(int i = 0; i @lt length; i++) {

      // generate random index number
      int index = random.nextInt(alphaNumeric.length());

      // get character specified by index
      // from the string
      char randomChar = alphaNumeric.charAt(index);

      // append the character to string builder
      sb.append(randomChar);
    }

    String randomString = sb.toString();
    System.out.println("Random String is: " + randomString);

 return randomString;
  
  
    Identity identity = context.getObjectByName(Identity.class,"100414");
  List l= identity.getRoleMetadatas();
  ArrayList a=new ArrayList();
  for(RoleMetadata g:l){
    a.add(g.getName());
    
  }
  return a;
 // identity.setPassword("admin"); 
  
  //context.decrypt("1:ACP:xvWLGAcEyIfBa+xi+/ypyfEQahZ6ERYj6mraevaQR5M=");
 
  // context.saveObject(identity);
      //  context.commitTransaction();
      

  
/*Logger log = Logger.getLogger("com.carefirst.ADBeforeProvrule");
        log.info("**** Starting new log for FEPOC Skype check in AD before prov rule ****");
  log.info("plan Map: ");
AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
  String userObjName = plan.getNativeIdentity();
      Identity identity = context.getObjectByName(Identity.class,userObjName);

System.out.println("**** Inside AD after provisioning rule, BEFORE entering code to provision Skype attributes ****");
System.out.println("User company = "+identity.getAttribute("company"));
System.out.println("Account request = "+accountRequest);
System.out.println("Operation = "+accountRequest.getOperation());
System.out.println("Plan = "+plan.toXml());

if (!identity.getAttribute("company").equalsIgnoreCase("SBP") &amp;&amp; ( accountRequest != null ) &amp;&amp; ((AccountRequest.Operation.Create.equals(accountRequest.getOperation()))))
{
	System.out.println("**** Inside AD after provisioning rule, entering code to provision Skype attributes ****");
	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - BEFORE setting Skype attrs = "+plan.toXml());


 String SipAddress= "sip:"+identity.getAttribute("userid")+"@carefirsttest.com";
     ArrayList l=new ArrayList();
     l.add("SamAccountName");
      l.add("FirstLastName");
      l.add("EmailAddress");
	
AccountRequest accountRequest = plan.getAccountRequest("Active Directory");

// accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        
         accountRequest.add(new AttributeRequest("SipAddress",ProvisioningPlan.Operation.Add,SipAddress));
       accountRequest.add(new AttributeRequest("msRTCSIP-UserEnabled",ProvisioningPlan.Operation.Add,"true"));
       accountRequest.add(new AttributeRequest("SipAddressType",ProvisioningPlan.Operation.Add,l));
       accountRequest.add(new AttributeRequest("RegistrarPool",ProvisioningPlan.Operation.Set,"sfb.carefirsttest.com"));

     
      plan.add(accountRequest);
      plan.setIdentity(identity);

  Provisioner provisioner= new Provisioner(context);
    provisioner.setNoLocking(true);
    provisioner.setOptimisticProvisioning(true);
    ProvisioningProject project =  provisioner.compile(plan);

    provisioner.execute(plan); 


	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - AFTER setting Skype attrs = "+plan.toXml());

	System.out.println("#### Inside AD after provisioning rule, exiting code to provision Skype attributes ####");


}*/
</Source>
  </Rule>
  <Rule created="1609956742579" id="0a111e5876d710858176d8e655b30a61" language="beanshell" name="BulkImport-DiscAppITRoleUpdateEnt-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entitlementName = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
        role.setName(strCiamITRoleName);
        role.setDisplayName(strCiamITRoleName);
        role.setType("it");
        //role.setAttribute("ciamApplicationID", strCiamAppID);
        //role.setAttribute("ciamApplicationName", strCiamAppName);
        //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
        //role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        //role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
        //role.setAttribute("ciamITRoleId", strCiamITRoleID);
        // unused attributes
        //role.setAttribute("cartRoleId", strCartRoleID);
        //role.setAttribute("cartApplicationId", strCartAppID);
        //role.setAttribute("cartApplicationName", strCartAppName);
        //role.setAttribute("roleProvisionType", strRoleProvisionType);
        //role.setAttribute("manualProvisionTeam", strManualProvisionType);
        //role.setAttribute("roleSensitivity", strRoleSensitivity);
        //role.setAttribute("userType", strUserType);
        //role.setAttribute("noofapprovals", strNofApprovals);
        //role.setAttribute("approval1", strApproval1);
        //role.setAttribute("approval2", strApproval2);
        //role.setAttribute("approval3", strApproval3);
        //role.setAttribute("approval4", strApproval4);
        //role.setAttribute("approval5", strApproval5);
        //role.setAttribute("approval6", strApproval6);
        //role.setAttribute("approval7", strApproval7);
        //role.setAttribute("approval8", strApproval8);
        //role.setAttribute("approval9", strApproval9);
      }


     /* if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }*/

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
       // if (null =! appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          if(appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
            Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");
            Filter maFilter= Filter.and(Filter.eq("value",entitlementName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entitlementName);
              ma.setValue(entitlementName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();

            } // 
          //  appObj = ciamAppObj;
            //  return;		
          }

        //}
      }
//if(appName.equalsIgnoreCase("Active Directory")|| appName.equalsIgnoreCase("BizAppAD")||appName.equalsIgnoreCase("ISAM LDAP")||appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
      
      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


   
      // Build the filterString for entitlements matching this IT role.
      List entitlements = new ArrayList();
      entitlements.add(entitlementName);
      String comma = "";
      String filterString = attrName + ".containsAll({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();
        int size = profiles.size();
         System.out.println("Inside create IT Role Method profiles size is "+size);
		int count = 0;
   boolean isCreateProfile =  false;
        for (Profile prof : profiles) {
         
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();
 							count = count + 1;
            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              System.out.println("Inside iff Application name is same");
              List existingEntList = new ArrayList();
              List constraints = prof.getConstraints();
            
              // System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              for (Filter filterNew : constraints) {
                if(filterNew instanceof Filter.LeafFilter){
                  System.out.println("Inside create IT Role Method 444444444444444444");

                  //	filter.getExpression();
                  Object objValue = ((Filter.LeafFilter) filterNew).getValue();
                  if(objValue instanceof String){
                    existingEntList.add((String)objValue);
                  }
                  if(objValue instanceof List){
                    existingEntList.addAll((Collection) objValue);
                  }
                  if(null !=existingEntList &amp;&amp; existingEntList.size() > 0){ 
                    System.out.println("Inside create IT Role Method 555555555555555555555 Existing Ent lIst "+existingEntList);
                    System.out.println("Inside create IT Role Method New ENtilement "+entitlementName);

                    for(String oldEnt : existingEntList){
                      if(oldEnt.trim().equalsIgnoreCase(entitlementName.trim())){
                        System.out.println("Inside create IT Role Method Existing Entitlement and new Entitlement is same so returing ");
                        return;
                      }
                    }
                  }
                  System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
                }

              }
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            } 
            else{
              if(size == count &amp;&amp; !profileObj.getName().equalsIgnoreCase(appObj.getName())){
					   System.out.println("Inside if count and profile size are same creatting new profile ===");
					 
              isCreateProfile = true;
              break;
				  }
            }

          } // prfile null check closing 

        } // 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        if(isCreateProfile){
        Profile profilee = new Profile();
        //profilee.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profilee.setApplication(appObj);
        profilee.addConstraint(filter);
       // profilee.setConstraints(filterList);
        role.add(profilee);
        System.out.println("Inside create IT Role Method Added entitlement to same profile");
        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 8888888888888888");
        Profile profile = new Profile();
        //profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
       profile.addConstraint(filter);
        //profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 999999999999999999999");

      }
//}
      // System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"Missing-IT-Roles");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-IT-Roles");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_DAC-IT-Roles.csv";
 //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SPManagedMissingITRoles.csv";
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_DAC-IT-Roles.csv";
//  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_MAC-IT-Roles.csv";
  
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAMRoleSync_ITRoles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//missingITRoles_retry.csv";
  
  
  
  
  
  
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles-SameTarget.csv";
   String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//SemiAuto-IT-Roles.csv";

  // String csvFileName ="//home//iqadmin//Data//NNTestITRoles.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
   // return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1610113274445" id="0a111e5876d710858176e23ad24c2610" language="beanshell" modified="1616588954396" name="CF-ProvisionSkypeAccess-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  
  Add-type -path E:\IQService\utils.dll


  try{
     $date = Get-Date
    ECHO "Creating Skype on Get-Date on****"$date |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORC
      $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
 ECHO "Creating Skype Before Request Operation****"$date |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORC
    
    ECHO "Creating Skype Inside create Operation****"$date |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORC

    ECHO "Creating Skype  After import session ****" |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORC
        foreach ($attribute in $requestObject.AttributeRequests){
       ECHO "Creating Skype Inside For loop****"$date |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORC

        if($attribute.Name -eq "sAMAccountName"){
          [string]$samAccountName = $attribute.Value
            ECHO "Creating Skype SamAccountName = ****"$samAccountName |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORC
        }

      }
      ECHO  $samaccountName |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORCE 
        
          
         Enable-CsUser -Identity $samaccountName -RegistrarPool sfb.carefirsttest.com -SipAddress SIP:$samAccountName@carefirsttest.com

        
          ECHO "Skype Account Created for "+$samaccountName  + "on "$date  |Add-Content -path E:\Test\CF-SkypeProvisioning-Logs.txt -FORCE
    

  }
  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\CF-SkypeProvisioningErrors-Logs.txt -FORCE
      $errorMessage = $_.exception.message;

  }
  </Source>
  </Rule>
  <Rule created="1610357036792" id="0a111e5876d710858176f0c256f8404c" language="beanshell" modified="1610357105154" name="CF-ADFirstName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String firstname = "";
if(identity.getAttribute("prefFirstName")!=null){
firstname = identity.getAttribute("prefFirstName");
}
else{
 firstname =  identity.getFirstname();
}
  System.out.println("ADFirstName"+firstname);

return firstname;</Source>
  </Rule>
  <Rule created="1610443087198" id="0a111e5876d710858176f5e35d5e5485" language="beanshell" modified="1610531807114" name="CF-ValueChange-Rule" type="Listener">
    <Description>This rule can be used when the ObjectAttribute being listened to has changed.</Description>
    <Signature returnType="void"/>
    <Source>
  import sailpoint.object.EmailTemplate;
import sailpoint.object.EmailOptions;
  System.out.println("..Value Change--------------------------");
  
  public void sendMail(String EmailTemplate,String requesterName,String oldValue,String newValue,String email,String value){
    if(EmailTemplate !=null){
                EmailTemplate template = context.getObjectByName(EmailTemplate.class, EmailTemplate);
        // String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);                
          options.setVariable("requesterName", requesterName);
        options.setVariable("oldValue", oldValue);
        options.setVariable("newValue", newValue);
      options.setVariable("value", value);
        
      context.sendEmailNotification(template, options);
    }
        
        }
   System.out.println("..identity.getManager()"+identity.getManager());
       
  if(identity.getManager()!=null){
  if(oldValue !=null @and newValue !=null){
    if(!(oldValue.toString().equalsIgnoreCase(newValue))){
      sendMail("CF-ValueChange-EmailTemplate",identity.getDisplayName().toString(),oldValue,newValue,identity.getEmail().toString(),"DepartmentID");
      
    }
    
  }else if(oldValue !=null @and newValue ==null){
      sendMail("CF-ValueChange-EmailTemplate",identity.getDisplayName().toString(),oldValue,"",identity.getEmail().toString(),"DepartmentID");
      
      
    }else if(oldValue ==null @and newValue !=null){
      sendMail("CF-ValueChange-EmailTemplate",identity.getDisplayName().toString(),"",newValue,identity.getEmail().toString(),"DepartmentID");
      
    }else{
    System.out.println("..");
      
    }
   
  }
  
  </Source>
  </Rule>
  <Rule created="1610445950559" id="0a111e5876d710858176f60f0e5f5597" language="beanshell" modified="1610531844961" name="CF-ManagerValueChange-Rule" type="Listener">
    <Description>This rule can be used when the ObjectAttribute being listened to has changed.</Description>
    <Signature returnType="void">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment">
          <Description>
          Optional arguments passed from the task executor, if the rule is running within a task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
          The identity which owns the attribute.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
          The definition of the ObjectAttribute.
        </Description>
        </Argument>
        <Argument name="attributeName">
          <Description>
          The name of the ObjectAttribute.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the ObjectAttribute.
        </Description>
        </Argument>
        <Argument name="newValue">
          <Description>
          The new value of the ObjectAttribute.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.EmailTemplate;
import sailpoint.object.EmailOptions;
  System.out.println("..Manager Value Change------------------------------------------------------"+oldValue+newValue);
  
  public void sendMail(String EmailTemplate,String requesterName,String oldValue,String newValue,String email,String value){
    if(EmailTemplate !=null){
                EmailTemplate template = context.getObjectByName(EmailTemplate.class, EmailTemplate);
        // String email = "Admin@carefirst.com";
      	EmailOptions options = new EmailOptions();
          options.setTo(email);                
          options.setVariable("requesterName", requesterName);
        options.setVariable("oldValue", oldValue);
        options.setVariable("newValue", newValue);
      options.setVariable("value", value);
        
      context.sendEmailNotification(template, options);
    }
        
        }
       
  if(oldValue !=null){
  if(oldValue !=null @and newValue !=null){
    if(!((oldValue.getName().toString()).equalsIgnoreCase(newValue.getName().toString()))){
      sendMail("CF-ValueChange-EmailTemplate",identity.getDisplayName().toString(),oldValue.getName().toString(),newValue.getName().toString(),identity.getEmail().toString(),"Manager");
      
    }
    
  }else if(oldValue !=null @and newValue ==null){
      sendMail("CF-ValueChange-EmailTemplate",identity.getDisplayName().toString(),oldValue.getName().toString(),"",identity.getEmail().toString(),"Manager");
      
      
    }else if(oldValue ==null @and newValue !=null){
      sendMail("CF-ValueChange-EmailTemplate",identity.getDisplayName().toString(),"",newValue.getName().toString(),identity.getEmail().toString(),"Manager");
      
    }else{
    System.out.println("..");
      
    }
  }</Source>
  </Rule>
  <Rule created="1610464436694" id="0a111e5876d710858176f72921d65e07" language="beanshell" modified="1610560394210" name="CF-TestCiamselect-Rule">
    <Source>
 

  
import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.*;
 
     //return connection;

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  
 String username = "identityiqdev";
    String password = "Identityiq123$";
    String url = "jdbc:sqlserver://sv-spidsql-d1.carefirst.com";
    Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
    Connection connection = DriverManager.getConnection(url, username, password);
  System.out.println("connection............................"+connection);
   Statement stmt = null;
   stmt = connection.createStatement();

      String sql = "SELECT * from [identityiqdev].[CIAM_USERS]";
      ResultSet rs = stmt.executeQuery(sql);
      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
        
         String first = rs.getString("USER_ID");
        if(first.equalsIgnoreCase("CSRFEPAdmin2")){
           return rs.getString("USER_ID");
        }
       
      }
      


  //return "Success";


  </Source>
  </Rule>
  <Rule created="1610474750721" id="0a111e5876d710858176f7c683015fc6" language="beanshell" modified="1611234442306" name="CF-CIAM-RetryCIAMSync-Rule">
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="ProvisioningResult">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="count">
          <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
import java.util.List;
import sailpoint.object.TaskDefinition;
import sailpoint.object.TaskResult;
  import java.util.HashMap;
TaskDefinition taskDef = context.getObjectByName(TaskDefinition.class,"CF-CIAMRetyrTask-TaskDefinition");
String employeeid = taskDef.getString("employeeid");
String username = taskDef.getString("username");  
String email = taskDef.getString("email");  
String uaasname = taskDef.getString("uaasname");
  System.out.println("Employee ID is::::"+employeeid);
  HashMap userDetailsMap = new HashMap();
  HashMap resultMap = new HashMap();
  String count = employeeid;
if(null != employeeid &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("createAssociate")){
  userDetailsMap = generateUserDetaislMap(employeeid);
  resultMap = createassociate(userDetailsMap);

}else if(null != employeeid &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("createContractor")){
  userDetailsMap = generateUserDetaislMap(employeeid);
  resultMap = createContractor(userDetailsMap);

}else if(null != employeeid &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("updateAssociate")){
  userDetailsMap = generateUserDetaislMap(employeeid);
  boolean isRehire = false;
  resultMap = updateAssociate(userDetailsMap, isRehire);

}else if(null != employeeid &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("updateContractor")){
  userDetailsMap = generateUserDetaislMap(employeeid);
  boolean isRehire =false;
  resultMap = updateContractor(userDetailsMap, isRehire);

}else if(null != username &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("suspendPerson")){
  resultMap = suspendPerson(username);

}else if(null != username &amp;&amp; null != email &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("terminatePerson")){
  resultMap = terminatePerson(username, email);

}else if(null != username &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("reactivatePerson")){
  resultMap = reactivatePerson(userName);
}else if(null != username &amp;&amp; null != uaasname &amp;&amp; uaasname.equalsIgnoreCase("rehire")){

}
  
  
  System.out.println("Task result  is::::"+taskResult);
  System.out.println("Employee ID is::::"+employeeid);
  
  if(null != taskResult){
taskResult.setAttribute("count",count);
    context.saveObject(taskResult);
    context.commitTransaction();
  }
  
  
  

  </Source>
  </Rule>
  <Rule created="1610551332594" id="0a111e5876d710858176fc570ef26d5e" language="beanshell" modified="1610559960670" name="CF-TestCiamCreate-Rule">
    <Source>
 

  
import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.*;
 
     //return connection;

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  public dbInsert(HashMap m){
 String username = "identityiqdev";
    String password = "Identityiq123$";
    String url = "jdbc:sqlserver://sv-spidsql-d1.carefirst.com";
    Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
    Connection connection = DriverManager.getConnection(url, username, password);
  System.out.println("connection............................"+connection);
   PreparedStatement statement = null;
   //statement = connection.prepareStatement(sqlQuery);

    String sqlQuery = "INSERT INTO [identityiqdev].[CIAM_USERS](EMP_ID,USER_ID,firstname,lastname ,email,EMPLOYEE_TYPE ,alter_empid,middle_name,job_title ,department_id,job_code,manager,location,company,business_unit,cost_center,eeo_job_group,EMPLOYEE_STATUS,supplier_name,start_date,end_date) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    statement = connection.prepareStatement(sqlQuery);
    if(m.get("EMP_ID")!=null){
      statement.setString(1, m.get("EMP_ID"));
    }else {
      statement.setString(1, "");
    }
    if(m.get("USER_ID")!=null){
      statement.setString(2, m.get("USER_ID"));
    }else {
      statement.setString(2, "");
    }
    if(m.get("FRST_NM")!=null){
      statement.setString(3, m.get("FRST_NM"));
    }else {
      statement.setString(3, "");
    }
    if(m.get("LAST_NM")!=null){
      statement.setString(4, m.get("LAST_NM"));

    } else {
      statement.setString(4, "");

    }
    if(m.get("EMAL_ADDR")!=null){
      statement.setString(5, m.get("EMAL_ADDR"));
    }else {
      statement.setString(5, "");
    }
    if(m.get("EMPLOYEE_TYPE")!=null){
      statement.setString(6, m.get("EMPLOYEE_TYPE"));
    }else {
      statement.setString(6, "");
    }
    if(m.get("ALT_USER_ID")!=null){
      statement.setString(7, m.get("ALT_USER_ID"));
    }else {
      statement.setString(7, "");
    }
    if(m.get("MID_NM")!=null){
      statement.setString(8, m.get("MID_NM"));
    } else {
      statement.setString(8, "");
    }
    if(m.get("JOB_TITL")!=null){
      statement.setString(9, m.get("JOB_TITL"));
    }else {
      statement.setString(9, "");
    }
    if(m.get("department_id")!=null){
      statement.setString(10, m.get("department_id"));
    }else {
      statement.setString(10, "");
    }
    if(m.get("JOB_CD")!=null){
      statement.setString(11, m.get("JOB_CD"));
    }else {
      statement.setString(11, "");
    }

    if(m.get("MNGR_ID")!=null){
      statement.setString(12, m.get("MNGR_ID"));
    }else {
      statement.setString(12, "");
    }

     if(m.get("LOCN_CD")!=null){
      statement.setString(13, m.get("LOCN_CD"));
    }else {
      statement.setString(13, "");
    }
     if(m.get("CO_CD")!=null){
      statement.setString(14, m.get("CO_CD"));
    }else {
      statement.setString(14, "");
    }
 if(m.get("BU_CD")!=null){
      statement.setString(15, m.get("BU_CD"));
    }else {
      statement.setString(15, "");
    }
     
  if(m.get("CC")!=null){
      statement.setString(16, m.get("CC"));
    }else {
      statement.setString(16, "");
    }
if(m.get("EEO_CD")!=null){
      statement.setString(17, m.get("EEO_CD"));
    }else {
      statement.setString(17, "");
    }
    if(m.get("EMPLOYEE_STATUS")!=null){
      statement.setString(18, m.get("EMPLOYEE_STATUS"));
    }else {
      statement.setString(18, "");
    }
     if(m.get("SUPLR_NM")!=null){
      statement.setString(19, m.get("SUPLR_NM"));
    }else {
      statement.setString(19, "");
    }
if(m.get("IDNT_EFFT_DT")!=null){
      statement.setString(20, m.get("IDNT_EFFT_DT"));
    }else {
      statement.setString(20, "");
    }
    if(m.get("IDNT_EXPRN_DT")!=null){
      statement.setString(21, m.get("IDNT_EXPRN_DT"));
    }else {
      statement.setString(21, "");
    }


    statement.executeUpdate();



    statement.close();
      
  }
      

  String dlm = ",";

  //  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//TestCIAM.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
       dbInsert(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  //return "Success";


  </Source>
  </Rule>
  <Rule created="1610813870820" id="0a111e5877071ea781770bfd12e40718" language="beanshell" modified="1610903300470" name="CF-RequestObjectSelector-Roles" type="RequestObjectSelector">
    <Description>Request Object Selector Rules are used by the Life Cycle Manager to determine the Objects that can be requested by a given user on a given population.  For bulk request this rule is run twice.  The first time the result determines which applications are shown to the requestor.  The second time the result determines whether or not the specified requestee has access to the object.  On the first execution the requestee is always null, so the rule needs to expect and handle that case in order to be usable for bulk requests.</Description>
    <Signature returnType="sailpoint.object.QueryInfo">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="requestor" type="sailpoint.object.Identity">
          <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
        </Argument>
        <Argument name="requestee" type="sailpoint.object.Identity">
          <Description>
          Identity on whose behalf the Life Cycle Manager request is being made.  In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="filter">
          <Description>
          A Filter object that will be used to search for accessible request objects.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  
  import sailpoint.object.*;

  Filter filter = Filter.eq("requestableRole","True");
  QueryOptions qo = new QueryOptions();
  qo.addFilter(filter);
  QueryInfo qi = new QueryInfo(qo);
  return qi;
  </Source>
  </Rule>
  <Rule created="1610915809679" id="0a111e58770f1cba81771210898f082d" language="beanshell" modified="1617916857374" name="CF-DisplayNameFNLN-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

 String firstname =  identity.getFirstname();
String lastname =  identity.getLastname();
  String displayName = "";
  if(null != firstname &amp;&amp; null != lastname){
   displayName = firstname+" "+lastname;
  }else{
    //displayName = identity.getName();
  }
return displayName;</Source>
  </Rule>
  <Rule created="1612278487928" id="0a111e58775d17a4817763495b78118b" language="beanshell" modified="1612517162254" name="CF-ADAfterProv-SingleAccountAggRule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>


  try{
   	 System.out.println("Entering for AD Single Account Aggregation After Provisioning rule");
     String identityName = plan.getNativeIdentity();
   
     System.out.println("Single Account Identity name: "+identityName);
     singleAccountAggregation("Active Directory",identityName);
  }
  catch(Exception e){
  }</Source>
  </Rule>
  <Rule created="1612516844371" id="0a111e58775d17a48177717e63532daf" language="beanshell" modified="1612517250690" name="CF-ISAMLDAP-AfterProv-Singleaccountagg-Rule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>try{
   	 System.out.println("Entering for AD Single Account Aggregation After Provisioning rule");
     String identityName = plan.getNativeIdentity();
   
     System.out.println("Single Account Identity name: "+identityName);
     singleAccountAggregation(STR_ISAM_LDAP,identityName);
  }
  catch(Exception e){
  }</Source>
  </Rule>
  <Rule created="1612885702875" id="0a111e58777411578177877ab8db261d" language="beanshell" modified="1613751146893" name="CF-ADProxyAddress-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;


String email =  identity.getEmail();
System.out.println("AD EMail------------------------------------------------------"+email+current);


  
  String modifiedEmail=email;
  if(current !=null){
    
    
    //String a=current.toString().substring(5);
    email="SMTP:"+modifiedEmail+current.toString();
     System.out.println("Before Return::"+email);
    
    
  }else{
    email="SMTP:"+modifiedEmail;
     System.out.println("Before Return::"+email);
    
  }
  
  
     System.out.println("Before Return::...................."+email);
return email;</Source>
  </Rule>
  <Rule created="1612979930502" id="0a111e587774115781778d18858633c9" language="beanshell" modified="1613150728589" name="CF-AttributeChangeTrigger-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
    <Signature returnType="boolean">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="previousIdentity">
          <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
        </Argument>
        <Argument name="newIdentity">
          <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="result">
          <Description>
          A boolean describing the result of the rule.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>System.out.println("******CF-AttributeChangeTrigger-Rule"+newIdentity+previousIdentity); 

if(previousIdentity !=null){
if(newIdentity.getAttribute("employeetype").toString().equalsIgnoreCase("ASSOCIATE")){

System.out.println("******CF-AttributeChangeTrigger-Rule"+newIdentity+previousIdentity); 
if((previousIdentity.getAttribute("prefFirstName") !=null)  @and (newIdentity.getAttribute("prefFirstName")!=null) @and (previousIdentity.getAttribute("lastname")!=null)@and (newIdentity.getAttribute("lastname")!=null)) {
 
 
 System.out.println("******...."+newIdentity.getAttribute("lastname")+previousIdentity.getAttribute("lastname")); 
if(!(previousIdentity.getAttribute("prefFirstName").toString().equalsIgnoreCase(newIdentity.getAttribute("prefFirstName").toString())) @or !(previousIdentity.getAttribute("lastname").toString().equalsIgnoreCase(newIdentity.getAttribute("lastname").toString()))){

System.out.println("******...."); 
return true;
}else{

return false;
}
}
else if(((previousIdentity.getAttribute("prefFirstName") == null) @and (newIdentity.getAttribute("prefFirstName")!=null)) @or((previousIdentity.getAttribute("lastname") == null) @and (newIdentity.getAttribute("lastname")!=null))){
return true;

}else if((previousIdentity.getAttribute("prefFirstName") != null @and (newIdentity.getAttribute("prefFirstName")==null))@or(previousIdentity.getAttribute("lastname") != null @and (newIdentity.getAttribute("lastname")==null))){
return true;

}else if(!(previousIdentity.getAttribute("firstname").toString().equalsIgnoreCase(newIdentity.getAttribute("firstname")))){


return true;

}else if((previousIdentity.getAttribute("lastname") == null @and (newIdentity.getAttribute("lastname")!=null))@or (previousIdentity.getAttribute("lastname") != null @and (newIdentity.getAttribute("lastname")==null))){
return true;
}
else if((previousIdentity.getAttribute("lastname")!=null)@and (newIdentity.getAttribute("lastname")!=null)){
if(!(previousIdentity.getAttribute("lastname").toString().equalsIgnoreCase(newIdentity.getAttribute("lastname").toString()))){
return true;

}else{


return false;
}
}
else{


return false;
}
}else{

return false;




}
}else{

return false;




}</Source>
  </Rule>
  <Rule created="1613483390301" id="0a111e5877a518838177ab1ab55d1507" language="beanshell" modified="1614949474374" name="CF-ADDisplayName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String firstname ="";
 String displayName = "";

if(identity.getAttribute("prefFirstName")!=null){
firstname = identity.getAttribute("prefFirstName");
}else{
firstname =  identity.getFirstname();
}
String lastname =  identity.getLastname();
 
 
   displayName = lastname+", "+firstname ;
  
return displayName;</Source>
  </Rule>
  <Rule created="1613745183397" id="0a111e5877a518838177bab55aa551a7" language="beanshell" modified="1613759814789" name="CF-CreateFormProxyAddress-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String email =  identity.getEmail();


return email;</Source>
  </Rule>
  <Rule created="1613997540248" id="0a111e5877c419108177c9c003980a75" language="beanshell" modified="1617146016902" name="CF-ActiveDirectoryEmail-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*; 
    if(identity != null &amp;&amp; !identity.getAttribute(ATR_COMPANY).equalsIgnoreCase("SBP")){
      String  userid=  identity.getAttribute("userid") != null ? identity.getAttribute("userid") : "";
String firstname = "";
 // String firstname =  identity.getFirstname();
 // if(oldValue == null){
//if(employeetype.equalsIgnoreCase(STR_EMPLOYEE)){
      System.out.println("CF-Global-EmailRule........12");
if(identity.getAttribute("prefFirstName")!=null){
firstname =  identity.getAttribute("prefFirstName");
  System.out.println("CF-Global-EmailRule........11");
}
else{
firstname =  identity.getAttribute("firstname");
 // firstname=hrApplication.getAttribute("FIRST_NAME");
  System.out.println("CF-Global-EmailRule.......1."+identity.getAttributes());
}
//}
/* else{
firstname =  identity.getAttribute("firstname");
  // firstname=hrApplication.getAttribute("FIRST_NAME");
    System.out.println("CF-Global-EmailRule.......2.");
}*/
  System.out.println("CF-Global-EmailRule"+firstname);
String lastname =  identity.getLastname();
//    String lastname = hrApplication.getAttribute("LAST_NAME");
  System.out.println("CF-Global-EmailRule"+lastname);
String company = identity.getAttribute(ATR_COMPANY);
//  String company = "WIL";
  System.out.println("CF-Global-EmailRule: "+company);
String domain = "";
    if(company !=null){
if(company.equalsIgnoreCase("CCO")){
domain=STR_CCO_MAIL;
}
else if(company.equalsIgnoreCase("TRU")){
domain=STR_TRU_MAIL;
}
else if(company.equalsIgnoreCase("WIL")||company.equalsIgnoreCase("NCS")){
domain=STR_WIL_MAIL;
}
else if(company.equalsIgnoreCase("SBP")){
domain=STR_SBP_MAIL;
}
else {
domain=STR_CAREFIRST_MAIL;
}
    }else {
domain=STR_CAREFIRST_MAIL;
}
System.out.println("CF-Global-EmailRule"+domain);
String email = firstname+"."+lastname+domain;
  System.out.println("email::"+email);
 boolean flag = true;

  Identity identity = null; 
  Filter emailFilter= null;
    emailFilter = Filter.eq("email",email);
   identity = context.getUniqueObject(Identity.class,emailFilter);
   
   if(identity != null){
     System.out.println("identity......."+email);
		String middleInit = identity.getAttribute("middleName");
//String middleInit = identity.getAttribute("middlename");
		List middleList = new ArrayList();
		if(middleInit != null @and middleInit.length() != 0){
                    email = firstname+"."+Character.toString(middleInit.charAt(0))+"."+lastname+domain;
                //email = firstname+"."+middleInit.charAt(0)+"."+lastname+domain;
		//middleList.add(Character.toString(middleInit.charAt(0)));
		emailFilter = Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+domain;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch @lteq 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+domain;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
	  else{
	  while(flag){
	  
	  if(middleList == null || middleList.size() == 0){
		email =   firstname+".X."+lastname+domain;
		middleList.add("X");
        emailFilter= Filter.eq("email",email);
		identity = context.getUniqueObject(Identity.class,emailFilter);
		if(identity == null){
        
          flag=false;
      }
        //count ++;
		}
		else{
	  for (char ch = 'A'; ch @lteq 'Z'; ch++) {
			String st = Character.toString(ch);
			email = firstname+"."+st+"."+lastname+domain;
			middleList.add(st);
			emailFilter= Filter.eq("email",email);
			identity = context.getUniqueObject(Identity.class,emailFilter);
			if(identity == null){
        
          flag=false;
		  break;
      }
		}
		}
	  }
	  }
  }
   System.out.println("Before Return::"+email);
return email;
 // }
 /* else{
    return oldValue;
  }*/
        }</Source>
  </Rule>
  <Rule created="1614071597626" id="0a111e5877c419108177ce2a0a3a1b5f" language="beanshell" modified="1616741479479" name="CF-ADExtensionAttribute-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String company = identity.getAttribute(ATR_COMPANY);
String extValue="";

  if(company!=null){
if(company. equalsIgnoreCase("WIL")){

extValue="cfablue";

} else if(company. equalsIgnoreCase("CCO")){

extValue="CCO";


}else if(company. equalsIgnoreCase("TRU")){
extValue="CHPDC";
}else{


extValue="";

}
  }
return extValue;</Source>
  </Rule>
  <Rule created="1614073992078" id="0a111e5877c419108177ce4e938e1bcd" language="beanshell" modified="1614077196564" name="CF-ADExtAttributeSch-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.*;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
    import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.*;
  import sailpoint.api.Provisioner;

public void setValue(HashMap lineHash){
  
  
  Identity identity = context.getObjectByName(Identity.class, lineHash.get("empl ID").toString());
    log.info("Inside Common Rule Library buildMoverPlan() ");
   ProvisioningPlan plan = new ProvisioningPlan();
    plan.setIdentity(identity);
	
	Application appObj  = context.getObjectByName(Application.class, "Active Directory");
     // System.out.println("buildMoverPlan :::"+appObj);

      if(appObj != null){
        Link linkObj = identity.getLink(appObj);
        log.info("Inside Common Rule Library buildMoverPlan() before linkObj not check");
        if(linkObj != null){
          log.info("Inside Common Rule Library buildMoverPlan()  inside null check");
          AccountRequest adAccountReq = new AccountRequest();
          adAccountReq.setApplication(STR_ACTIVE_DIRECTORY);
          adAccountReq.setNativeIdentity(linkObj.getNativeIdentity());
          adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

          adAccountReq.add(new AttributeRequest("extensionAttribute11",ProvisioningPlan.Operation.Set,lineHash.get("Room ID").toString()));
          
            
          plan.add(adAccountReq);
        
          log.info("Inside Common Rule Library buildMoverPlan() plan is  "+plan);
        }
      }
	  
	  
	   Provisioner  prov = new Provisioner(context);
        prov.compile(plan);
        prov.execute();
		
		}
  
  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//cubes.csv";

  //return csvFileName;

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");
  //return csvFileName;
  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash.get("empl ID");
      System.out.println(" Before calling buildRole: "+lineHash.get("Room ID")+headerString +valueString);
      //return lineHash;
     setValue(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1614082222979" id="0a111e5877c419108177cecc2b831d31" language="beanshell" modified="1614082595260" name="RoleProfileRemovalTest-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
    
  public void validateEntitlement (String entitlement,String application,String roleName) { 
    
      Bundle role = context.getObject(Bundle.class, roleName);
    
    if(role!=null){
    
      Application app = context.getObjectByName(Application.class, application);
      List apps = new ArrayList();
  		apps.add(app);
  //String s = "cn=PX_Blue2_Users,ou=PX Blue2,ou=groups,DC=CAREFIRST,DC=COM";
			boolean flag=false;
      if((role.getProfilesForApplications(apps) != null) @and (role.getProfilesForApplications(apps).size()>0)){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfilesForApplications(apps);
       // return profiles;
        int size = profiles.size();
        //return size;
         System.out.println("Inside create IT Role Method profiles size is "+size);
        Profile prof = profiles.get(0);
        
        List constraints = prof.getConstraints();
       // return constraints;
        int c=0;
        role.remove(prof);
        context.saveObject(role);
      context.commitTransaction();
      
      }
        
      
  }
    else{
     System.out.println(" inside role else loop");
      Custom customObj = context.getObjectByName(Custom.class,"Missing-IT-RolesNew");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-IT-RolesNew");
        customObj.put(roleName, roleName);

      }
      else{
        customObj.put(roleName, roleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
    }
  }



  
 /* public void validateBusinessRole (HashMap roleHash) { 
    
      System.out.println(" key Values Map "+roleHash);
    String strCiamBusinessRoleName = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";   
    String subRoles = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name"): "";

    //unsused variables
    validateITRole(subRoles,strCiamBusinessRoleName);
  }*/
  public void validateRole (HashMap roleHash) { 
    
      System.out.println(" key Values Map "+roleHash);
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";    
    String entitlementName = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    validateEntitlement(entitlementName,appName,strCiamITRoleName);
  }
      
  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_DAC-IT-Roles.csv";
 //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SPManagedMissingITRoles.csv";
  
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAMRoleSync_ITRoles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//missingITRoles_retry.csv"; 
  
  
  
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles-SameTarget.csv";
   //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//RoleUpdate//RoleValidation_Test.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//SP_Managed_DAC-IT-Roles_b3.csv";
  
  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//CIAM Managed_DAC_01_25_21.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//SemiAuto-IT-Roles.csv";
  
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_MAC-IT-Roles.csv";

  // String csvFileName ="//home//iqadmin//Data//NNTestITRoles.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
    //return lineHash;
      System.out.println(" Before calling buildRole: " );
      validateRole (lineHash);
  // validateBusinessRole(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1614949801772" id="0a111e5877c41910817802825f2c2caa" language="beanshell" modified="1617886785549" name="CF-RoleSensitivity-CommonLibrary">
    <Source>
  import sailpoint.object.Custom;
  import sailpoint.object.Attributes;
  import sailpoint.object.Bundle;
  import java.util.List;
  import java.util.ArrayList;
  import sailpoint.api.SailPointContext;
  import sailpoint.tools.GeneralException;
  import java.util.Set;
  import sailpoint.object.Application;


  public List getRoleSensitivityStatus(List selectedRole)
  {


    String rolesensitivityValue = null;
    List finalListOfRoles = new ArrayList();
    List listRoleSensitivityAttributes = null;
    Bundle roleObject = null;
    for(String selectedRoleFromList : selectedRole)
    {
      try {
        roleObject = context.getObjectByName(Bundle.class, selectedRoleFromList);
      } catch (GeneralException e) {

        e.printStackTrace();
      }
      rolesensitivityValue =  (String) roleObject.getAttribute("roleSensitivity");
      Custom customObject = context.getObjectByName(Custom.class,"CF-RoleSesitivityValues-Attributes");
      listRoleSensitivityAttributes = customObject.getList("roleSensitivityValues");
      if(listRoleSensitivityAttributes.contains(rolesensitivityValue))
        finalListOfRoles.add(selectedRoleFromList);

    /* else
        finalListOfRoles.add(selectedRoleFromList);*/

    }
    return finalListOfRoles;
  }

  </Source>
  </Rule>
  <Rule created="1615146170257" id="0a111e5877c4191081780e36b7915a99" language="beanshell" modified="1615241633956" name="CF-ITRoleApprovalAttachment-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
import java.util.List;
import java.util.HashMap;
import sailpoint.tools.Util;
import sailpoint.object.Attributes;

import java.util.Map;
import sailpoint.object.Application;
import sailpoint.object.Bundle;
import sailpoint.object.Custom;
import sailpoint.object.Classification;
import sailpoint.object.ObjectClassification;
import sailpoint.object.Identity;
import sailpoint.object.IdentitySelector;
import sailpoint.object.IdentitySelector.MatchExpression;
import sailpoint.object.IdentitySelector.MatchTerm;
import sailpoint.object.IdentitySelector.MatchTerm.Type;
import sailpoint.object.Link;
import sailpoint.object.Profile;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.Schema;
import sailpoint.tools.RFC4180LineIterator;
import sailpoint.tools.RFC4180LineParser;


//Getting the attribute values from assignement rule
      public void updateAttribute(Bundle role,String columnName,String attribute){
    System.out.println(" *** inside update Attribute");
    ////System.out.println(" role "+role);
    //System.out.println(" *** columnName "+columnName);
    //System.out.println(" *** attribute "+attribute);
    
    if(role.getAttribute(columnName)!=null){
     // System.out.println(" *** inside if lop "+role.getAttribute(columnName));
String attributeValue=role.getAttribute(columnName);
ArrayList attributeValueList = new ArrayList(Arrays.asList(attributeValue.split(",")));
     // System.out.println(" *** list "+attributeValueList);
if(attributeValueList!= null &amp;&amp; attributeValueList.size()>0){
if(!(attributeValueList.contains(attribute))){
// System.out.println(" *** inside inner if loop "+attributeValue);
attributeValue = attributeValue+","+attribute;
  role.setAttribute(columnName,attributeValue);
}

}
}
else{
 // System.out.println(" *** inside else loop "+attribute);
role.setAttribute(columnName, attribute);
}
    
  }
public List getMatchTerms(Bundle bundle){
List valuesList = new ArrayList();
if(null != bundle){
if( null != bundle.getSelector()){
IdentitySelector selector = bundle.getSelector();
MatchExpression matchExpression = selector.getMatchExpression();

List terms = matchExpression.getTerms();
return terms;

}

}
}
// Routine that takes a key/value hash of role data and builds it into roles
// in IdentityIQ.
public void buildRole (HashMap roleHash) {
System.out.println(" key Values Map "+roleHash);

String strBZAssignType = (String) roleHash.get("BZ_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("BZ_ASSIGNMENT_TYPE") : "";
String strSRAssignType = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
String strCatagory = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
String strCiamAppID = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
String strCiamAppName = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
String strCiamRoleID = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
String strCiamBusinessRoleName = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

// String strCiamBusinessITRoleName = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
String strCartRoleID = (String) roleHash.get("CART Role ID") != null ? (String) roleHash.get("CART Role ID") : "";

String strCartAppID = (String) roleHash.get("CART Applciation ID") != null ? (String) roleHash.get("CART Applciation ID") : "";
String strCartAppName = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name") : "";
String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ? (String) roleHash.get("Role Provision Type") : "";
String strManualProvisionType = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team") : "";
String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)") : "";
String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ? (String) roleHash.get("Role Sensitivity"): "";
String strAction = (String) roleHash.get("Action") != null ? (String) roleHash.get("Action"): "";
// String strAssignment = (String) roleHash.get("Assignment") != null ? (String) roleHash.get("Assignment"): "";
String strAssignment = (String) roleHash.get("Assignment Type") != null ? (String) roleHash.get("Assignment Type"): "";
String strRoleName = (String) roleHash.get("Business Role Name") != null ? (String) roleHash.get("Business Role Name"): "";
String strRoleOwner = (String) roleHash.get("Business Role Owner") != null ? (String) roleHash.get("Business Role Owner"): "";
String strRoleDesc = (String) roleHash.get("Role Description") != null ? (String) roleHash.get("Role Description") : "";
String subRoles = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name"): "";
String checkAssignment = (String) roleHash.get("Check Assignment") != null ? (String) roleHash.get("Check Assignment"): "";
String strBussinessUnit = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
String strDeptCode = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
String strJobCode = (String) roleHash.get("JOB_CD (Job Code)") != null ? (String) roleHash.get("JOB_CD (Job Code)") : "";
String strEeoCode = (String) roleHash.get("EEO_CD (EEO Code)") != null ? (String) roleHash.get("EEO_CD (EEO Code)") : "";
String strCompanyCode = (String) roleHash.get("CO_CD (Company Code)") != null ? (String) roleHash.get("CO_CD (Company Code)") : "";
String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ? (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
String strCostCenter = (String) roleHash.get("COST_CENTER (Cost Center)") != null ? (String) roleHash.get("COST_CENTER (Cost Center)") : "";
String strMgrPositionNumber = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ? (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
String strPositionNumber = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
String strLocationCode = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ? (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
String strSupplierName = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ? (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
String strNofApprovals = (String) roleHash.get("Number of Approvals") != null ? (String) roleHash.get("Number of Approvals") : "";
String strApproval1 = (String) roleHash.get("Approval 1") != null ? (String) roleHash.get("Approval 1") : "";
String strApproval2 = (String) roleHash.get("Approval 2") != null ? (String) roleHash.get("Approval 2") : "";
String strApproval3 = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3") : "";
String strApproval4 = (String) roleHash.get("Approval 4") != null ? (String) roleHash.get("Approval 4") : "";
String strApproval5 = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
String strApproval6 = (String) roleHash.get("Approval 6") != null ? (String) roleHash.get("Approval 6"): "";
String strApproval7 = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
String strApproval8 = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
String strApproval9 = (String) roleHash.get("Approval 9") != null ? (String) roleHash.get("Approval 9"): "";
String classificationName = "BirthRight";

//String classificationName = (String) roleHash.get("Classification");
// String isRequestable = (String) roleHash.get("Requestable Role");

// boolean isRequestable = (Boolean) roleHash.get("Requestable Role");
//String assignRule = (String) roleHash.get("AssignmentRule");
//String costCentre = (String) roleHash.get("costcenter");
//String jobCode = (String) roleHash.get("jobcode");


System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);
System.out.println("Role Name: '" + strRoleName);

try{
Bundle role = context.getObject(Bundle.class, strCiamBusinessRoleName);
if (null == role) {
System.out.println(" - role does not exist, creating new: " + roleName);
//role = new sailpoint.object.Bundle();
}
if(Util.isNotNullOrEmpty(strCiamBusinessRoleName)) {
//role.setName(strCiamBusinessRoleName);
//role.setDisplayName(strCiamBusinessRoleName);
//role.setType("business");
role.setAttribute("category", strCatagory);
//role.setAttribute("ciamApplicationID", strCiamAppID);
role.setAttribute("ciamApplicationName", strCiamAppName);
//role.setAttribute("ciamBusinessRoleId", strCiamRoleID);// ciam role ID
//role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
//role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
role.setAttribute("cartRoleId", strCartRoleID);
updateAttribute(role,"cartApplicationId", strCartAppID);
        updateAttribute(role,"cartApplicationName", strCartAppName);
role.setAttribute("roleProvisionType", strRoleProvisionType);
role.setAttribute("manualProvisionTeam", strManualProvisionType);
role.setAttribute("roleSensitivity", strRoleSensitivity);
role.setAttribute("action", strAction);

  //role.setAttribute("assignment", strAssignment);
  
  //For Disconnected applicaiton
  role.setAttribute("assignment", "Discretionary");
  role.setAttribute("assignment_condition", "employeetype:ASSOCIATE||employeetype:CONTRACTOR");

updateAttribute(role,"userType", strUserType);
role.setAttribute("noofapprovals", strNofApprovals);
role.setAttribute("approval1", strApproval1);
role.setAttribute("approval2", strApproval2);
role.setAttribute("approval3", strApproval3);
role.setAttribute("approval4", strApproval4);
role.setAttribute("approval5", strApproval5);
role.setAttribute("approval6", strApproval6);
role.setAttribute("approval7", strApproval7);
role.setAttribute("approval8", strApproval8);
role.setAttribute("approval9", strApproval9);
}
if(Util.isNotNullOrEmpty(strRoleDesc)) {
Map descMap = new HashMap();
descMap.put("en_US", strRoleDesc);
role.setDescriptions(descMap);
}

 

Identity ownerId = context.getObject(Identity.class, strRoleOwner);
if (null == ownerId) {
System.out.println(" - WARNING: Could not find owner [" + strRoleOwner + "] using 'spadmin' instead.");
ownerId = context.getObject(Identity.class, "spadmin");
}
role.setOwner(ownerId);
  
      String sensitiveClassificationName = "Sensitive";
    
    
    if(Util.isNotNullOrEmpty(strRoleSensitivity)&amp;&amp; (!"0".equals(strRoleSensitivity)) ) {
List classificList = new ArrayList();
 System.out.println(" *** inside sensitive  loop "+strRoleSensitivity);
ObjectClassification objClassific = new ObjectClassification();
objClassific.setOwnerType("Bundle");
objClassific.setSource("UI");
Classification classification = context.getObjectByName(Classification.class, sensitiveClassificationName);
if(classification != null) {

objClassific.setClassification(classification);
classificList.add(objClassific);
role.setClassifications(classificList);
}
else
{
classification = new Classification();
classification.setName(sensitiveClassificationName);
classification.setDisplayName(sensitiveClassificationName);
classification.setOrigin("MyIndependentDataSource");
Map descMap = new HashMap();
descMap.put("en_US", "This access contains sensitive information");
classification.setDescriptions(descMap);
context.saveObject(classification);
context.commitTransaction();
objClassific.setClassification(classification);
classificList.add(objClassific);
role.setClassifications(classificList);

}

 

}


// Convert the sub-roles list into a java.util.List object.
/* RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
List subRolesList = subRolePaser.parseLine(subRoles);

System.out.println("subRolesList: " + subRolesList);
// Add the required IT roles for this business role.
if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
for (String subRoleName : subRolesList) { */


// }
// }
context.saveObject(role);
context.commitTransaction();
  context.decache();

return;
} catch(Exception e){
System.out.println("Inside Catch Block Exception is "+e);
// Map map = new HashMap();
// Attributes attrs = new Attributes();
Custom customObj = context.getObjectByName(Custom.class,"ITBusiness-MissingRole");
if(customObj == null){
customObj = new Custom();
customObj.setName("ITBusiness-MissingRole");
customObj.put(strCiamRoleID, strCiamBusinessRoleName);

}
else{
customObj.put(strCiamRoleID, strCiamBusinessRoleName);
}

 

// attrs.setMap(map);
// customObj.setAttributes(attrs);

context.saveObject(customObj);
context.commitTransaction();

return;
}
}

// What delimiter do we want to use in the CSV file.
String dlm = ",";

//String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
//String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//BusinessRoleTest.csv";
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//DACMAC_DummyITEntries.csv";
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//BusinessRoleMissingITRoleMapping_retry.csv";
  
  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//SemiAutoApps_BusinessRoles_Missing_Update.csv";
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//Test.csv";


//return csvFileName;

File testFile = new File(csvFileName);
if ((!testFile.exists()) || (testFile.isDirectory())) {
System.out.println("Unable to find file: " + csvFileName);
return;
}

System.out.println("Importing Roles from: '" + csvFileName + "' ...");
//return csvFileName;
// Open the CSV file for reading.
BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

RFC4180LineParser parser = new RFC4180LineParser(dlm);
System.out.println(" After RFC418 ");
int lineCounter = 0;
ArrayList headerStrings = new ArrayList();
String thisLine = null;
System.out.println(" Before while ");
while (null != (thisLine = fileIn.readLine())) {
System.out.println("Inside while ");

List tokens = parser.parseLine(thisLine);
System.out.println(" tokens: " + tokens);

if (lineCounter == 0) {
System.out.println(" Inside IF condition: ");
// Header Line.
// Assign indexes to each position.
for (int i=0; i &lt; tokens.size(); i++) {
headerStrings.add(tokens.get(i).trim());
}
} else {
// Data Line. Read the data elements out.
HashMap lineHash = new HashMap();
System.out.println(" Inside else condition: ");
for (int i=0; i &lt; tokens.size(); i++) {
String headerString = headerStrings.get(i);
String valueString = tokens.get(i);
if (null != valueString) { valueString = valueString.trim(); }
System.out.println ("header " + headerString + " == " + valueString);
lineHash.put(headerString, valueString);
}
System.out.println(" Before calling buildRole: " );
//return lineHash;
buildRole(lineHash);
System.out.println(" After calling buildRole: " );

}

lineCounter++;

// Don't let objects accrue in memory, flush them out every so often.
if ((lineCounter % 20) == 0) { context.decache(); }

}

fileIn.close();

System.out.println("Role import Complete.");

return "Success";
  </Source>
  </Rule>
  <Rule created="1615151250481" id="0a111e5877c4191081780e843c316098" language="beanshell" modified="1615152140617" name="BulkImport-SemiITROle-Rule" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entitlementName = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
        role.setName(strCiamITRoleName);
        role.setDisplayName(strCiamITRoleName);
        role.setType("it");
        //role.setAttribute("ciamApplicationID", strCiamAppID);
        //role.setAttribute("ciamApplicationName", strCiamAppName);
        //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
        //role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        //role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
        //role.setAttribute("ciamITRoleId", strCiamITRoleID);
        // unused attributes
        //role.setAttribute("cartRoleId", strCartRoleID);
        //role.setAttribute("cartApplicationId", strCartAppID);
        //role.setAttribute("cartApplicationName", strCartAppName);
        //role.setAttribute("roleProvisionType", strRoleProvisionType);
        //role.setAttribute("manualProvisionTeam", strManualProvisionType);
        //role.setAttribute("roleSensitivity", strRoleSensitivity);
        //role.setAttribute("userType", strUserType);
        //role.setAttribute("noofapprovals", strNofApprovals);
        //role.setAttribute("approval1", strApproval1);
        //role.setAttribute("approval2", strApproval2);
        //role.setAttribute("approval3", strApproval3);
        //role.setAttribute("approval4", strApproval4);
        //role.setAttribute("approval5", strApproval5);
        //role.setAttribute("approval6", strApproval6);
        //role.setAttribute("approval7", strApproval7);
        //role.setAttribute("approval8", strApproval8);
        //role.setAttribute("approval9", strApproval9);
      }


     /* if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }*/

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
       // if (null =! appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          if(appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
            Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");
            Filter maFilter= Filter.and(Filter.eq("value",entitlementName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entitlementName);
              ma.setValue(entitlementName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();

            } // 
          //  appObj = ciamAppObj;
            //  return;		
          }

        //}
      }
//if(appName.equalsIgnoreCase("Active Directory")|| appName.equalsIgnoreCase("BizAppAD")||appName.equalsIgnoreCase("ISAM LDAP")||appName.equalsIgnoreCase("CIAM-ROLE SYNC-Vault")){
      
      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


   
      // Build the filterString for entitlements matching this IT role.
      List entitlements = new ArrayList();
      entitlements.add(entitlementName);
      String comma = "";
      String filterString = attrName + ".containsAll({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null &amp;&amp; !role.getProfiles().isEmpty()){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();
        int size = profiles.size();
         System.out.println("Inside create IT Role Method profiles size is "+size);
		int count = 0;
   boolean isCreateProfile =  false;
        for (Profile prof : profiles) {
         
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();
 							count = count + 1;
            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              System.out.println("Inside iff Application name is same");
              List existingEntList = new ArrayList();
              List constraints = prof.getConstraints();
            
              // System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              for (Filter filterNew : constraints) {
                if(filterNew instanceof Filter.LeafFilter){
                  System.out.println("Inside create IT Role Method 444444444444444444");

                  //	filter.getExpression();
                  Object objValue = ((Filter.LeafFilter) filterNew).getValue();
                  if(objValue instanceof String){
                    existingEntList.add((String)objValue);
                  }
                  if(objValue instanceof List){
                    existingEntList.addAll((Collection) objValue);
                  }
                  if(null !=existingEntList &amp;&amp; existingEntList.size() > 0){ 
                    System.out.println("Inside create IT Role Method 555555555555555555555 Existing Ent lIst "+existingEntList);
                    System.out.println("Inside create IT Role Method New ENtilement "+entitlementName);

                    for(String oldEnt : existingEntList){
                      if(oldEnt.trim().equalsIgnoreCase(entitlementName.trim())){
                        System.out.println("Inside create IT Role Method Existing Entitlement and new Entitlement is same so returing ");
                        return;
                      }
                    }
                  }
                  System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
                }

              }
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            } 
            else{
              if(size == count &amp;&amp; !profileObj.getName().equalsIgnoreCase(appObj.getName())){
					   System.out.println("Inside if count and profile size are same creatting new profile ===");
					 
              isCreateProfile = true;
              break;
				  }
            }

          } // prfile null check closing 

        } // 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        if(isCreateProfile){
        Profile profilee = new Profile();
        //profilee.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profilee.setApplication(appObj);
        profilee.addConstraint(filter);
       // profilee.setConstraints(filterList);
        role.add(profilee);
        System.out.println("Inside create IT Role Method Added entitlement to same profile");
        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 8888888888888888");
        Profile profile = new Profile();
        //profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
       profile.addConstraint(filter);
        //profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 999999999999999999999");

      }
//}
      // System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"Missing-IT-Roles");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-IT-Roles");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_DAC-IT-Roles.csv";
 //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SPManagedMissingITRoles.csv";
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_DAC-IT-Roles.csv";
//  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAM_Managed_MAC-IT-Roles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//SP_Managed_MAC-IT-Roles.csv";
  
  
 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//CIAMRoleSync_ITRoles.csv";
  //String csvFileName ="//home//iqadmin//Data//BulkRoleImport//missingITRoles_retry.csv";
  
  
  
  
  
  
//String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles-SameTarget.csv";
   String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Rnew//SemiAuto-IT-Roles_Update.csv";

  // String csvFileName ="//home//iqadmin//Data//NNTestITRoles.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
   // return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1616573661497" id="0a111e58786117a98178634c81390538" language="beanshell" modified="1616580839682" name="CF-ManagerDN-ISAMLDAP-Rule" type="FieldValue">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="Object"/>
    <Source>
	import sailpoint.object.Identity;
	import sailpoint.object.Application;
	import sailpoint.api.IdentityService;
	import java.util.List;
	import sailpoint.object.*;
  import org.apache.log4j.Logger;
if(null !=identity){
	try{
		String managerDN=null;

		Application isamLdapApp = context.getObjectByName(Application.class,STR_ISAM_LDAP);
		IdentityService identityServ=new IdentityService(context);
		if(null != identity.getManager()){
			Identity managerObj=identity.getManager();
			//logger.debug("Getting Manager Object from the Identity");
      System.out.println("Getting Manager Object from the Identity");
			List isamLdapLinks=identityServ.getLinks(managerObj,isamLdapApp);
			if(null != isamLdapLinks){
				Link isamLdapLink=isamLdapLinks.get(0);
				//logger.debug("Getting the manager DN from ISAM LDAP link");
        System.out.println("Getting the manager DN from ISAM LDAP link*************ISAM LDAP Link*******************");
				managerDN=isamLdapLink.getNativeIdentity();
				return managerDN;
			}

		}

	}
	catch(Exception e){
	//logger.error("got the error in manager update rule");
	//logger.error(e);
	}
}


</Source>
  </Rule>
  <Rule created="1616671148037" id="0a111e5878681dfc8178691c08050233" language="beanshell" modified="1616683942348" name="CF-Update-EmployeeType" type="IdentityAttribute">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import org.apache.log4j.Logger;
  import sailpoint.tools.Util;
import org.apache.log4j.Logger;
import java.text.*;
import java.util.Calendar;
  import java.util.Date;
  import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
  import java.time.temporal.ChronoUnit;
  
//Logger log = Logger.getLogger("com.carefirst.UpdateDirectorRule");
  
  //log.info("identity value = "+identity);
  System.out.println("identity value = "+identity);
  System.out.println("********identity old value = "+oldValue);
  System.out.println("********identity attribute source = "+attributeSource);
  try{
 
  if(null != identity){
	 //String strAction = newIdentity.getAttribute(ATR_ACTION) != null ? newIdentity.getAttribute(ATR_ACTION) : "";
   String effDate = identity.getAttribute("effdt") != null ? identity.getAttribute("effdt") : "";
   String strAction = identity.getAttribute(ATR_ACTION) != null ? identity.getAttribute(ATR_ACTION) : ""; 
   //log.info("Starting Carefirst Update Company Rule Action is "+effDate);
    System.out.println("********identity Action = "+strAction);
	 if(identity != null &amp;&amp;  Util.isNotNullOrEmpty(effDate)) {
             
	Date actDate = new SimpleDateFormat("dd-MMM-yy").parse(effDate);
   	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-dd-MM");
	System.out.println("************Effective Date***********"+sdf1.format(actDate));
    Date date = new Date(System.currentTimeMillis());
	System.out.println("************Effective Date***********"+sdf1.format(date));
    if(sdf1.format(date).compareTo(sdf1.format(actDate))>=0){
		
      String empType = link.getAttribute("PER_ORG");
      System.out.println("************attributeValue***********"+empType);
      if(empType!=null){
      System.out.println("************attributeValue***********"+empType);
      return empType;
      }
	}
	else{
		/*String employeetype = identity.getAttribute("employeetype");
		System.out.println("************Inside else Company is empty***********");
    //identity.setAttribute("employeetype",employeetype);
    System.out.println("************attributeValue***********"+employeetype);
		//context.saveObject(employeetype);
		//context.commitTransaction();
    return employeetype;*/
    if(oldValue == null){
    	String empType = link.getAttribute("PER_ORG");
      System.out.println("************attributeValue***********"+empType);
      if(empType!=null){
      System.out.println("************attributeValue***********"+empType);
      return empType;
      }
	}
    else{
        //String empType = identity.getAttribute("employeetype");
      System.out.println("************oldValue in else***********"+oldValue);
				return oldValue;
      }
	}
	}
    /*else{
      String empType = link.getAttribute("PER_ORG");
      System.out.println("************attributeValue***********"+empType);
      if(empType!=null){
      System.out.println("************attributeValue***********"+empType);
      return empType;
    }*/
	}
  } 
	catch(Exception e){
	}</Source>
  </Rule>
  <Rule created="1616810686756" id="0a111e58786b1f658178716d3924355b" language="beanshell" modified="1616876000445" name="CF-ADExtensionAttributeUpdated-TargetMapping-Rule" type="IdentityAttributeTarget">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>
	import sailpoint.object.*;
	String comp = identity.getAttribute("company");
	String email = identity.getAttribute("email");

	if(comp != null @and comp.length() > 0)
	{  
	if(comp.toLowerCase().equals("tru"))
	{
	if(email.toLowerCase().indexOf("carefirstchpdc.com")>0)
	{
	return "CHPDC";
	}
	}
	}


	if(comp != null @and comp.length() > 0){
	   if((comp.toLowerCase().equals("ncs"))@or(comp.toLowerCase().equals("wil"))){
		 if(email != null @and email.length() > 0){
		  if(email.toLowerCase().indexOf("cfablue.com")>0 @or email.toLowerCase().indexOf("healthworx.com")>0 @or email.toLowerCase().indexOf("carefirstchpdc.com")>0){
				  return "cfablue";
				  }
				  else{
				  return "NCAS";
				  }
		  }
				  }
	 else if(comp.toLowerCase().equals("cco")){
				  return "CCO"; }
	 }
  </Source>
  </Rule>
  <Rule created="1616828901363" id="0a111e58786b1f658178728327f3393c" language="beanshell" modified="1616829111154" name="CF-ADAfterProvisioning-Rule" type="AfterProvisioning">
    <Description>ADAfterProvisioningRule</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
import sailpoint.object.Rule;
import java.util.HashMap;

System.out.println("^^^^^ Starting CF-ADAfterProvisioning-Rule rule ^^^^");

Logger loggerObj = Logger.getLogger("com.carefirst.ADAccountActivation");
loggerObj.info("Starting After Provisiioning Rule");
System.out.println("Starting After Provisiioning Rule");
if (plan != null) {
    AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
    loggerObj.info("|||||accountRequest ::::" + accountRequest);

	System.out.println("*** Inside CF-ADAfterProvisioning-Rule rule, inside first if block ****");

    Operation operation = accountRequest.getOperation();
    loggerObj.info("|||||accountRequest operation::::" + operation);
    loggerObj.info("|||||Boolean operation::::" + operation.equals(Operation.Create));

    if (null != operation &amp;&amp; (operation.equals(Operation.Create))){

		System.out.println("*** Inside CF-ADAfterProvisioning-Rule rule, inside second if block ****");
 
		String identityName = plan.getNativeIdentity();
        loggerObj.info("Inside CF-ADAfterProvisioning-Rule identityName :" + identityName);
        Identity identity = context.getObjectByName(Identity.class, identityName);
        loggerObj.info("Inside LDAP AP rule identity :" + identity);

        String userId = identity.getAttribute("userid");
        loggerObj.info("uid:::" + userId);
		
		System.out.println("*** Inside CF-ADAfterProvisioning-Rule rule, userId = "+userId);
		
		Rule ruleForRunningPSCommandsOnAD = context.getObject(Rule.class,"CF-ADRunUserPSCommands-Rule");
		HashMap ruleParam = new HashMap();
		ruleParam.put("userId",userId);		

		context.runRule(ruleForRunningPSCommandsOnAD ,ruleParam);
		
		System.out.println("#### Exiting CF-ADAfterProvisioning-Rule rule ####");
		
	}
}
</Source>
  </Rule>
  <Rule created="1616829132755" id="0a111e58786b1f6581787286afd3394a" language="beanshell" modified="1616831545886" name="CF-ADRunUserPSCommands-Rule" type="ConnectorAfterCreate">
    <Signature returnType="Map">
      <Inputs>
        <Argument name="userId">
          <Description>
		Network ID of the user.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;

	System.out.println("^^^^^ Starting CF-ADRunUserPSCommands-Rule rule ^^^^");

   String strADAppName = "Active Directory";

  //Identity identity = context.getObjectByName(Identity.class,"390484");

  //if(identity != null){
  Application appObj = context.getObjectByName(Application.class, strADAppName);

  AccountRequest accountRequest = new AccountRequest();
  accountRequest.setApplication("Active Directory");
  //accountRequest.setNativeIdentity("390484");
  accountRequest.setOperation(AccountRequest.Operation.Modify); 
  accountRequest.add(new AttributeRequest("sAMAccountName",ProvisioningPlan.Operation.Set,userId));

  System.out.println("*** Inside CF-ADRunUserPSCommands-Rule rule, accountRequest = "+accountRequest.toXml());

  Map data = new HashMap();

  Rule ruleObj = context.getObjectByName(Rule.class,"CF-ADUserPermissionsPSCommands-Rule");

  data.put("postScript",ruleObj);
  data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  
  String IQServiceServer = "SV-SPIDSVC-T3.carefirsttest.com";
  int IQServicePort = 5051;
  
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
  RpcResponse response = service.execute(request); 
  
  System.out.println("#### Exiting CF-ADRunUserPSCommands-Rule rule ####");
  
  //}
  </Source>
  </Rule>
  <Rule created="1616829143600" id="0a111e58786b1f6581787286da30394c" language="beanshell" modified="1616833036168" name="CF-ADUserPermissionsPSCommands-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>  
  Add-type -path E:\IQService\utils.dll

    try{

	ECHO "**** Inside CF-ADUserPermissionsPSCommands-Rule, User: " +$samAccountName  |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

      $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
      $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
      $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);

        foreach ($attribute in $requestObject.AttributeRequests){
          if($attribute.Name -eq "sAMAccountName"){
            [string]$samAccountName = $attribute.Value
          }

        }

Set-ADUser -Identity $samAccountName -PasswordNeverExpires $false
ECHO "**** Set PasswordNeverExpires to false" |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

Set-ADUser -Identity $samAccountName -TrustedForDelegation $true
ECHO "**** Set TrustedForDelegation to false" |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

Set-ADUser -Identity $samAccountName -AllowReversiblePasswordEncryption $false
ECHO "**** Set AllowReversiblePasswordEncryption to false" |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

Set-ADuser -Identity $samAccountName -SmartcardLogonRequired $true
ECHO "**** Set SmartcardLogonRequired to false" |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

Set-ADUser -Identity $samAccountName -ChangePasswordAtLogon $true
ECHO "**** Set ChangePasswordAtLogon to false" |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

Set-ADuser -Identity $samAccountName -replace @{msnpallowdialin=$true}
ECHO "**** Set msnpallowdialin to false" |Add-Content -path E:\Test\CF-ADUserPermissionsPSCommands-Logs.txt -FORCE

  }


  catch{
    ECHO "Error:" $_.exception.message|Add-Content -path E:\Test\CF-ADUserPermissionsPSCommandsErrors-Logs.txt -FORCE
  }

  </Source>
  </Rule>
  <Rule created="1616832316163" id="0a111e58786b1f65817872b7430339de" language="beanshell" modified="1616855872631" name="CF-BizappADUserPermissionsPSCommands-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>  
  Add-type -path E:\IQService\IQService\utils.dll

    try{

	ECHO "**** Inside CF-BizappADUserPermissionsPSCommands-Rule **** " |Add-Content -path E:\Test\CF-BizappADUserPermissionsPSCommands-Logs.txt -FORCE

      $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
      $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
    #  $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);

     #   foreach ($attribute in $requestObject.AttributeRequests){
      #    if($attribute.Name -eq "sAMAccountName"){
       #     [string]$samAccountName = $attribute.Value
        #  }

      #  }

# Set-ADuser -Identity $samAccountName -CannotChangePassword $true
ECHO "**** CannotChangePassword has been set on BizappAD to true for user: "+$samAccountName |Add-Content -path E:\Test\CF-BizappADUserPermissionsPSCommands-Logs.txt -FORCE

  }


  catch{
    ECHO "Error:" $_.exception.message|Add-Content -path E:\Test\CF-BizappADUserPermissionsPSCommandsErrors-Logs.txt -FORCE
  }

  </Source>
  </Rule>
  <Rule created="1616834131389" id="0a111e58786b1f65817872d2f5bd3a70" language="beanshell" modified="1616840732638" name="CF-BizappADRunUserPSCommands-Rule" type="ConnectorAfterCreate">
    <Signature returnType="Map">
      <Inputs>
        <Argument name="userId">
          <Description>
		Network ID of the user.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Rule;
  import sailpoint.object.RpcRequest;
  import sailpoint.object.RpcResponse;
  import sailpoint.connector.RPCService;

  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.*;

	System.out.println("^^^^^ Starting CF-BizappADRunUserPSCommands-Rule rule ^^^^");

   String strADAppName = "BizAppAD";

  
  //if(identity != null){
  Application appObj = context.getObjectByName(Application.class, strADAppName);

  AccountRequest accountRequest = new AccountRequest();
  accountRequest.setApplication("BizAppAD");  
  accountRequest.setOperation(AccountRequest.Operation.Modify); 
  accountRequest.add(new AttributeRequest("sAMAccountName",ProvisioningPlan.Operation.Set,userId));

  System.out.println("*** Inside CF-BizappADRunUserPSCommands-Rule rule, accountRequest = "+accountRequest.toXml());

  Map data = new HashMap();

  Rule ruleObj = context.getObjectByName(Rule.class,"CF-BizappADUserPermissionsPSCommands-Rule");

  data.put("postScript",ruleObj);
  data.put("Application", appObj.getAttributes());
  data.put("Request", accountRequest);
  
  String IQServiceServer = "SV-SPIDSVC-T2.bizappstest.local";
  int IQServicePort = 5050;
  
  RPCService service = new RPCService(IQServiceServer,IQServicePort);
  service.setConnectorServices(new sailpoint.connector.DefaultConnectorServices());
  RpcRequest request = new RpcRequest("ScriptExecutor","runAfterScript",data);
  RpcResponse response = service.execute(request); 
  
  System.out.println("#### Exiting CF-BizappADRunUserPSCommands-Rule rule ####");
  
  //}
  </Source>
  </Rule>
  <Rule created="1616834275656" id="0a111e58786b1f65817872d529483a76" language="beanshell" modified="1616841224460" name="CF-BizappADAfterProvisioning-Rule" type="AfterProvisioning">
    <Description>BizappADAfterProvisioningRule</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
import sailpoint.object.*;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Rule;
import java.util.HashMap;
import org.apache.log4j.Logger;

System.out.println("^^^^^ Starting CF-BizappADAfterProvisioning-Rule rule ^^^^");

Logger loggerObj = Logger.getLogger("com.carefirst.BizappADAccountActivation");
loggerObj.info("Starting After Provisiioning Rule");
System.out.println("Starting After Provisiioning Rule");
if (plan != null) {
    AccountRequest accountRequest = plan.getAccountRequest("BizAppAD");
  	
  	loggerObj.info("|||||plan ::::" + plan.toXml());
    loggerObj.info("|||||accountRequest ::::" + accountRequest);

	System.out.println("*** Inside CF-BizappADAfterProvisioning-Rule rule, inside first if block ****");

    Operation operation = accountRequest.getOperation();
    loggerObj.info("|||||accountRequest operation::::" + operation);
    loggerObj.info("|||||Boolean operation::::" + operation.equals(Operation.Create));

    if (null != operation &amp;&amp; (operation.equals(Operation.Create))){

		System.out.println("*** Inside CF-BizappADAfterProvisioning-Rule rule, inside second if block ****");
 
		String identityName = plan.getNativeIdentity();
        loggerObj.info("Inside CF-BizappADAfterProvisioning-Rule identityName :" + identityName);
        Identity identity = context.getObjectByName(Identity.class, identityName);
        loggerObj.info("Inside BizappAD rule identity :" + identity);

        String userId = identity.getAttribute("userid");
        loggerObj.info("uid:::" + userId);
		
		System.out.println("*** Inside CF-BizappADAfterProvisioning-Rule rule, userId = "+userId);
		
		Rule ruleForRunningPSCommandsOnAD = context.getObject(Rule.class,"CF-BizappADRunUserPSCommands-Rule");
		HashMap ruleParam = new HashMap();
		ruleParam.put("userId",userId);		

		context.runRule(ruleForRunningPSCommandsOnAD ,ruleParam);
		
		System.out.println("#### Exiting CF-BizappADAfterProvisioning-Rule rule ####");
		
	}
}
</Source>
  </Rule>
  <Rule created="1616842020483" id="0a111e58786b1f658178734b56833c32" language="beanshell" modified="1616843764217" name="TestRemoveRoles">
    <Description>Allows all objects to be selected (no filtering)</Description>
    <Signature returnType="sailpoint.object.Filter">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.QueryInfo;
  	import java.util.List;

import sailpoint.api.Provisioner;
import sailpoint.api.SailPointContext;
import sailpoint.object.Bundle;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.tools.GeneralException;
  import org.apache.log4j.Logger;


        Logger log = Logger.getLogger("com.test.removerole");
        String identityName = "390425";
        log.info("****** Start  of Remove Roles Step: "+identityName);
        
    ProvisioningPlan p = new ProvisioningPlan();
        Identity identity = context.getObjectByName(Identity.class, identityName);
        log.info("****** Start  of Remove Roles Step identity : "+identity);
		  p.setIdentity(identity);
		  AccountRequest adAccountReq = new AccountRequest();
		   adAccountReq.setApplication("IIQ");
		      adAccountReq.setNativeIdentity(identity.getName());
		  adAccountReq.setOperation(AccountRequest.Operation.Modify);
		  
		  
		    AttributeRequest attributeRequest = new AttributeRequest();

		        attributeRequest.setName(ProvisioningPlan.ATT_IIQ_ASSIGNED_ROLES);

		        attributeRequest.setOperation(ProvisioningPlan.Operation.Remove);

		        attributeRequest.setValue("Associate Biz Role");
		      adAccountReq.add(attributeRequest);
		  

		   p.add(adAccountReq);
		  Provisioner  prov = new Provisioner(context);
		  prov.compile(p);
		  prov.execute();
		  context.commitTransaction();
		  context.saveObject(identity);
         log.info("****** END of Remove Roles Step: "+identityName);
  
  return "Completed";


  </Source>
  </Rule>
  <Rule created="1616863749988" id="0a111e58786b1f6581787496e76446c5" language="beanshell" modified="1616863803910" name="CF-ADDisableForFepocUsers-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>
  
import sailpoint.object.*;
  
  String userActiveStatus = "512";
  String userDisableStatus = "514";

String company = identity.getAttribute(ATR_COMPANY);
  
if(company!=null &amp;&amp; company=="SBP"){
return userDisableStatus;
}
  
  else{
   return  userActiveStatus;
  }
  
  </Source>
  </Rule>
  <Rule created="1617902009706" id="0a111e5878b01b1c8178b2797d6a0437" language="beanshell" modified="1617902550352" name="CF-Workgroup-AddMember-Rule" type="Correlation">
    <Description>
    Import template-defined Workgroups from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.util.ArrayList;
  import java.util.HashMap;
  import sailpoint.object.*;

  
  public void buildWorkgroup (HashMap workgroupHash){
     // Creation of a WorkGroup and setting the owner
		System.out.println("Key Values Map "+workgroupHash);
		String groupName  = (String) workgroupHash.get("groupname");
		//String groupOwner  = (String) workgroupHash.get("groupowner");
		String people  = (String) workgroupHash.get("people");
		String [] groupMembers = people.split(",");
    List objects = new ArrayList();
    
    						Identity workGroupObj = context.getObjectByName(Identity.class,groupName);
    						
   // Add a workgroup to a user

        //Identity id1;
		for(int i=0; i &lt; groupMembers.length; i++){
      
      List objectsGroupMember = new ArrayList();
    
    	Filter useridFilter = Filter.eq("userid",groupMembers[i]);

      				if(useridFilter != null){

       				System.out.println("Filter is not null");

        			QueryOptions optionsGroupMember = new QueryOptions().addFilter(useridFilter);

        			if (optionsGroupMember != null){
          			objectsGroupMember = context.getObjects(Identity.class, optionsGroupMember);
          			System.out.println("objectsGroupMember"+objectsGroupMember);
          			if(objectsGroupMember.isEmpty()){
            					objectsGroupMember=null;
          				}
       	 			}
      			}
      if(objectsGroupMember!=null)
          {
      			for(Identity identity:objectsGroupMember)
  					{
				//Identity identityMember = context.getObjectByName(Identity.class,groupMembers[i]);
        identity.add(workGroupObj);
        context.saveObject(workGroupObj);
        context.commitTransaction();
            }
      }
		}
	}	
	
  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  
  String csvFileName ="//home//iqadmin//Data//WorkgroupAddMember.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  
  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Workgroups from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildWorkgroup: " );
      buildWorkgroup (lineHash);
      System.out.println(" After calling buildWorkgroup: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Workgroup import Complete.");

  return "Success";  
  </Source>
  </Rule>
  <Rule created="1617903044263" id="0a111e5878b01b1c8178b28946a7046c" language="beanshell" name="CF-Workgroup-RemoveMember-Rule" type="Correlation">
    <Description>
    Import template-defined Workgroups from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.util.ArrayList;
  import java.util.HashMap;
  import sailpoint.object.*;

  
  public void buildWorkgroup (HashMap workgroupHash){
     // Creation of a WorkGroup and setting the owner
		System.out.println("Key Values Map "+workgroupHash);
		String groupName  = (String) workgroupHash.get("groupname");
		//String groupOwner  = (String) workgroupHash.get("groupowner");
		String people  = (String) workgroupHash.get("people");
		String [] groupMembers = people.split(",");
    List objects = new ArrayList();
    
    						Identity workGroupObj = context.getObjectByName(Identity.class,groupName);
    
   // Add a workgroup to a user

        //Identity id1;
		for(int i=0; i &lt; groupMembers.length; i++){
      
      List objectsGroupMember = new ArrayList();
    
    	Filter useridFilter = Filter.eq("userid",groupMembers[i]);

      				if(useridFilter != null){

       				System.out.println("Filter is not null");

        			QueryOptions optionsGroupMember = new QueryOptions().addFilter(useridFilter);

        			if (optionsGroupMember != null){
          			objectsGroupMember = context.getObjects(Identity.class, optionsGroupMember);
          			System.out.println("objectsGroupMember"+objectsGroupMember);
          			if(objectsGroupMember.isEmpty()){
            					objectsGroupMember=null;
          				}
       	 			}
      			}
      if(objectsGroupMember!=null)
          {
      			for(Identity identity:objectsGroupMember)
  					{
				//Identity identityMember = context.getObjectByName(Identity.class,groupMembers[i]);
        identity.remove(workGroupObj);
        context.saveObject(workGroupObj);
        context.commitTransaction();
            }
      }
		}
	}	
	
  // What delimiter do we want to use in the CSV file.
  String dlm = ",";
  
  String csvFileName ="//home//iqadmin//Data//WorkgroupAddMember.csv";
  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  
  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Workgroups from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildWorkgroup: " );
      buildWorkgroup (lineHash);
      System.out.println(" After calling buildWorkgroup: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Workgroup import Complete.");

  return "Success";  
  </Source>
  </Rule>
  <Rule created="1617916806007" id="0a111e5878b01b1c8178b35b437705f6" language="beanshell" name="CF-JobTitleChange-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <Signature returnType="Object"/>
    <Source>import sailpoint.object.Identity;
import sailpoint.object.*;
if (null != identity) {
  try {
    String title = identity.getAttribute("jobtitle");
    System.out.println("Inside CF-ISAMTitleChange-Rule " + title);
    if(null != title){
        return title;
    } 
  } catch (Exception e) {
    //logger.error("got the error in manager update rule");
    //logger.error(e);
  }
}</Source>
  </Rule>
  <Rule created="1617918509281" id="0a111e5878b01b1c8178b37540e1062c" language="beanshell" name="CF-AdDisplayName-IdentityAttribute-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String"/>
    <Source>if (null != identity &amp;&amp; link != null) {
    try {
        String adDisplayName = link.getAttribute("displayName");
        return adDisplayName;

    } catch (Exception e) {
        System.out.println("Exception Occured: "  + e.printStackTrace());
    }
}</Source>
  </Rule>
  <Rule created="1617918521198" id="0a111e5878b01b1c8178b3756f6e062e" language="beanshell" name="CF-ADGivenNameChange-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <Signature returnType="Object"/>
    <Source>import sailpoint.object.*; 

String firstName = identity.getFirstname();
String prefName = identity.getAttribute("prefFirstName");
if( null != prefName){
    firstName=prefName;
} 
return firstName;
</Source>
  </Rule>
  <Rule created="1618257408681" id="0a111e5878b01b1c8178c7a872a92e6c" language="beanshell" modified="1618257430314" name="CF-AD-UserID-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
  String userid = identity.getAttribute(ATR_USERID);
  if(null != userid)
    return userid.toUpperCase();</Source>
  </Rule>
  <Rule created="1611570338709" id="0a111e59771a1ff681773913db933358" language="beanshell" modified="1611584353780" name="CF-LOADCIAMUsers-Rule">
    <Description>This rule is used to load user into CIAM table</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="count"/>
      </Returns>
    </Signature>
    <Source>
 import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.*;
import sailpoint.object.TaskDefinition;
import sailpoint.object.TaskResult;
 
     //return connection;

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  public dbInsert(HashMap m){
 String username = "identityiqdev";
    String password = "Identityiq123$";
    String url = "jdbc:sqlserver://sv-spidsql-d1.carefirst.com";
    Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
    Connection connection = DriverManager.getConnection(url, username, password);
  System.out.println("connection............................"+connection);
   PreparedStatement statement = null;
   //statement = connection.prepareStatement(sqlQuery);

    String sqlQuery = "INSERT INTO [identityiqdev].[CIAM_USERS](EMP_ID,USER_ID,firstname,lastname ,email,EMPLOYEE_TYPE ,alter_empid,middle_name,job_title ,department_id,job_code,manager,location,company,business_unit,cost_center,eeo_job_group,EMPLOYEE_STATUS,supplier_name,start_date,end_date) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    statement = connection.prepareStatement(sqlQuery);
    if(m.get("EMP_ID")!=null){
      statement.setString(1, m.get("EMP_ID"));
    }else {
      statement.setString(1, "");
    }
    if(m.get("USER_ID")!=null){
      statement.setString(2, m.get("USER_ID"));
    }else {
      statement.setString(2, "");
    }
    if(m.get("FRST_NM")!=null){
      statement.setString(3, m.get("FRST_NM"));
    }else {
      statement.setString(3, "");
    }
    if(m.get("LAST_NM")!=null){
      statement.setString(4, m.get("LAST_NM"));

    } else {
      statement.setString(4, "");

    }
    if(m.get("EMAL_ADDR")!=null){
      statement.setString(5, m.get("EMAL_ADDR"));
    }else {
      statement.setString(5, "");
    }
    if(m.get("EMPLOYEE_TYPE")!=null){
      statement.setString(6, m.get("EMPLOYEE_TYPE"));
    }else {
      statement.setString(6, "");
    }
    if(m.get("ALT_USER_ID")!=null){
      statement.setString(7, m.get("ALT_USER_ID"));
    }else {
      statement.setString(7, "");
    }
    if(m.get("MID_NM")!=null){
      statement.setString(8, m.get("MID_NM"));
    } else {
      statement.setString(8, "");
    }
    if(m.get("JOB_TITL")!=null){
      statement.setString(9, m.get("JOB_TITL"));
    }else {
      statement.setString(9, "");
    }
    if(m.get("department_id")!=null){
      statement.setString(10, m.get("department_id"));
    }else {
      statement.setString(10, "");
    }
    if(m.get("JOB_CD")!=null){
      statement.setString(11, m.get("JOB_CD"));
    }else {
      statement.setString(11, "");
    }

    if(m.get("MNGR_ID")!=null){
      statement.setString(12, m.get("MNGR_ID"));
    }else {
      statement.setString(12, "");
    }

     if(m.get("LOCN_CD")!=null){
      statement.setString(13, m.get("LOCN_CD"));
    }else {
      statement.setString(13, "");
    }
     if(m.get("CO_CD")!=null){
      statement.setString(14, m.get("CO_CD"));
    }else {
      statement.setString(14, "");
    }
 if(m.get("BU_CD")!=null){
      statement.setString(15, m.get("BU_CD"));
    }else {
      statement.setString(15, "");
    }
     
  if(m.get("CC")!=null){
      statement.setString(16, m.get("CC"));
    }else {
      statement.setString(16, "");
    }
if(m.get("EEO_CD")!=null){
      statement.setString(17, m.get("EEO_CD"));
    }else {
      statement.setString(17, "");
    }
    if(m.get("EMPLOYEE_STATUS")!=null){
      statement.setString(18, m.get("EMPLOYEE_STATUS"));
    }else {
      statement.setString(18, "");
    }
     if(m.get("SUPLR_NM")!=null){
      statement.setString(19, m.get("SUPLR_NM"));
    }else {
      statement.setString(19, "");
    }
if(m.get("IDNT_EFFT_DT")!=null){
      statement.setString(20, m.get("IDNT_EFFT_DT"));
    }else {
      statement.setString(20, "");
    }
    if(m.get("IDNT_EXPRN_DT")!=null){
      statement.setString(21, m.get("IDNT_EXPRN_DT"));
    }else {
      statement.setString(21, "");
    }


    statement.executeUpdate();



    statement.close();
      
  }
      

  String dlm = ",";

  //  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//TestCIAMUser.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  int userCount = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
		
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
       dbInsert(lineHash);
      userCount++;
      System.out.println(" Processing user number::: "+userCount);

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("taskResult:::."+taskResult);
  if(null != taskResult){
taskResult.setAttribute("count",userCount);
    context.saveObject(taskResult);
    context.commitTransaction();
  }
    System.out.println("User Count is:::"+userCount);


  //return "Success";
  //return "Success";


  </Source>
  </Rule>
  <Rule created="1617208098016" id="0a111e59785910ec8178891d3cde6bff" language="beanshell" modified="1617208412365" name="TestRule_Abhijit">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Source>
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  import sailpoint.object.Identity;

  //Logger mylogger = Logger.getLogger("com.carefirst.loggers");
  System.out.println("Starting IdentityAttribute Rule");
Identity identity = context.getObjectByName(Identity.class, "390112");

  System.out.println("**** Entering CF-IdentityAttributeInactive-Rule ****");

  if(identity != null){
    System.out.println("Starting IdentityAttribute Rule inside if Identity");

    System.out.println("Inside CF-IdentityAttributeInactive-Rule, user = "+identity.getAttribute("userid"));

    Date endDate = null;
    Date startDate = null;
    Date termDate = null;
    Date todayDate = new Date();
    String strAction = identity.getAttribute(ATR_ACTION) != null ? identity.getAttribute(ATR_ACTION) : "";
    System.out.println("IdentityAttributeInactive Rule strAction "+strAction);
    String strDate = identity.getAttribute(ATR_ENDDATE) != null ? identity.getAttribute(ATR_ENDDATE) : "";
    System.out.println("IdentityAttributeInactive Rule strDate "+strDate);
    //String strStartDate = identity.getAttribute(ATR_STARTDATE) != null ? identity.getAttribute(ATR_STARTDATE) : "";
    
    String strStartDate = identity.getAttribute(ATR_HIREDATE) != null ? identity.getAttribute(ATR_HIREDATE) : "";
    
    System.out.println("IdentityAttributeInactive Rule strDate "+strStartDate);
    String termDateString = identity.getAttribute("termdate") != null ? identity.getAttribute("termdate") : "";
    System.out.println("IdentityAttributeInactive Rule termDateString "+termDateString);
    if(Util.isNotNullOrEmpty(strDate)){
      SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
      endDate = formatter.parse(strDate);
    }
    if(Util.isNotNullOrEmpty(strStartDate)){
      SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
      startDate = formatter.parse(strStartDate);
    }
    if(Util.isNotNullOrEmpty(termDateString)){
      SimpleDateFormat formatter=new SimpleDateFormat(STR_DATE_FORMAT);
      termDate = formatter.parse(termDateString);
    }
    System.out.println("IdentityAttributeInactive Rule endDate "+strDate);
    System.out.println("IdentityAttributeInactive Rule todayDate "+todayDate);	

    System.out.println("Inside CF-IdentityAttributeInactive-Rule, startDate = "+strStartDate+termDate);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule, strDate = "+strDate);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule, todayDate = "+todayDate);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule, strAction = "+strAction);
    System.out.println("Inside CF-IdentityAttributeInactive-Rule,, is strAction notnull or empty = "+Util.isNotNullOrEmpty(strAction));
    System.out.println("...................................");
    if(endDate != null &amp;&amp; todayDate != null &amp;&amp; Util.isNotNullOrEmpty(strAction) &amp;&amp; todayDate.compareTo(endDate) > 0 &amp;&amp;((STR_ACTION_TER.equalsIgnoreCase(strAction))|| (STR_ACTION_COM.equalsIgnoreCase(strAction))|| (STR_ACTION_TWP.equalsIgnoreCase(strAction))|| (STR_ACTION_RET.equalsIgnoreCase(strAction))|| (STR_ACTION_RWP.equalsIgnoreCase(strAction))) ){
      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside third if block. End date is less than today date. ");

      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside third if block. End date is less than today date.");
      identity.setInactive(true);
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from third if block, identity setInactive is true. ****");

    }
    else if(startDate != null  &amp;&amp; todayDate != null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp;startDate.compareTo(todayDate) >0 &amp;&amp; (STR_ACTION_HIR.equalsIgnoreCase(strAction)  || STR_ACTION_ADD.equalsIgnoreCase(strAction))) {
      System.out.println("IdentityAttributeInactive Rule inside if Start date greater than today date  ");
      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside else if. Start date is greater than today date.  ");
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from else if block, identity setInactive is true. ****");

      identity.setInactive(true);

      //}else if(termDate != null  &amp;&amp; todayDate != null &amp;&amp;  Util.isNotNullOrEmpty(strAction) &amp;&amp;(todayDate.compareTo(termDate) >= 0) &amp;&amp; (STR_ACTION_TER.equalsIgnoreCase(strAction) )) {
    }else if(termDate != null  &amp;&amp;  Util.isNotNullOrEmpty(strAction)  &amp;&amp; ((STR_ACTION_TER.equalsIgnoreCase(strAction) )@or (STR_ACTION_TWP.equalsIgnoreCase(strAction)) @or (STR_ACTION_RET.equalsIgnoreCase(strAction)) @or (STR_ACTION_RWP.equalsIgnoreCase(strAction)) @or (STR_ACTION_COM.equalsIgnoreCase(strAction)))) {


      System.out.println("IdentityAttributeInactive Rule inside if Start date greater than today date  ");
      System.out.println("Inside CF-IdentityAttributeInactive-Rule, inside else if. Start date is greater than today date.  ");
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from else if block, identity setInactive is true. ****");

      identity.setInactive(true);

    } else{
      System.out.println("**** Exiting CF-IdentityAttributeInactive-Rule from else block, identity setInactive is false. ****");
      identity.setInactive(false);
    }
  }
return identity.getName();
  //context.saveObject(identity);
  //context.commitTransaction();
  </Source>
  </Rule>
  <Rule created="1607958344565" id="0a111e5a764b10b7817661c933751e1c" language="beanshell" modified="1614858221190" name="CF-EnableAccount-Rule">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Source>
 import java.text.SimpleDateFormat;
  import java.util.Date;
  import java.util.HashMap;
  import java.util.List;
  import java.text.DateFormat;  

  import sailpoint.api.RequestManager;
  import sailpoint.object.Attributes;
   import sailpoint.object.Identity;
  import sailpoint.object.Request;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.api.Provisioner;
  import sailpoint.object.RequestDefinition;
  import sailpoint.object.Workflow;
  import org.apache.log4j.Logger;

  Logger log = Logger.getLogger("com.carefirst.EnableAccountRule");
  log.info("Inside EnableAccount Rule ");
  try{


   // Identity identity = null;
    ProvisioningPlan plan = null;
    Date date = new Date(); 
    DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");  
    String strDate = dateFormat.format(date);
  
    Filter startDateFilter = Filter.eq("effdt",strDate);
    Filter actionFilter = Filter.eq("action","HIR");
    Filter actionAddFilter = Filter.eq("action","ADD");
     Filter orFilter =Filter.or(actionFilter,Filter.eq("action","ADD"));
   
    Filter andFilter = Filter.and(startDateFilter,orFilter);
    List identitiesList = context.getObjects(Identity.class,new QueryOptions().addFilter(andFilter));

    //return identitiesList;
    for (Identity identity: identitiesList) {

//return identity;
      plan = createEnablePlan(identity);
      Provisioner  prov = new Provisioner(context);
      prov.compile(plan);
      prov.execute();
      
      identity.setInactive(false);
      identity.setAttribute("employeestatus","A");
      context.saveObject(identity);
      context.commitTransaction();
       sendEmailNotification(identity.getName(),"CF-EmailTemplate-EnableAccount");
       Attributes attributes = new Attributes();
        attributes.put("Application1","Active Directory");
        attributes.put("Application2","CIAM-Users-Vault");
      attributes.put("Application3","BIZAPPAD");
      attributes.put("Application4","ISAM LDAP");
     
      createAuditEvent("Carefirst-Enable-ProvisioingSuccess",null,null,"Carefirst-Enable-ProvisioingSuccess",null,identity.getName(),null,null,attributes,null,null,null,null);
      /*

      HashMap launchArgsMap = new HashMap();
      launchArgsMap.put("launcher","spadmin");
      launchArgsMap.put("approvalScheme", "none");
      Workflow wf = (Workflow) context.getObjectByName(Workflow.class, "Workflow-CareFirst-EnableAccount");
      log.info("Inside EnableAccount Rule  wf is "+wf.getName());
      Request req = new Request();
      RequestDefinition reqdef = context.getObject( RequestDefinition.class, "Workflow Request" );
      req.setDefinition(reqdef);
      Attributes allArgs = new Attributes();
      allArgs.put( "workflow", wf.getId() );
      allArgs.put("identity", identity);
      allArgs.put("identityName", identity.getName());
      allArgs.putAll(launchArgsMap);
      Identity id = context.getObjectByName(Identity.class, "AAB8401");
      req.setOwner(id);
      req.setAttributes( reqdef, allArgs );
      RequestManager.addRequest(context, req); */

    }
   // return   false;
  }		
  catch(Exception e){
    e.printStackTrace();
  }


  </Source>
  </Rule>
  <Rule created="1608272721414" id="0a111e5a764b10b78176748636063b3c" language="beanshell" modified="1609781347916" name="CF-ADAfterProv-AggRule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
        <Argument name="result">
          <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.Application;
import sailpoint.object.Attributes;

   import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.Bundle;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.IdentitySelector;
import sailpoint.object.IdentitySelector.MatchExpression;
import sailpoint.object.IdentitySelector.MatchTerm;
     import org.apache.log4j.Logger;
  import sailpoint.object.ProvisioningProject;

if ( plan != null )
{
List accounts = plan.getAccountRequests();
if ( ( accounts != null ) &amp;&amp; ( accounts.size() > 0 ) )
{
for ( AccountRequest acctRequest : accounts )
{
if (( acctRequest != null ) &amp;&amp; (!(AccountRequest.Operation.Create.equals(acctRequest.getOperation()))))
{
System.out.println("---------------Single Account Aggregation Started-------------------------");
 String identityName = (String) acctRequest.getNativeIdentity();
System.out.println("Single Account Aggregation Completed:"+identityName );
 String result = singleAccountAggregation("Active Directory",identityName);
System.out.println("Single Account Aggregation Completed:"+result);
}
}
}
AccountRequest accountRequest = plan.getAccountRequest("Active Directory");
  String userObjName = plan.getNativeIdentity();
      Identity identity = context.getObjectByName(Identity.class,userObjName);

System.out.println("**** Inside AD after provisioning rule, BEFORE entering code to provision Skype attributes ****");
System.out.println("User company = "+identity.getAttribute("company"));
System.out.println("Account request = "+accountRequest);
System.out.println("Operation = "+accountRequest.getOperation());
System.out.println("Plan = "+plan.toXml());

if (!identity.getAttribute("company").equalsIgnoreCase("SBP") &amp;&amp; ( accountRequest != null ) &amp;&amp; ((AccountRequest.Operation.Create.equals(accountRequest.getOperation()))))
{
	System.out.println("**** Inside AD after provisioning rule, entering code to provision Skype attributes ****");
	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - BEFORE setting Skype attrs = "+plan.toXml());


 String SipAddress= "sip:"+identity.getAttribute("userid")+"@carefirsttest.com";
     ArrayList l=new ArrayList();
     l.add("SamAccountName");
      l.add("FirstLastName");
      l.add("EmailAddress");
	
AccountRequest accountRequest = plan.getAccountRequest("Active Directory");

// accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        
         accountRequest.add(new AttributeRequest("SipAddress",ProvisioningPlan.Operation.Add,SipAddress));
       accountRequest.add(new AttributeRequest("msRTCSIP-UserEnabled",ProvisioningPlan.Operation.Add,"true"));
       accountRequest.add(new AttributeRequest("SipAddressType",ProvisioningPlan.Operation.Add,l));
       accountRequest.add(new AttributeRequest("RegistrarPool",ProvisioningPlan.Operation.Set,"sfb.carefirsttest.com"));

     
      plan.add(accountRequest);
      plan.setIdentity(identity);

  Provisioner provisioner= new Provisioner(context);
    provisioner.setNoLocking(true);
    provisioner.setOptimisticProvisioning(true);
    ProvisioningProject project =  provisioner.compile(plan);

    provisioner.execute(plan); 


	System.out.println("Inside AD after provisioning rule, inside code to provision Skype attributes, plan - AFTER setting Skype attrs = "+plan.toXml());

	System.out.println("#### Inside AD after provisioning rule, exiting code to provision Skype attributes ####");


}
}</Source>
  </Rule>
  <Rule created="1608275984073" id="0a111e5a764b10b7817674b7fec93bc8" language="beanshell" modified="1612336109071" name="CF-BizAppADAfterProv-AggRule" type="AfterProvisioning">
    <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. 

This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule' configured.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e98226e3" name="CF-CommonWebServiceLibrary-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e84526de" name="LaunchPowerShellRule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f817585910347271b" name="CF-CORPADDN-RULE"/>
    </ReferencedRules>
    <Source>import sailpoint.object.Application;
import sailpoint.object.Attributes;

   import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.Bundle;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.IdentitySelector;
import sailpoint.object.IdentitySelector.MatchExpression;
import sailpoint.object.IdentitySelector.MatchTerm;
     import org.apache.log4j.Logger;

try{
 String identityName = plan.getNativeIdentity();
 String result = singleAccountAggregation("BizAppAD",identityName);
System.out.println("Single Account Aggregation Completed:"+result);
}catch(Exception e)
{}</Source>
  </Rule>
  <Rule created="1609136425346" id="0a111e5a7684111f8176a801498238bd" language="beanshell" modified="1616145645822" name="CF-TestDeleteIdentity-Rule" type="Correlation">
    <Description>
    Import template-defined Workgroups from a CSV file.
  </Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d9e326ad" name="CF-CommonLibrary-Rule"/>
    </ReferencedRules>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  
  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  
  
  
  
   /*plan = buildAccountDeletePlan(i);
        Provisioner  prov = new Provisioner(context);
        prov.compile(plan);
        prov.execute();
        Terminator t = new Terminator(context);
        //return i;
        t.deleteObject(i);
         
  
  requestDisconnectApplication("Disconnected Application1","100424");
  return "done";
        
        Attributes attributes = new Attributes();
        attributes.put(STR_ATR_ASSOCIATE,"null");*/

  try{
	//Identity identity =getIdentityObj(identityName);
  Identity identity =context.getObjectByName(Identity.class,"100466");
  if(identity !=null ){
	ProvisioningPlan plan = buildAccountDeletePlan(identity);
    Provisioner  prov = new Provisioner(context);
    prov.compile(plan);
    prov.execute();
    /*Terminator t = new Terminator(context);
        //return i;
        t.deleteObject(identity);*/
    //return prov.getProject();
    //return plan;
        /*EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-UserDeletion-Notification");
  String email = "Admin@carefirst.com";
      EmailOptions options = new EmailOptions();
      Identity manager=identity.getManager();
      if(manager == null){
        options.setTo(email);
      }else{
        if(null != manager.getEmail()){
          options.setTo(manager.getEmail());
        }else{
          options.setTo(email);
        }
      }
      
      Map args = new HashMap();
      args.put("identityName", identity.getName());
      args.put("errorMsg",map.get(identityName));

      options.setVariables(args);
      context.sendEmailNotification(template, options);
        createAuditEvent(STR_AUDIT_DELETE_SUCCESS_NOTIFICATION,null,null,STR_AUDIT_DELETE_SUCCESS_NOTIFICATION,null,identity,null,null,attributes,null,null,null,null);*/
  }
        }
        catch(Exception e){
        /*EmailTemplate template = context.getObjectByName(EmailTemplate.class, "CareFirst-UserDeletion-Error");
  		String email = "Admin@carefirst.com";
      EmailOptions options = new EmailOptions();
          options.setTo(email);
       
      Map args = new HashMap();
      args.put("identityName", identity.getName());
      args.put("errorMsg",map.get(identityName));

      options.setVariables(args);
      context.sendEmailNotification(template, options);
        createAuditEvent(STR_AUDIT_DELETE_FAILURE_NOTIFICATION,null,null,STR_AUDIT_DELETE_FAILURE_NOTIFICATION,null,identity,null,null,attributes,null,null,null,null);*/
        
        }
  </Source>
  </Rule>
  <Rule created="1604330265180" id="0a111e5c758918dd817589891a5c001d" language="beanshell" name="CF-AD-UserPrincipalName-Rule"/>
  <Rule created="1604330265329" id="0a111e5c758918dd817589891af1001e" language="beanshell" name="CF-AD-SkypeSipAddress-Rule"/>
  <Rule created="1604331084698" id="0a111e5c758918dd817589959b9a0036" language="beanshell" name="CF-DN-BIZAPP"/>
  <Rule created="1604489616940" id="0a111e5c758f1333817593089e2c12bf" language="beanshell" modified="1604494401954" name="CF-BulkImportITRoles-Rule-Ananth" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
     role.setName(strCiamITRoleName);
      role.setDisplayName(strCiamITRoleName);
      role.setType("it");
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
      role.setAttribute("ciamITRoleId", strCiamITRoleID);
      // unused attributes
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Convert the entitlements list into a java.util.List object.
      if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
        entsList = entsList.replace("\\/", "/");
      }
      RFC4180LineParser entParser = new RFC4180LineParser("|");
      List entitlements = entParser.parseLine(entsList);

      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
        if (null == appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");

          for (String entName : entitlements) {



            Filter maFilter= Filter.and(Filter.eq("value",entName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entName);
              ma.setValue(entName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();
            }
          }
          appObj = ciamAppObj; 
          //  return;		 

        }
      }

      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        //  role.getProfiles().clear();
      }	  
      /*   List entitlements = new ArrayList();
    Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
    if(newRole != null){
      entitlements = getEntValues(newRole);
    }
   entitlements.add(entsList); */
      // Build the filterString for entitlements matching this IT role.
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();

        for (Profile prof : profiles) {
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();

            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              // prof.getConstraints().remove(filter);
              //  prof.setConstraints(filterList);
              System.out.println("Inside iff Application name is same");
              //  List constraints = prof.getConstraints();
              // constraints.add(filter);
              System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              /*  for (Filter filterNew : constraints) {
              if(filterNew instanceof Filter.LeafFilter){
                System.out.println("Inside create IT Role Method 444444444444444444");

                //	filter.getExpression();
              //  ((Filter.LeafFilter) filterNew).setValue(entitlements);
                System.out.println("Inside create IT Role Method 555555555555555555555");
                prof.addConstraint(filter);
                role.add(prof);
                System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
              }
            } */
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            }
          }

        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profile = new Profile();
        profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
        //profile.addConstraint(filter);
        profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 88888888888888888888");

      }

      System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("MissingRole");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//CareFirst_Role_Catalog-D.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        
        
        if (null != tokens.get(i)) { headerStrings.add(tokens.get(i).trim()); }
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604489643621" id="0a111e5c758f133381759309066512c0" language="beanshell" modified="1604660695272" name="CF-BulkImportITRoles-Rule-Harini" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
     role.setName(strCiamITRoleName);
      role.setDisplayName(strCiamITRoleName);
      role.setType("it");
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
      role.setAttribute("ciamITRoleId", strCiamITRoleID);
      // unused attributes
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
  if (null == ownerId) {
    System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
   ownerId = context.getObject(Identity.class, "spadmin");
     }
   role.setOwner(ownerId);


      // Convert the entitlements list into a java.util.List object.
      if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
        entsList = entsList.replace("\\/", "/");
      }
      RFC4180LineParser entParser = new RFC4180LineParser("|");
      List entitlements = entParser.parseLine(entsList);

      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
        if (null == appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");

          for (String entName : entitlements) {



            Filter maFilter= Filter.and(Filter.eq("value",entName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entName);
              ma.setValue(entName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();
            }
          }
          appObj = ciamAppObj; 
          //  return;		 

        }
      }

      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        //  role.getProfiles().clear();
      }	  
      /*   List entitlements = new ArrayList();
    Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
    if(newRole != null){
      entitlements = getEntValues(newRole);
    }
   entitlements.add(entsList); */
      // Build the filterString for entitlements matching this IT role.
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();

        for (Profile prof : profiles) {
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();

            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              // prof.getConstraints().remove(filter);
              //  prof.setConstraints(filterList);
              System.out.println("Inside iff Application name is same");
              //  List constraints = prof.getConstraints();
              // constraints.add(filter);
              System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              /*  for (Filter filterNew : constraints) {
              if(filterNew instanceof Filter.LeafFilter){
                System.out.println("Inside create IT Role Method 444444444444444444");

                //	filter.getExpression();
              //  ((Filter.LeafFilter) filterNew).setValue(entitlements);
                System.out.println("Inside create IT Role Method 555555555555555555555");
                prof.addConstraint(filter);
                role.add(prof);
                System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
              }
            } */
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            }
          }

        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profile = new Profile();
        profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
        //profile.addConstraint(filter);
        profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 88888888888888888888");

      }

      System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
     // return "error";
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("MissingRole");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//Carefirst_RoleImport_Test.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
       if (null != tokens.get(i)) { headerStrings.add(tokens.get(i).trim()); }
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604489663738" id="0a111e5c758f13338175930954fa12c1" language="beanshell" modified="1604495895350" name="CF-BulkImportITRoles-Rule-Shubham" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entsList = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
     role.setName(strCiamITRoleName);
      role.setDisplayName(strCiamITRoleName);
      role.setType("it");
      role.setAttribute("ciamApplicationID", strCiamAppID);
      role.setAttribute("ciamApplicationName", strCiamAppName);
      //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
      role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
      role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
      role.setAttribute("ciamITRoleId", strCiamITRoleID);
      // unused attributes
      role.setAttribute("cartRoleId", strCartRoleID);
      role.setAttribute("cartApplicationId", strCartAppID);
      role.setAttribute("cartApplicationName", strCartAppName);
      role.setAttribute("roleProvisionType", strRoleProvisionType);
      role.setAttribute("manualProvisionTeam", strManualProvisionType);
      role.setAttribute("roleSensitivity", strRoleSensitivity);
      role.setAttribute("userType", strUserType);
      role.setAttribute("noofapprovals", strNofApprovals);
      role.setAttribute("approval1", strApproval1);
      role.setAttribute("approval2", strApproval2);
      role.setAttribute("approval3", strApproval3);
      role.setAttribute("approval4", strApproval4);
      role.setAttribute("approval5", strApproval5);
      role.setAttribute("approval6", strApproval6);
      role.setAttribute("approval7", strApproval7);
      role.setAttribute("approval8", strApproval8);
      role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Convert the entitlements list into a java.util.List object.
      if ((null != entsList) &amp;&amp; (0 &lt; entsList.length())) {
        entsList = entsList.replace("\\/", "/");
      }
      RFC4180LineParser entParser = new RFC4180LineParser("|");
      List entitlements = entParser.parseLine(entsList);

      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
        if (null == appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");

          for (String entName : entitlements) {



            Filter maFilter= Filter.and(Filter.eq("value",entName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entName);
              ma.setValue(entName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();
            }
          }
          appObj = ciamAppObj; 
          //  return;		 

        }
      }

      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        //  role.getProfiles().clear();
      }	  
      /*   List entitlements = new ArrayList();
    Bundle newRole = context.getObjectByName(Bundle.class,role.getName());
    if(newRole != null){
      entitlements = getEntValues(newRole);
    }
   entitlements.add(entsList); */
      // Build the filterString for entitlements matching this IT role.
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();

        for (Profile prof : profiles) {
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();

            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              // prof.getConstraints().remove(filter);
              //  prof.setConstraints(filterList);
              System.out.println("Inside iff Application name is same");
              //  List constraints = prof.getConstraints();
              // constraints.add(filter);
              System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              /*  for (Filter filterNew : constraints) {
              if(filterNew instanceof Filter.LeafFilter){
                System.out.println("Inside create IT Role Method 444444444444444444");

                //	filter.getExpression();
              //  ((Filter.LeafFilter) filterNew).setValue(entitlements);
                System.out.println("Inside create IT Role Method 555555555555555555555");
                prof.addConstraint(filter);
                role.add(prof);
                System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
              }
            } */
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
              System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
              System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            }
          }

        }
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profile = new Profile();
        profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
        //profile.addConstraint(filter);
        profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 88888888888888888888");

      }

      System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("MissingRole");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //  String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//CareFirst_Role_Catalog-ISAM LDAP.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        if (null != tokens.get(i)) { headerStrings.add(tokens.get(i).trim()); }
        
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604664529837" id="0a111e5c758f133381759d7593ac21ac" language="beanshell" modified="1604664710269" name="CF-BulkBusinessRolesImport-Rule-Harini" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Attributes;

  import java.util.Map;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  //Getting the attribute values from assignement rule
  public List getMatchTerms(Bundle bundle){
    List valuesList = new ArrayList();
    if(null != bundle){
      if( null != bundle.getSelector()){
        IdentitySelector selector = bundle.getSelector();
        MatchExpression matchExpression = selector.getMatchExpression();

        List terms = matchExpression.getTerms();
        return terms; 

      }

    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);

    String strBZAssignType  = (String) roleHash.get("BZ_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("BZ_ASSIGNMENT_TYPE") : "";
    String strSRAssignType  = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
    String strCatagory  = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamRoleID  = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

    //  String strCiamBusinessITRoleName  = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strAction = (String) roleHash.get("Action") != null ?   (String) roleHash.get("Action"): "";
    String strAssignment = (String) roleHash.get("Assignment") != null ?   (String) roleHash.get("Assignment"): "";
    String strRoleName  = (String) roleHash.get("Business Role Name") != null ?   (String) roleHash.get("Business Role Name"): "";
    String strRoleOwner  = (String) roleHash.get("Business Role Owner") != null ?  (String) roleHash.get("Business Role Owner"): "";
    String strRoleDesc  = (String) roleHash.get("Role Description") != null ?   (String) roleHash.get("Role Description") : "";
    String subRoles  = (String) roleHash.get("CIAM Business IT Role Name") != null ?  (String) roleHash.get("CIAM Business IT Role Name"): "";
    String strBussinessUnit  = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
    String strDeptCode  = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
    String strJobCode  = (String) roleHash.get("JOB_CD  (Job Code)") != null ? (String) roleHash.get("JOB_CD  (Job Code)") : "";
    String strEeoCode  = (String) roleHash.get("EEO_CD (EEO Code)") != null ?   (String) roleHash.get("EEO_CD (EEO Code)") : "";
    String strCompanyCode  = (String) roleHash.get("CO_CD (Company Code)") != null ?   (String) roleHash.get("CO_CD (Company Code)") : "";
    String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ?   (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
    String strCostCenter  = (String) roleHash.get("COST_CENTER (Cost Center)") != null ?  (String) roleHash.get("COST_CENTER (Cost Center)") : "";
    String strMgrPositionNumber  = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ?  (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
    String strPositionNumber  = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
    String strLocationCode  = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ?  (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
    String strSupplierName  = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ?  (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    String classificationName   = "BirthRight";

    //String classificationName  = (String) roleHash.get("Classification");
    // String isRequestable  = (String) roleHash.get("Requestable Role");

    // boolean isRequestable  = (Boolean) roleHash.get("Requestable Role");
    //String assignRule  = (String) roleHash.get("AssignmentRule");
    //String costCentre  = (String) roleHash.get("costcenter");
    //String jobCode  = (String) roleHash.get("jobcode");


    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);

    try{
      Bundle role = context.getObject(Bundle.class, strCiamBusinessRoleName);
      if (null == role) {
        //System.out.println(" - role does not exist, creating new: " + roleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamBusinessRoleName)) {
        role.setName(strCiamBusinessRoleName);
        role.setDisplayName(strCiamBusinessRoleName);
        role.setType("business");
        role.setAttribute("category", strCatagory);
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        role.setAttribute("ciamBusinessRoleId", strCiamRoleID);// ciam role ID
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        //role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("action", strAction);
        role.setAttribute("assignment", strAssignment);

        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
      }
        
      if(Util.isNotNullOrEmpty(strRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strRoleDesc);
        role.setDescriptions(descMap);
      }



      Identity ownerId = context.getObject(Identity.class, strRoleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  strRoleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);

      System.out.println("role: " + role.toXml());
      if(Util.isNotNullOrEmpty(strBZAssignType)&amp;&amp;Util.isNotNullOrEmpty(strSRAssignType)&amp;&amp; strBZAssignType.equalsIgnoreCase("Mandatory") &amp;&amp; strSRAssignType.equalsIgnoreCase("Mandatory") ){
        // Setting the classification to the Role
        if(Util.isNotNullOrEmpty(classificationName)) {
          List classificList = new ArrayList();

          ObjectClassification objClassific = new ObjectClassification();
          objClassific.setOwnerType("Bundle");
          objClassific.setSource("UI");
          Classification classification = context.getObjectByName(Classification.class, classificationName);
          if(classification != null) {

            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);
          }
          else
          {
            classification = new Classification();
            classification.setName(classificationName);
            classification.setDisplayName(classificationName);
            classification.setOrigin("MyIndependentDataSource");
            Map descMap  = new HashMap();
            descMap.put("en_US", "Allow Access specified Role");
            classification.setDescriptions(descMap);
            context.saveObject(classification);
            context.commitTransaction();
            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);

          }



        }


        // Creating the Assignement Rule with below attributes 
        IdentitySelector idSelector = new IdentitySelector();
        MatchExpression matExp = new MatchExpression();
        MatchTerm andMatchTerm = new MatchTerm();
        andMatchTerm.setAnd(true);
        andMatchTerm.setContainer(true);
        MatchTerm matchTerm = null;
        // matExp.setAnd(true);
        if(Util.isNotNullOrEmpty(strJobCode) ) {
          matchTerm = new MatchTerm();
          matchTerm.setName("jobcode");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strJobCode);
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strBussinessUnit)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("businessunit");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strBussinessUnit);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strDeptCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("deptid");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strDeptCode);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strEeoCode)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("eeojobgroup");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strEeoCode); 
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCompanyCode)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("company");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCompanyCode);
          // matExp.addTerm(matchTerm);
          andMatchTerm.addChild(matchTerm);

          andMatchTerm.addChild(matchTerm);          
        }
        if(Util.isNotNullOrEmpty(strMgrCostCenter)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("mgrCostcenter");  // which attribute we have to take  here 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrCostCenter);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCostCenter)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("costcenter"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCostCenter);
          // matExp.addTerm(matchTerm); 
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strMgrPositionNumber)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("managerposnum"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrPositionNumber);
          andMatchTerm.addChild(matchTerm); 
        }
        if(Util.isNotNullOrEmpty(strPositionNumber)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("positionNumber"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strPositionNumber);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strLocationCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("location");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strLocationCode);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strSupplierName)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("supplierName"); // need to create the identity attribute for suppliier name 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strSupplierName);
          andMatchTerm.addChild(matchTerm);


        }

        if( null != role.getSelector()){
          IdentitySelector selector = role.getSelector();
          if(null != selector.getMatchExpression()){
            MatchExpression matchExpression = selector.getMatchExpression();
            if(matchExpression.getTerms() != null){

              List existingTerms = matchExpression.getTerms();
              if(null != existingTerms &amp;&amp; existingTerms.size() > 0){
                for (MatchTerm extTerm : existingTerms) {
                  matExp.addTerm(extTerm);
                }
              }

            }
          }

        }

        matExp.addTerm(andMatchTerm);
        idSelector.setMatchExpression(matExp);
        role.setSelector(idSelector); 
      } 

      // Convert the sub-roles list into a java.util.List object.
      /* RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
      List subRolesList = subRolePaser.parseLine(subRoles);

      System.out.println("subRolesList: " + subRolesList);
      // Add the required IT roles for this business role.
      if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
        for (String subRoleName : subRolesList) { */

      Bundle requiredRole = context.getObjectByName(Bundle.class, subRoles);
      if (null == requiredRole) {
        System.out.println(" - ERROR: Required role not found: " + subRoles);
      } else {
        role.addRequirement(requiredRole);
      }         	  

      //  }	 
      // }
      context.saveObject(role);
      context.commitTransaction();

      return;
    }    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      // Map map = new HashMap();
      // Attributes attrs = new Attributes();
      Custom customObj = context.getObjectByName(Custom.class,"Business-MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Business-MissingRole");
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);

      }
      else{
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);
      }



      // attrs.setMap(map);
      // customObj.setAttributes(attrs);

      context.saveObject(customObj);
      context.commitTransaction();

      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
  String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";

  //return csvFileName;

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");
  //return csvFileName;
  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
      //  return lineHash;
      buildRole(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604817783264" id="0a111e5c758f13338175a69809e02e86" language="beanshell" modified="1604819618100" name="UpdatedBulITRoleImport-Rule-Harini" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
   // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

  // getting the Entitlement values from exisitng role
  public List getEntValues(Bundle bundle){
    List entValueList  = new ArrayList();
    if(null != bundle){
      if(null != bundle.getProfiles()){
        List profiles = bundle.getProfiles();
        for (Profile profile : profiles) {
          List constraints = profile.getConstraints();
          for (Filter filter : constraints) {
            if(filter instanceof Filter.LeafFilter){
              Object value = ((LeafFilter) filter).getValue();
              if(value instanceof String){
                entValueList.add(value);
              }
              if(value instanceof List){
                entValueList.addAll((Collection) value);
              }
            }
          }

        }
        return entValueList; 
      }
    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamBusRoleID  = (String) roleHash.get("CIAM Business Role ID") != null ? (String) roleHash.get("CIAM Business Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";
    String strCiamITRoleName  = (String) roleHash.get("CIAM IT Role Name") != null ? (String) roleHash.get("CIAM IT Role Name") : "";
    String strCiamITRoleID  = (String) roleHash.get("CIAM IT Role ID") != null ? (String) roleHash.get("CIAM IT Role ID") : "";
    String strITRoleDesc = (String) roleHash.get("IT Role Description") != null ? (String) roleHash.get("IT Role Description") : "";
    String entitlementName = (String) roleHash.get("Attribute") != null ? (String) roleHash.get("Attribute") : "";
    String appName = (String) roleHash.get("End Point") != null ? (String) roleHash.get("End Point") : "";
    String attrName = (String) roleHash.get("AttributeName") != null ? (String) roleHash.get("AttributeName") : "";

    //unsused variables
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    try{
      Bundle role = context.getObject(Bundle.class, strCiamITRoleName);
      if (null == role) {
        System.out.println(" - role does not exist, creating new: " + strCiamITRoleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamITRoleName)) {
        role.setName(strCiamITRoleName);
        role.setDisplayName(strCiamITRoleName);
        role.setType("it");
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        //  role.setAttribute("ciamRoleID", strCiamBusRoleID); // need to add ciamBusinessRoleId,and ciamITRoleID in IIQ.
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        role.setAttribute("ciamBusinessRoleId", strCiamBusRoleID);
        role.setAttribute("ciamITRoleId", strCiamITRoleID);
        // unused attributes
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
      }


      if(Util.isNotNullOrEmpty(strITRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strITRoleDesc);
        role.setDescriptions(descMap);
      }

      String roleOwner = "";
      Identity ownerId = context.getObject(Identity.class, roleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  roleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);


      // Lookup the application for the role, if one is required.
      Application appObj = null;
      if ((null != appName) &amp;&amp; (0 &lt; appName.length())) {
        appObj = context.getObject(Application.class, appName);
        if (null == appObj) {
          System.out.println("ERROR: Could not find application: " + appName);
          System.out.println("ERROR: Skipping role creation for " + strCiamITRoleName);
          Application ciamAppObj = context.getObject(Application.class, "CIAM-ROLE SYNC-Vault");

        



            Filter maFilter= Filter.and(Filter.eq("value",entitlementName),Filter.eq("application.name", "CIAM-ROLE SYNC-Vault"));
            ManagedAttribute managedAttribute = context.getUniqueObject(ManagedAttribute.class, maFilter);
            if(null ==managedAttribute){
              ManagedAttribute ma=new ManagedAttribute();
              ma.setDisplayName(entitlementName);
              ma.setValue(entitlementName);
              ma.setApplication(ciamAppObj);
              ma.setAttribute("Role_name");
              ma.setType("Entitlement");
              ma.setRequestable(false);
              context.saveObject(ma);
              context.commitTransaction();
              
          }
         appObj = ciamAppObj;
          //  return;		 

        }
      }

      String entAttrName = "";
      // Make sure the application (if specified) has the specified entitlement.
      if (null != appObj) {
        Schema appSchema = appObj.getSchema("account");
        if (null != appSchema) {
          List entAttrNames = appSchema.getEntitlementAttributeNames();
          if ((null != entAttrNames) &amp;&amp; (1 == entAttrNames.size())) {
            // Deterministic single entitlement name.
            entAttrName = entAttrNames.get(0);
            if (!entAttrName.equals(attrName)) {
              System.out.println(" - WARNING: Replacing CSV attribute [" +     attrName +   "] with schema attribute [" + entAttrName +"] ");
              attrName = entAttrName;
            } 

          }
        }
      }


      // Handle IT-role specifc build out options here.


      // Clear out the previous profiles on the role.
      if (null != role.getProfiles()) {
        //  role.getProfiles().clear();
      }	  

      // Build the filterString for entitlements matching this IT role.
	  List entitlements = new ArrayList();
	  entitlements.add(entitlementName);
      String comma = "";
      String filterString = attrName + ".containsAllIgnoreCase({";
      for (String entValue : entitlements) {
        filterString += comma + "\"" + entValue + "\"";
        comma = ",";
      }
      filterString += "})";

      Filter filter = Filter.compile(filterString);   
      List filterList = new ArrayList();
      filterList.add(filter);
      System.out.println("Inside create IT Role Method 111111111111111111 filter Obj "+filter);
      if(role.getProfiles() != null){
        System.out.println("Inside create IT Role Method 2222222222222222222222222222222");
        List profiles = role.getProfiles();

        for (Profile prof : profiles) {
          if(null != prof.getApplication()){
            System.out.println("Inside create IT Role Method 333333333333333333333333333");
            Application profileObj = prof.getApplication();

            if(profileObj.getName().equalsIgnoreCase(appObj.getName())){


              // prof.getConstraints().remove(filter);
              //  prof.setConstraints(filterList);
              System.out.println("Inside iff Application name is same");
              List existingEntList = new ArrayList();
              List constraints = prof.getConstraints();
              // constraints.add(filter);
             // System.out.println("Inside create IT Role Method 444444444444444444 Profile Object is =="+prof.toXml());
              for (Filter filterNew : constraints) {
                if(filterNew instanceof Filter.LeafFilter){
                  System.out.println("Inside create IT Role Method 444444444444444444");

                  //	filter.getExpression();
                  Object objValue = ((Filter.LeafFilter) filterNew).getValue();
                  if(objValue instanceof String){
                    existingEntList.add((String)objValue);
                  }
                  if(objValue instanceof List){
                    existingEntList.addAll((Collection) objValue);
                  }
                  if(null !=existingEntList &amp;&amp; existingEntList.size() > 0){ 
                    System.out.println("Inside create IT Role Method 555555555555555555555 Existing Ent lIst "+existingEntList);
                    System.out.println("Inside create IT Role Method New ENtilement "+entitlementName);

                    for(String oldEnt : existingEntList){
                      if(oldEnt.equalsIgnoreCase(entitlementName)){
                        System.out.println("Inside create IT Role Method Existing Entitlement and new Entitlement is same so returing ");
                        return;
                      }
                    }
                  }
                  System.out.println("Inside create IT Role Method 6666666666666666666666666666666");
                }

              }
              //prof.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
              //profile.setApplication(appObj);
              prof.addConstraint(filter);
             // System.out.println("Inside create IT Role Method 555555555555555555555 Updated Profile is === "+prof.toXml());
              //   prof.setConstraints(filter);

              role.add(prof);
             // System.out.println("Inside create IT Role Method 666666666666666666666666666666 Role is ==="+role.toXml());
            } 
            else
              break;
          
          }

        }
         System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profilee = new Profile();
        profilee.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profilee.setApplication(appObj);
        //profile.addConstraint(filter);
        profilee.setConstraints(filterList);
        role.add(profilee);
      }  
      else
      { 
        System.out.println("Inside create IT Role Method 7777777777777777777");
        Profile profile = new Profile();
        profile.setDescription("Entitlements required by '" + strCiamITRoleName + "' for " + appName);
        profile.setApplication(appObj);
        //profile.addConstraint(filter);
        profile.setConstraints(filterList);
        role.add(profile);
        System.out.println("Inside create IT Role Method 88888888888888888888");

      }

     // System.out.println("role: " + role.toXml());
      context.saveObject(role);
      context.commitTransaction();
      context.decache();
      return;
    }
    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      Custom customObj = context.getObjectByName(Custom.class,"Missing-IT-Roles");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Missing-IT-Roles");
        customObj.put(strCiamITRoleName, strCiamITRoleName);

      }
      else{
        customObj.put(strCiamITRoleName, strCiamITRoleName);
      }

      context.saveObject(customObj);
      context.commitTransaction();
      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

 // String csvFileName ="//home//iqadmin//Data//BulkRoleImport//NNTestITRoles.csv";
    String csvFileName ="//home//iqadmin//Data//IT Role Details.csv";
  
  // String csvFileName ="//home//iqadmin//Data//Active Directory.csv";


  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//BusinessRoles.csv";

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
      buildRole (lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1604817909962" id="0a111e5c758f13338175a699f8ca2e87" language="beanshell" modified="1604819913231" name="UpdatedBulkBusinessRolesImport-Rule-Harini" type="Correlation">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Attributes;

  import java.util.Map;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;


  //Getting the attribute values from assignement rule
  public List getMatchTerms(Bundle bundle){
    List valuesList = new ArrayList();
    if(null != bundle){
      if( null != bundle.getSelector()){
        IdentitySelector selector = bundle.getSelector();
        MatchExpression matchExpression = selector.getMatchExpression();

        List terms = matchExpression.getTerms();
        return terms; 

      }

    }
  }
  // Routine that takes a key/value hash of role data and builds it into roles
  // in IdentityIQ.  
  public void buildRole (HashMap roleHash) {
    System.out.println(" key Values Map "+roleHash);

    String strBZAssignType  = (String) roleHash.get("BZ_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("BZ_ASSIGNMENT_TYPE") : "";
    String strSRAssignType  = (String) roleHash.get("SR_ASSIGNMENT_TYPE") != null ? (String) roleHash.get("SR_ASSIGNMENT_TYPE") : "";
    String strCatagory  = (String) roleHash.get("Category") != null ? (String) roleHash.get("Category") : "";
    String strCiamAppID  = (String) roleHash.get("CIAM Application ID") != null ? (String) roleHash.get("CIAM Application ID") : "";
    String strCiamAppName  = (String) roleHash.get("CIAM Application Name") != null ? (String) roleHash.get("CIAM Application Name") : "";
    String strCiamRoleID  = (String) roleHash.get("CIAM Role ID") != null ? (String) roleHash.get("CIAM Role ID") : "";
    String strCiamBusinessRoleName  = (String) roleHash.get("CIAM Business Role Name") != null ? (String) roleHash.get("CIAM Business Role Name") : "";

    //  String strCiamBusinessITRoleName  = (String) roleHash.get("CIAM Business IT Role Name") != null ? (String) roleHash.get("CIAM Business IT Role Name") : "";
    String strCartRoleID  = (String) roleHash.get("CART Role ID") != null ?  (String) roleHash.get("CART Role ID") : "";

    String strCartAppID  = (String) roleHash.get("CART Applciation ID") != null ?    (String) roleHash.get("CART Applciation ID") : "";
    String strCartAppName  = (String) roleHash.get("CART Application Name") != null ? (String) roleHash.get("CART Application Name")    : "";
    String strRoleProvisionType = (String) roleHash.get("Role Provision Type") != null ?    (String) roleHash.get("Role Provision Type")  : "";
    String strManualProvisionType  = (String) roleHash.get("Manual Provision Team") != null ? (String) roleHash.get("Manual Provision Team")     : "";
    String strUserType = (String) roleHash.get("User Type ( Associate or Contractor)") != null ?(String) roleHash.get("User Type ( Associate or Contractor)")    : "";
    String strRoleSensitivity = (String) roleHash.get("Role Sensitivity") != null ?   (String) roleHash.get("Role Sensitivity"): "";
    String strAction = (String) roleHash.get("Action") != null ?   (String) roleHash.get("Action"): "";
    String strAssignment = (String) roleHash.get("Assignment") != null ?   (String) roleHash.get("Assignment"): "";
    String strRoleName  = (String) roleHash.get("Business Role Name") != null ?   (String) roleHash.get("Business Role Name"): "";
    String strRoleOwner  = (String) roleHash.get("Business Role Owner") != null ?  (String) roleHash.get("Business Role Owner"): "";
    String strRoleDesc  = (String) roleHash.get("Role Description") != null ?   (String) roleHash.get("Role Description") : "";
    String subRoles  = (String) roleHash.get("CIAM Business IT Role Name") != null ?  (String) roleHash.get("CIAM Business IT Role Name"): "";
    String strBussinessUnit  = (String) roleHash.get("BU_CD (Business Unit)") != null ?(String) roleHash.get("BU_CD (Business Unit)") : "";
    String strDeptCode  = (String) roleHash.get("DEPT_CD (Department Code)") != null ?(String)roleHash.get("DEPT_CD (Department Code)") : "";
    String strJobCode  = (String) roleHash.get("JOB_CD  (Job Code)") != null ? (String) roleHash.get("JOB_CD  (Job Code)") : "";
    String strEeoCode  = (String) roleHash.get("EEO_CD (EEO Code)") != null ?   (String) roleHash.get("EEO_CD (EEO Code)") : "";
    String strCompanyCode  = (String) roleHash.get("CO_CD (Company Code)") != null ?   (String) roleHash.get("CO_CD (Company Code)") : "";
    String strMgrCostCenter = (String) roleHash.get("MNGR_CC (Manager Cost Center)") != null ?   (String) roleHash.get("MNGR_CC (Manager Cost Center)") : "";
    String strCostCenter  = (String) roleHash.get("COST_CENTER (Cost Center)") != null ?  (String) roleHash.get("COST_CENTER (Cost Center)") : "";
    String strMgrPositionNumber  = (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") != null ?  (String) roleHash.get("MNGR_POSN_NBR ??(Manager Position Nunber)") : "";
    String strPositionNumber  = (String) roleHash.get("POSN_NBR ?? (Postion Number)") != null ? (String) roleHash.get("POSN_NBR ?? (Postion Number)") : "";
    String strLocationCode  = (String) roleHash.get("LOCN_CD ?? (Location Code )") != null ?  (String) roleHash.get("LOCN_CD ?? (Location Code )") : "";
    String strSupplierName  = (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") != null ?  (String) roleHash.get("SUPLR_NM ?? (Supplier Name)") : "";
    String strNofApprovals  = (String) roleHash.get("Number of Approvals") != null ?  (String) roleHash.get("Number of Approvals") : "";
    String strApproval1  = (String) roleHash.get("Approval 1") != null ?   (String) roleHash.get("Approval 1") : "";
    String strApproval2 = (String) roleHash.get("Approval 2") != null ?   (String) roleHash.get("Approval 2") : "";
    String strApproval3  = (String) roleHash.get("Approval 3") != null ? (String) roleHash.get("Approval 3")  : "";
    String strApproval4  = (String) roleHash.get("Approval 4") != null ?  (String) roleHash.get("Approval 4") : "";
    String strApproval5  = (String) roleHash.get("Approval 5") != null ? (String) roleHash.get("Approval 5") : "";
    String strApproval6  = (String) roleHash.get("Approval 6") != null ?  (String) roleHash.get("Approval 6"): "";
    String strApproval7  = (String) roleHash.get("Approval 7") != null ? (String) roleHash.get("Approval 7") : "";
    String strApproval8  = (String) roleHash.get("Approval 8") != null ? (String) roleHash.get("Approval 8") : "";
    String strApproval9  = (String) roleHash.get("Approval 9") != null ?  (String) roleHash.get("Approval 9"): "";
    String classificationName   = "BirthRight";

    //String classificationName  = (String) roleHash.get("Classification");
    // String isRequestable  = (String) roleHash.get("Requestable Role");

    // boolean isRequestable  = (Boolean) roleHash.get("Requestable Role");
    //String assignRule  = (String) roleHash.get("AssignmentRule");
    //String costCentre  = (String) roleHash.get("costcenter");
    //String jobCode  = (String) roleHash.get("jobcode");


    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);
    System.out.println("Role Name: '" + strRoleName);

    try{
      Bundle role = context.getObject(Bundle.class, strCiamBusinessRoleName);
      if (null == role) {
        //System.out.println(" - role does not exist, creating new: " + roleName);
        role = new sailpoint.object.Bundle();
      }   
      if(Util.isNotNullOrEmpty(strCiamBusinessRoleName)) {
        role.setName(strCiamBusinessRoleName);
        role.setDisplayName(strCiamBusinessRoleName);
        role.setType("business");
        role.setAttribute("category", strCatagory);
        role.setAttribute("ciamApplicationID", strCiamAppID);
        role.setAttribute("ciamApplicationName", strCiamAppName);
        role.setAttribute("ciamBusinessRoleId", strCiamRoleID);// ciam role ID
        role.setAttribute("ciamBusinessRoleName", strCiamBusinessRoleName);
        //role.setAttribute("ciamBusinessITRoleName", strCiamBusinessITRoleName);
        role.setAttribute("cartRoleId", strCartRoleID);
        role.setAttribute("cartApplicationId", strCartAppID);
        role.setAttribute("cartApplicationName", strCartAppName);
        role.setAttribute("roleProvisionType", strRoleProvisionType);
        role.setAttribute("manualProvisionTeam", strManualProvisionType);
        role.setAttribute("roleSensitivity", strRoleSensitivity);
        role.setAttribute("action", strAction);
        role.setAttribute("assignment", strAssignment);

        role.setAttribute("userType", strUserType);
        role.setAttribute("noofapprovals", strNofApprovals);
        role.setAttribute("approval1", strApproval1);
        role.setAttribute("approval2", strApproval2);
        role.setAttribute("approval3", strApproval3);
        role.setAttribute("approval4", strApproval4);
        role.setAttribute("approval5", strApproval5);
        role.setAttribute("approval6", strApproval6);
        role.setAttribute("approval7", strApproval7);
        role.setAttribute("approval8", strApproval8);
        role.setAttribute("approval9", strApproval9);
      }
      if(Util.isNotNullOrEmpty(strRoleDesc)) {
        Map descMap  = new HashMap();
        descMap.put("en_US", strRoleDesc);
        role.setDescriptions(descMap);
      }



      Identity ownerId = context.getObject(Identity.class, strRoleOwner);
      if (null == ownerId) {
        System.out.println(" - WARNING: Could not find owner [" +  strRoleOwner + "] using 'spadmin' instead.");
        ownerId = context.getObject(Identity.class, "spadmin");
      }
      role.setOwner(ownerId);

      System.out.println("role: " + role.toXml());
      if(Util.isNotNullOrEmpty(strBZAssignType)&amp;&amp;Util.isNotNullOrEmpty(strSRAssignType)&amp;&amp; strBZAssignType.equalsIgnoreCase("Mandatory") &amp;&amp; strSRAssignType.equalsIgnoreCase("Mandatory") ){
        // Setting the classification to the Role
        if(Util.isNotNullOrEmpty(classificationName)) {
          List classificList = new ArrayList();

          ObjectClassification objClassific = new ObjectClassification();
          objClassific.setOwnerType("Bundle");
          objClassific.setSource("UI");
          Classification classification = context.getObjectByName(Classification.class, classificationName);
          if(classification != null) {

            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);
          }
          else
          {
            classification = new Classification();
            classification.setName(classificationName);
            classification.setDisplayName(classificationName);
            classification.setOrigin("MyIndependentDataSource");
            Map descMap  = new HashMap();
            descMap.put("en_US", "Allow Access specified Role");
            classification.setDescriptions(descMap);
            context.saveObject(classification);
            context.commitTransaction();
            objClassific.setClassification(classification);
            classificList.add(objClassific);
            role.setClassifications(classificList);

          }



        }


        // Creating the Assignement Rule with below attributes 
        IdentitySelector idSelector = new IdentitySelector();
        MatchExpression matExp = new MatchExpression();
        MatchTerm andMatchTerm = new MatchTerm();
        andMatchTerm.setAnd(true);
        andMatchTerm.setContainer(true);
        MatchTerm matchTerm = null;
        // matExp.setAnd(true);
        if(Util.isNotNullOrEmpty(strJobCode) ) {
          matchTerm = new MatchTerm();
          matchTerm.setName("jobcode");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strJobCode);
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strBussinessUnit)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("businessunit");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strBussinessUnit);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strDeptCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("deptid");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strDeptCode);

          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strEeoCode)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("eeojobgroup");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strEeoCode); 
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCompanyCode)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("company");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCompanyCode);
          // matExp.addTerm(matchTerm);
          andMatchTerm.addChild(matchTerm);

          andMatchTerm.addChild(matchTerm);          
        }
        if(Util.isNotNullOrEmpty(strMgrCostCenter)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("mgrCostcenter");  // which attribute we have to take  here 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrCostCenter);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strCostCenter)) {


          matchTerm = new MatchTerm();
          matchTerm.setName("costcenter"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strCostCenter);
          // matExp.addTerm(matchTerm); 
          andMatchTerm.addChild(matchTerm);

        }
        if(Util.isNotNullOrEmpty(strMgrPositionNumber)) {

          matchTerm = new MatchTerm();
          matchTerm.setName("managerposnum"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strMgrPositionNumber);
          andMatchTerm.addChild(matchTerm); 
        }
        if(Util.isNotNullOrEmpty(strPositionNumber)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("positionNumber"); // need to create the iddentity attribute
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strPositionNumber);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strLocationCode)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("location");
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strLocationCode);
          andMatchTerm.addChild(matchTerm);
        }
        if(Util.isNotNullOrEmpty(strSupplierName)) {
          matchTerm = new MatchTerm();
          matchTerm.setName("supplierName"); // need to create the identity attribute for suppliier name 
          matchTerm.setType(Type.IdentityAttribute);
          matchTerm.setValue(strSupplierName);
          andMatchTerm.addChild(matchTerm);


        }

        if( null != role.getSelector()){
          IdentitySelector selector = role.getSelector();
          if(null != selector.getMatchExpression()){
            MatchExpression matchExpression = selector.getMatchExpression();
            if(matchExpression.getTerms() != null){

              List existingTerms = matchExpression.getTerms();
              if(null != existingTerms &amp;&amp; existingTerms.size() > 0){
                for (MatchTerm extTerm : existingTerms) {
                  matExp.addTerm(extTerm);
                }
              }

            }
          }

        }

        matExp.addTerm(andMatchTerm);
        idSelector.setMatchExpression(matExp);
        role.setSelector(idSelector); 
      } 

      // Convert the sub-roles list into a java.util.List object.
      /* RFC4180LineParser subRolePaser = new RFC4180LineParser("|");
      List subRolesList = subRolePaser.parseLine(subRoles);

      System.out.println("subRolesList: " + subRolesList);
      // Add the required IT roles for this business role.
      if(null != subRolesList &amp;&amp; subRolesList.size() > 0){
        for (String subRoleName : subRolesList) { */

      Bundle requiredRole = context.getObjectByName(Bundle.class, subRoles);
      if (null == requiredRole) {
        System.out.println(" - ERROR: Required role not found: " + subRoles);
      } else {
        role.addRequirement(requiredRole);
      }         	  

      //  }	 
      // }
      context.saveObject(role);
      context.commitTransaction();

      return;
    }    catch(Exception e){
      System.out.println("Inside Catch Block Exception is "+e);
      // Map map = new HashMap();
      // Attributes attrs = new Attributes();
      Custom customObj = context.getObjectByName(Custom.class,"Business-MissingRole");
      if(customObj == null){
        customObj = new Custom();
        customObj.setName("Business-MissingRole");
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);

      }
      else{
        customObj.put(strCiamRoleID, strCiamBusinessRoleName);
      }



      // attrs.setMap(map);
      // customObj.setAttributes(attrs);

      context.saveObject(customObj);
      context.commitTransaction();

      return;
    }
  }

  // What delimiter do we want to use in the CSV file.
  String dlm = ",";

  //String csvFileName ="////sv-tivdi-p2//e$//CareFirst//Data//BulkRoleImport//ImportRolesDemo//ITRoles.csv";
  //String csvFileName ="//home//iqadmin//Data//TestBusinessRoleImport.csv";
 String csvFileName ="//home//iqadmin//Data//BulkRoleImport//Roles_SIT_Validation.csv";
  //return csvFileName;

  File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");
  //return csvFileName;
  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }	  
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
      }	
      System.out.println(" Before calling buildRole: " );
     // return lineHash;
      buildRole(lineHash);
      System.out.println(" After calling buildRole: " );

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("Role import Complete.");

  return "Success";
  </Source>
  </Rule>
  <Rule created="1614329611695" id="0a111e5c77a51bf38177dd8b05af6eea" language="beanshell" modified="1614688496411" name="Show-password">
    <Description>
    Import template-defined Roles from a CSV file.
  </Description>
    <Signature returnType="Map">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>
  // Sample Tool to import Roles.
  import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;

return context.decrypt("1:ACP:GCFS/92obC2htLtiOpfU1ZS8EKnvopaom03vbuVMrO8=")
  </Source>
  </Rule>
  <Rule created="1614878614667" id="0a111e5c77a51bf38177fe44248b7b6e" language="beanshell" modified="1616844850075" name="CF-ExchangeSetRemoteAttrsWithoutDefaultPolicy-Rule" type="ConnectorAfterCreate">
    <Attributes>
      <Map>
        <entry key="ObjectOrientedScript" value="true"/>
        <entry key="disabled" value="false"/>
        <entry key="extension" value=".ps1"/>
        <entry key="program" value="powershell.exe"/>
        <entry key="timeout" value="150"/>
      </Map>
    </Attributes>
    <Description>
    An IdentityIQ Server-Side rule that is executed AFTER the connector's provisioning method is called. 
    This rule is called after accounts have been created on the underlying AD domain.
  </Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>  
   
  Add-type -path E:\IQService\IQService\utils.dll


   try{
     $date = Get-Date
    ECHO "Creating Exchange Remote  Mailbox on Get-Date on****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
      $sReader = New-Object System.IO.StringReader([System.String]$env:Request); 
    $xmlReader = [System.xml.XmlTextReader]([sailpoint.Utils.xml.XmlUtil]::getReader($sReader)); 
    $requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);
 ECHO "Creating Exchange Remote  Before Request Operation****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
    #if($requestObject.Operation -eq "Create"){
    ECHO "Creating Exchange Remote  Inside create Operation****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC

      $s=New-PSSession -ConfigurationName microsoft.exchange -ConnectionUri "http://sv-exmail16-t1.carefirsttest.com/powershell"
       ECHO "Creating Exchange Remote  new session ****"$s |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        Import-PSSession $s -WarningAction silentlycontinue -ErrorAction silentlycontinue -AllowClobber -DisableNameChecking -commandname enable-remotemailbox,set-remotemailbox
  ECHO "Creating Exchange Remote  After import session ****" |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        foreach ($attribute in $requestObject.AttributeRequests){
       ECHO "Creating Exchange Remote  Inside For loop****"$date |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC

        if($attribute.Name -eq "sAMAccountName"){
          [string]$samAccountName = $attribute.Value
            ECHO "Creating Exchange Remote SamAccountName = ****"$samAccountName |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        }
       
if($attribute.Name -eq "mail"){
          [string]$emailValue = $attribute.Value
            ECHO "Creating Exchange Remote emailValue = ****"$emailValue |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORC
        }
  

      }
      ECHO  $samaccountName |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE 
        
          
          enable-RemoteMailbox -Identity $samAccountName -Alias $samAccountName -PrimarySmtpAddress $emailValue -RemoteRoutingAddress $samAccountName@carefirsttest.mail.onmicrosoft.com

          enable-remotemailbox -identity $samAccountName -Archive
        
          ECHO "Exchange mailBox Created for "+$samaccountName  + "on "  |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE            
            
            Set-RemoteMailbox -Identity $samaccountName -EmailAddressPolicyEnabled:$true
              
              ECHO "New mailbox attribute set for "+$samaccountName  + "on "  |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE
                
         Set-RemoteMailbox -Identity $samaccountName -PrimarySmtpAddress $emailValue -EmailAddressPolicyEnabled:$false
           
           ECHO "New mailbox attribute set to FALSE for "+$samaccountName  + "on "  |Add-Content -path E:\Test\ExchangeMailboxlogFile.txt -FORCE
            
    #}

  }
  catch{
    ECHO "error:" $_.exception.message|Add-Content -path E:\ExchangeMailboxError.txt -FORCE
      $errorMessage = $_.exception.message;

  }

 // return "Succes";
  </Source>
  </Rule>
  <Rule created="1614951016431" id="0a111e5c77a51bf381780294e7ef04dc" language="beanshell" modified="1617036218717" name="CF-ADDisplayName-RuleUpdated" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;
import java.lang.Character;
 
String firstname ="";
String displayName = "";
String middlename = identity.getAttribute("middleName");
String lastname =  identity.getLastname();
if(identity.getAttribute("prefFirstName")!=null){
    firstname = identity.getAttribute("prefFirstName");
}else{
    firstname =  identity.getFirstname();
}
if(null != middlename){
    middlename=Character.toString(middlename.charAt(0));
    displayName = lastname+", "+firstname+" "+middlename;
} else {
   displayName = lastname+", "+firstname;
}    
return displayName;</Source>
  </Rule>
  <Rule created="1615275059786" id="0a111e5c77a51bf3817815e56a493b27" language="beanshell" modified="1616810609258" name="CF-Library-MulitiAccessRequestWorkflowRuleLibrary-Rule">
    <Source>

  import java.util.ArrayList;
  import java.util.LinkedHashMap;
  import java.util.List;
  import java.util.Map;
  import java.util.Iterator;
  import java.util.Calendar;
  import java.util.Date;
  import sailpoint.object.Custom;
  import java.util.HashMap;

  import org.apache.commons.lang.StringUtils;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;

  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest;

  import sailpoint.object.ApprovalItem;
  import sailpoint.object.ApprovalSet;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Link;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.WorkItem.State;
  import sailpoint.object.Workflow.Approval;
  import sailpoint.object.IdentityEntitlement;
  import sailpoint.object.Comment;
  import sailpoint.object.Identity;

  import sailpoint.api.ManagedAttributer;
  import sailpoint.api.IdentityService;
  import sailpoint.api.ObjectUtil;
  import sailpoint.tools.GeneralException;
  import sailpoint.tools.Util;
  import sailpoint.tools.xml.XMLObjectFactory;
  import sailpoint.object.Form;


  private static Logger logger = Logger.getLogger("cf.iiq.workflow.MultipleAccessRequestWorkflowRuleLibrary");
  logger.setLevel(Level.DEBUG);

  private static String KEY_APPROVAL_ITEM_ATTR_NAME_OPERATION = "operation";
  private static String KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE = "Remove";

  private static String KEY_DIRECT_REPORTS_TO_APPROVAL_STRING = "approval1";
  private static String KEY_SECOND_APROVAL_STRING = "approval2";
  private static String KEY_MANAGER2_APPROVAL_STRING = "Manager Approval";
  private static String KEY_DIRECTOR_APPROVAL_STRING = "Director Approval";
  private static String KEY_VP_APPROVAL_STRING = "VP Approval";
  private static String KEY_SELFATTESTATION_APPROVAL_STRING = "self attestation";
  private static String KEY_SELFATTESTATION_STRING = "Self attestation - In performing the duties of my job, I may have access to knowledge of associates, their dependents and beneficiaries claims and/or medical records and hereby agree to treat all such information as strictly confidential. I have read the applicable policy and procedure regarding confidentiality of associate records and understand my responsibility as an associate of CareFirst. Further, I understand the failure to adhere to all appropriate policy and procedures relating to the confidentiality of associate records may result in immediate termination of employment.";




  /**
              * Build Approvals related application owners
              *
              * @param approvalSet
              * @return
              */
  public static List multiAccessFirstLevelAppoval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - firstLevelAppoval **");
	Identity identity=context.getObject(Identity.class,identityName);                            
    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   
    Identity manager=null;
    String requesteeAuthSource = null;
    Identity requestee=context.getObject(Identity.class,identityName);
    if(requestee!=null){
      manager=requestee.getManager();
    }
    if(null == manager){
      manager=context.getObject(Identity.class,"spadmin");
    }

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();
          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             
          Application application = context.getObject(Application.class, item.getApplicationName()); 

          String applicationName = item.getApplicationName();
          logger.info("***applicationName:: " + applicationName);
          
            if(null != launcher){ 
              String managerName = manager.getName();
              if(!managerName.equalsIgnoreCase(launcher)){
                objectOwner=manager;
                Map prefrencesmap = objectOwner.getPreferences();
                if(null != prefrencesmap){
                Object forwardUser = prefrencesmap.get("forward");
                if (null != forwardUser) {
                  Identity neForwarduseIs = getForwardUserIdentity(prefrencesmap, objectOwner, forwardUser);
                  objectOwner=neForwarduseIs;

                }
                }
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                    System.out.println("----In First level approval owner is:::"+objectOwner);
                    
                  }
                }
                enableObjectOwnerApproval=true;
              }else {
                autoApproveRequest(item);
              }
            }
          

          

          logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
          // If appOwner approval not required continue to the next item
          if(!enableObjectOwnerApproval)
            continue;

          if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
            item.setState(null);
          if(enableObjectOwnerApproval)
            finalApprovalItems.add(item);
        }


        logger.info("size fo the current item::"+finalApprovalItems.size());

        if(finalApprovalItems==null || finalApprovalItems.isEmpty())
        {
          logger.info("***no items to process....");
          haveApprovalItems=false;
        }
        newApprovalSet.setItems(finalApprovalItems);
      }

      
      logger.info("haveApprovalItems to set::"+haveApprovalItems);
      if(haveApprovalItems)
      {
        logger.info("***Get the manager to set as approver***");
        Approval approval = new Approval();
        approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
        approval.addArg("workItemTargetName", identityName);
        setApprovalDescription("First Level Approval", identityDisplayName, approval);
        approval.setOwner(objectOwner.getName());
        approval.setApprovalSet(newApprovalSet);
        finalApprovals.add(approval);
      }
    }
    logger.info("***End - firstLevelAppoval");
    return finalApprovals;
  }

  public static List multiAccessSecondApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessSecondApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  logger.info("***For MAP Is:: " +map);

      approvalScheme =map.get("Approval2");
    
    
   
  }
          
          logger.info("***For approvalScheme:: "+approvalScheme);

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                
						enableObjectOwnerApproval=true;
            }
            }
          
          if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
      if(haveApprovalItems)
      {
        logger.info("***Get the manager to set as approver***");
        Approval approval = new Approval();
        approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
        approval.addArg("workItemTargetName", identityName);
        setApprovalDescription("First Level Approval", identityDisplayName, approval);
        approval.setOwner(objectOwner.getName());
        approval.setApprovalSet(newApprovalSet);
        finalApprovals.add(approval);
      }
    }
    logger.info("***End - firstLevelAppoval");
    return finalApprovals;
  }

  public static List multiAccessSecondApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessSecondApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  logger.info("***For MAP Is:: " +map);

      approvalScheme =map.get("Approval2");
    
    
   
  }
          
          logger.info("***For approvalScheme:: "+approvalScheme);

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                
						enableObjectOwnerApproval=true;
            }
            }
          
          if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Second Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }
	
	public static List multiAccessThirdApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessThirdApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  
      approvalScheme =map.get("Approval3");
    }

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Third Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }
	
	public static List multiAccessFourthApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessFourthApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
 
      approvalScheme =map.get("Approval4");
  }

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Fourth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }

public static List multiAccessFifththApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessFifththApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  
      approvalScheme =map.get("Approval5");
    
    
   
  }

            
           if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Fifth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }
	public static List multiAccessSixththApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessSixththApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  
      approvalScheme =map.get("Approval6");
   
  }

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Sixth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }


public static List multiAccessSevenththApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessSevenththApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  
      approvalScheme =map.get("Approval7");
    
    
   
  }

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Seventh Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }

public static List multiAccessEieghthApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessEieghthApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
 
      approvalScheme =map.get("Approval8");
    
    
  
  }

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Eieghth Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }


public static List multiAccessNinethApproval(ApprovalSet approvalSet,WorkflowContext wfc)
  {
    logger.info("***Begin - multiAccessNinethApproval**");
    Identity identity=context.getObject(Identity.class,identityName);                            

    Identity objectOwner = null;
    List finalApprovals = new ArrayList();      
    String approvalScheme = null;   

    Identity manager=null;
    String requesteeAuthSource = null;

    //Iterate through the approvals
    if(approvalSet != null)
    {
      logger.info("***Requestee ::" + identityName+ " ::Requestor:::"+launcher);

      ApprovalSet newApprovalSet=new ApprovalSet();
      Boolean haveApprovalItems = true;

      if(approvalSet !=null)
      {
        List approvalItems=approvalSet.getItems();
        List finalApprovalItems=new ArrayList();

        for(ApprovalItem item: approvalItems)
        {
          boolean enableObjectOwnerApproval = false;

          // check current state
          if (item.getState() != null 
              &amp;&amp; (item.getState().equals(State.Rejected) 
                          || item.getState().equals(State.Expired))) 
          {
            logger.info("***For the current approval item:: " + item + " detected state is:: " + item.getState() + ". Not including in build approvals");
            continue;
          }

          String accessName = null;
          logger.info("***approval Item values:::"+item.getValue());
          if (item.getValue() instanceof ArrayList) 
            accessName = item.getValue().get(0);
          else
            accessName = item.getValue();

          logger.info("***Got accessName:: " + accessName);

          // Verifying Operation type
          String operationType = item.getOperation();

          logger.info("***For AccessName:: " + accessName + " ,Detected Operation:: " + operationType);
          if (operationType.contains(KEY_APPROVAL_ITEM_OPERATION_TYPE_REMOVE)) 
          {
            logger.info("***For remove operation no approvals are required:: " + operationType);
            completeApprovalItem(item);
            continue;
          }             

          
          Application application = context.getObject(Application.class, item.getApplicationName()); 
		  String applicationName = item.getApplicationName();
		  Map map = new HashMap();
Custom customObj= context.getObjectByName(Custom.class,"CF-DisconnectedApprovalList-Custom");
  if (customObj.get(applicationName) !=null){
  map=customObj.get(applicationName);
  
      approvalScheme =map.get("Approval9");
    
    
   
  }

            
            if(null != approvalScheme){
              String approvaerValusIs = fetchApproverValue(approvalScheme, identity);
              if(null != approvaerValusIs){
            Identity ownerIdentity=context.getObject(Identity.class,approvaerValusIs);           
            objectOwner=ownerIdentity;
              logger.info("***For objectOwner:: "+objectOwner);
                 if(null != objectOwner){

                  if(objectOwner.getName().equalsIgnoreCase(identityName) &amp;&amp; !approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
                    objectOwner = getMultiAccessDirector(objectOwner);
                  }
                }
                
						enableObjectOwnerApproval=true;
            }
            }
          
         
            logger.info("enableObjectOwnerApproval*****"+enableObjectOwnerApproval);
            // If appOwner approval not required continue to the next item
            if(!enableObjectOwnerApproval)
              continue;

            if(item.getState() !=null &amp;&amp; item.getState().equals(State.Finished))
              item.setState(null);
            if(enableObjectOwnerApproval)
              finalApprovalItems.add(item);
          }


          logger.info("size fo the current item::"+finalApprovalItems.size());

          if(finalApprovalItems==null || finalApprovalItems.isEmpty())
          {
            logger.info("***no items to process....");
            haveApprovalItems=false;
          }
          newApprovalSet.setItems(finalApprovalItems);
        }

        logger.info("haveApprovalItems to set::"+haveApprovalItems);
        if(haveApprovalItems)
        {
          logger.info("***Get the manager to set as approver***");
          Approval approval = new Approval();
          approval.addArg("workItemTargetClass", "sailpoint.object.Identity");
          approval.addArg("workItemTargetName", identityName);
          if(approvalScheme!=null){
            if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){
              setApprovalDescription(KEY_SELFATTESTATION_STRING, identityDisplayName, approval);
            }
            else{
              setApprovalDescription("Nine Level Approval", identityDisplayName, approval);
            }
          }
          approval.setOwner(objectOwner.getName());
          approval.setApprovalSet(newApprovalSet);

          finalApprovals.add(approval);
        }
      }
      logger.info("***End - secondApproval***");
      return finalApprovals;
    }






    /**
              * Auto approve the given approvalItem
              * 
               * @param approvalItem
              */
    public static void autoApproveRequest(ApprovalItem approvalItem) {
      logger.info("***Begin - autoApproveRequest. Got approvalItem as::: " + approvalItem);
      autoApproveRequest(approvalItem, "Item is auto-approved by system as approver and requester are same person.");
      logger.info("***Exiting method autoApproveRequest***");
    }

    /**
              * Auto approve the given approvalItem
              * 
               * @param approvalItem
              */
    public static void autoApproveRequest(ApprovalItem approvalItem, String commentString) {
      logger.info("***Begin - autoApproveRequest. Got approvalItem as:: " + approvalItem + " and commentString as:: "
                         + commentString);

      approvalItem.setState(State.Finished);
      approvalItem.add(new Comment(commentString, "system"));
      approvalItem.setOwner(launcher);
      logger.info("approvalItem: " + approvalItem.toXml());
      try {
        IdentityLibrary.auditDecision(wfcontext, approvalItem);
      } catch (GeneralException e) {
        logger.error("***Failed to audit approval auto approve", e);
      }
      logger.info("***Exiting method autoApproveRequest****");
    }

    /**
              * Complete the approvalItem to process further
              * 
               * @param approvalItem
              */
    public static void completeApprovalItem(ApprovalItem approvalItem) {
      logger.info(launcher+"Begin - completeApprovalItem. Got approvalItem as:: " + approvalItem);

      approvalItem.setState(State.Finished);
      //approvalItem.setOwner(launcher);
      logger.info("***Exiting method completeApprovalItem***");
    }

    /**
              * 
               * @param approvalType
              * @param identityDisplayName
              * @param approval
              */
    public void setApprovalDescription(String approvalType, String identityDisplayName, Approval approval) {
      logger.info("***Begin - setApprovalDescription***");
      String description = Util.splitCamelCase(approvalType) + "- Account Changes for User: "
        + identityDisplayName;

      approval.setDescription(description);
      logger.info("***End - setApprovalDescription***");
    }

    /**
              * 
               * @param approvalSetMap
              * @param approvalItem
              * @param approver
              */
    public static void addApproverToSet(Map approvalSetMap, ApprovalItem approvalItem, String approver) {
      logger.info("***Begin - addApproverToSet***");
      ApprovalSet approvalSet = null;
      if (!approvalSetMap.containsKey(approver)) {
        approvalSet = new ApprovalSet();
      } else {
        approvalSet = (ApprovalSet) approvalSetMap.get(approver);
      }

      ApprovalItem approvalItemCopy = (ApprovalItem) XMLObjectFactory.getInstance().clone(approvalItem, context);
      approvalItemCopy.setOwner(null);
      approvalItemCopy.setApprover(null);
      approvalItemCopy.setState(null);
      approvalSet.add(approvalItemCopy);
      approvalSetMap.put(approver, approvalSet);
      logger.info("***End - addApproverToSet***");
    }             


    /**
              * Get requestee's manager
              * 
               * @param identityName
              */
    public static Identity getIdentityManager(String identityName)
    {

      Identity manager=null;
      String requesteeAuthSource = null;
      Identity requestee=context.getObject(Identity.class,identityName);
      if(requestee!=null){
        manager=requestee.getManager();
      }
      if(null == manager)
        requesteeAuthSource = requestee.getAttribute("authSource");
      if(Util.isNotNullOrEmpty(requesteeAuthSource) &amp;&amp; !requesteeAuthSource.equalsIgnoreCase("HR"))
      {
        String managerId=requestee.getAttribute("reportingsupid");
        manager=context.getObject(Identity.class,managerId);
      }
      return manager;
    }

    /**
              * Get approval schema from entitlement/role/application
              * 
               * @param accessObject
              * @return approvalScheme
              */
    public static String getApprovalScheme(Object accessObject, String approvalLevel)
    {
      String approvalScheme = null;
      if(null != accessObject &amp;&amp; accessObject instanceof Bundle)
        approvalScheme = ((Bundle)accessObject).getAttribute(approvalLevel);
      if(null != accessObject &amp;&amp; accessObject instanceof ManagedAttribute)
        approvalScheme = null;

      return approvalScheme;
    }

    public static String fetchApproverValue(String approvalScheme, Identity identity){
      if(approvalScheme.equalsIgnoreCase(KEY_MANAGER2_APPROVAL_STRING)){
        String manager2 = identity.getAttribute("manager2");
        return manager2;
      }else if(approvalScheme.equalsIgnoreCase(KEY_DIRECTOR_APPROVAL_STRING)){
        String director = identity.getAttribute("director");
        return director;
      }
      else if(approvalScheme.equalsIgnoreCase(KEY_VP_APPROVAL_STRING)){
        String vp = identity.getAttribute("vp");
        return vp;

      }
      else if(approvalScheme.equalsIgnoreCase(KEY_SELFATTESTATION_APPROVAL_STRING)){

        return identityName;
      }

      else {
        return approvalScheme;
      }

    }
    /**
              * Checking if the specified approval is required or not
              * 
              * @param ApprovalSchema, ApprovalSchema, approvalStage
              * @return approvalScheme
              */
    public static boolean requireSpecifiedApproval(String approvalScheme, ApprovalItem item, String approvalStage)
    {
      if(Util.isNullOrEmpty(approvalScheme))
      {
        logger.info("approvalScheme: " + approvalScheme);
        return false;
      }
      if(!approvalScheme.contains(approvalStage))
      {
        logger.info("***No approval Needed***");
        logger.info("***complete the buildManagerApproval step to continue further***");
        completeApprovalItem(item);
        return false;                                   
      }
      return true;
    }

    /**
              * For the given roleName return role/Bundle object
              * 
               * @param roleName
              * @return
              */
    public static Bundle getBundle(String roleName) {

      logger.info("***Begin - getBundle. Got roleName as::: " + roleName);

      Bundle bundle = context.getObject(Bundle.class, roleName);
      logger.info("***For the given roleName:: " + roleName + " query result is:: " + rolesList);

      logger.info("***For  roleName:: " + roleName + " found object:: " + bundle);
      logger.info("***End - getBundle");
      return bundle;
    }

    public static Identity getForwardUserIdentity(Map prefrencesmap, Identity objectOwner, String forwardUser){

      Date startDate = prefrencesmap.get("forwardStartDate");
      Date endtDate =  prefrencesmap.get("forwardEndDate");
      Date todayDateIs = new Date();

      Identity newForwardUser = objectOwner;

      if (startDate == null &amp;&amp; null == endtDate) {

        newForwardUser = context.getObject(Identity.class,forwardUser);
      } else if (startDate == null &amp;&amp; endtDate != null) {
        if (todayDateIs.before(endtDate) || todayDateIs.before(endtDate)) {
          newForwardUser = context.getObject(Identity.class,forwardUser);
        }else {
          logger.info("#####End Date Lessthan today date");
        }
      } else if (startDate != null &amp;&amp; endtDate == null) {
        if (todayDateIs.after(startDate) || todayDateIs.equals(startDate)) {
          newForwardUser = context.getObject(Identity.class,forwardUser);
        }
      } else if (startDate != null &amp;&amp; endtDate != null) {
        if ((todayDateIs.after(startDate) || todayDateIs.equals(startDate))
            &amp;&amp; (todayDateIs.before(endtDate) || todayDateIs.before(endtDate))) {
          newForwardUser = context.getObject(Identity.class,forwardUser);

        }else {
          logger.info("** No Action");
        }
      } 


      return newForwardUser;

    }
  public static Identity getMultiAccessDirector(Identity objectOwner){
     Identity targetIdentity=context.getObject(Identity.class,identityName); 
     String approverDirector = targetIdentity.getAttribute("director");
          if(null !=approverDirector){
            if(identityName.equalsIgnoreCase(approverDirector)){
              System.out.println("----Target user and approver director same");
              String approvervp = targetIdentity.getAttribute("vp");
              if(null !=approvervp &amp;&amp; !objectOwner.getName().equalsIgnoreCase(approvervp)){
                objectOwner=context.getObject(Identity.class,approvervp); 
              }else{
								objectOwner=context.getObject(Identity.class,"FallbackApprovers"); 
              }
            }else{
              
               objectOwner=context.getObject(Identity.class,approverDirector); 
            }
           }else{
            String approvervpIs = targetIdentity.getAttribute("vp");
              if(null !=approvervpIs &amp;&amp; !objectOwner.getName().equalsIgnoreCase(approvervpIs)){
                objectOwner=context.getObject(Identity.class,approvervpIs); 
              }else{
            objectOwner=context.getObject(Identity.class,"FallbackApprovers"); 
              }
            }
     					Map prefrencesmapIs = objectOwner.getPreferences();
                 if(null != prefrencesmapIs){
                Object forwardUserIs = prefrencesmapIs.get("forward");
                if (null != forwardUserIs) {
                  Identity neForwarduseIs = getForwardUserIdentity(prefrencesmapIs, objectOwner, forwardUserIs);
                  if(neForwarduseIs.getName().equalsIgnoreCase(identityName)){
                     System.out.println("----In First level approval approver and forward user are same:::"+objectOwner);
                  objectOwner=objectOwner=context.getObject(Identity.class,"FallbackApprovers"); 
                  }
                }
                }
      return objectOwner;
    }
  

    </Source>
  </Rule>
  <Rule created="1615578982510" id="0a111e5c77a51bf381782802e86e3e8c" language="beanshell" modified="1615581448089" name="Test-AggrRule">
    <Source>
  import sailpoint.object.Application;
  import sailpoint.object.Attributes;
  import sailpoint.object.ResourceObject;
  import sailpoint.object.TaskResult;
  import sailpoint.api.Aggregator;
  import sailpoint.connector.Connector;

  /*
		 * Provide the appName and acctNativeIdentity below and run the rule in Debug
		 */
  String appName = "ISAM LDAP";
  String acctNativeIdentity = "uid=AAH1008,ou=users,dc=carefirst,dc=com";

  Application appObject = context.getObjectByName(Application.class, appName);
  String appConnName = appObject.getConnector();
  Connector appConnector = sailpoint.connector.ConnectorFactory.getConnector(appObject, null);
  ResourceObject rObj = appConnector.getObject("account", acctNativeIdentity, null);

  if(rObj!=null) {
    Attributes argMap = new Attributes();
    argMap.put("aggregationType", "account");
    argMap.put("applications", appName);
    argMap.put("noOptimizeReaggregation", "true");
    Aggregator agg = new Aggregator(context, argMap);
    TaskResult result = agg.aggregate(appObject,rObj);
    return rObj.toXml();
  } else {
    return "The account: " + acctNativeIdentity + " can not be found.";
  }
  </Source>
  </Rule>
  <Rule created="1615829953109" id="0a111e5c783114e2817836f86a550ab9" language="beanshell" modified="1615879053761" name="CF-DiscApp-BeforeProv-Rule" type="BeforeProvisioning">
    <Description>An IdentityIQ server-side rule that is executed before the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan BEFORE it is sent to the underlying connectors used in provisioning. 

This rule will be called for any application found in a plan that also has a configured 'beforeProvisioningRule' configured.  

The plan can be updated directly in the rule by reference and does not need to return the plan.</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="plan">
          <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
        </Argument>
        <Argument name="application">
          <Description>
          The application object that references this before/after script.
        </Description>
        </Argument>
      </Inputs>
    </Signature>
    <Source>import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Identity;
  			System.out.println(plan.toXml());
  		Identity identity = context.getObjectByName(Identity.class,plan.getNativeIdentity());
  		String natId = "";
  if(identity!=null){
    if(identity.getAttribute("userid")!=null){
  		natId = identity.getAttribute("userid");
    }
  }
  		List accounts = plan.getAccountRequests();
				if (accounts != null)
        {
        for (AccountRequest acctRequest : accounts )
        {
          acctRequest.setNativeIdentity(natId);
        }
       }
  		System.out.println("-------------------------Before Provisioning Plan Request Disc Application After Setting NativeID---------------------------"+plan.toXml());</Source>
  </Rule>
  <Rule created="1616592350685" id="0a111e5c785d172f81786469addd1cbe" language="beanshell" modified="1616660878892" name="CF-ADPreferredNameChange-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="Object">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="value" type="Object">
          <Description>
           The value of the identity attribute.  Note that this could be single value or a list of values.
        </Description>
        </Argument>
        <Argument name="sourceIdentityAttribute">
          <Description>
           The sailpoint.object.ObjectAttribute for this target.
        </Description>
        </Argument>
        <Argument name="sourceIdentityAttributeName">
          <Description>
           The name of the identity attribute for this target.
        </Description>
        </Argument>
        <Argument name="sourceAttributeRequest">
          <Description>
           The sailpoint.object.ProvisioningPlan.AttributeRequest that is
           setting the attribute on the identity.
        </Description>
        </Argument>
        <Argument name="target">
          <Description>
           The sailpoint.object.AttributeTarget that is being processed.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The sailpoint.object.Link that is being processed.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The sailpoint.object.Identity that is being processed.
        </Description>
        </Argument>
        <Argument name="project">
          <Description>
           The sailpoint.object.ProvisioningProject that has the changes that
           are being requested.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The transformed value that will be pushed to the target.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
 
import sailpoint.object.Identity;
import sailpoint.object.Application;
import sailpoint.api.IdentityService;
import java.util.List;
import sailpoint.object.*;
if (null != identity) {
    try {
        
		String prefFirstName = identity.getAttribute("prefFirstName");		
		String lastName = identity.getAttribute("lastname");
		String middleName = identity.getAttribute("middleName");
		String userEmail = identity.getAttribute("email");
		String aDdisplayName = "";
		int userEmailDotCount = 0;    
        
        for(int i = 0; i &lt; userEmail.length(); i++) {    
            if(userEmail.charAt(i) =='.')
                userEmailDotCount++;    
        }    
		
		if(userEmailDotCount>2){		      
		aDdisplayName = lastName +", "+prefFirstName+" "+middleName;
      System.out.println("Inside CF-ADPreferredNameChange-Rule, inside if block, aDdisplayName "+  aDdisplayName);
		}
		
		else{
		aDdisplayName = lastName +", "+prefFirstName;
      System.out.println("Inside CF-ADPreferredNameChange-Rule, inside if block, aDdisplayName "+  aDdisplayName);
		}
   return aDdisplayName;
		}

	
   catch (Exception e) {
        //logger.error("got the error in manager update rule");
        //logger.error(e);
    }
}</Source>
  </Rule>
  <Rule created="1616593101924" id="0a111e5c785d172f8178647524641cd5" language="beanshell" modified="1616593120670" name="CF-BizappADUserPrincipalName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;

String userid = identity.getAttribute(ATR_USERID);


String userPrincipalName=userid+"@bizappstest.local";



return userPrincipalName;</Source>
  </Rule>
  <Rule created="1616599442600" id="0a111e5c785d172f817864d5e4a81df5" language="beanshell" name="CF-GlobalWorkItemForwarding-Rule" type="WorkItemForward">
    <Description>A rule used to examine a WorkItem and determine whether or not it needs to be forwarded to a new owner for further analysis or action. The default forwarding rule in the system configuratin will be called every time a WorkItem is opened, and whenever it is forwarded in the user interface.</Description>
    <Signature returnType="Object">
      <Inputs>
        <Argument name="log">
          <Description>
The log object associated with the SailPointContext.
</Description>
        </Argument>
        <Argument name="context">
          <Description>
A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
</Description>
        </Argument>
        <Argument name="item">
          <Description>
The WorkItem being opened or forwarded.
</Description>
        </Argument>
        <Argument name="owner">
          <Description>
The Identity that currently owns the work item.
</Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="newOwner">
          <Description>
An Identity that should own the work item. Alternatively, this can
be a String that is the name or id of the Identity.
</Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>
import sailpoint.object.Identity;
import sailpoint.object.IdentityRequest;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.WorkItem;
import sailpoint.tools.GeneralException;

IdentityRequest identityRequestObj = null;
String targetId = "";
WorkItem workitem = context.getObjectByName(WorkItem.class, item.name);
if (null != workitem) {
String identityRequestId = workitem.getIdentityRequestId();
if(identityRequestId != null) {
identityRequestObj = context.getObjectByName(IdentityRequest.class, identityRequestId);
}
if(null != identityRequestObj) {
targetId = identityRequestObj.getTargetId();
}
Identity targetUser = context.getObjectById(Identity.class, targetId);
if(null != targetUser &amp;&amp; targetUser.getName().equalsIgnoreCase(owner.getName())){
newOwner = context.getObjectByName(Identity.class, "FallbackApprovers");
return newOwner;
}
}

</Source>
  </Rule>
  <Rule created="1616656607526" id="0a111e5c785d172f8178683e292629c4" language="beanshell" modified="1616690680044" name="CF-Update-Company" type="IdentityAttribute">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
          Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
          The Identity object that represents the user
          that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
          The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
          The Link object from the Identity, if this is an application
          mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.Link;
  import sailpoint.object.Link;
  import sailpoint.api.Provisioner;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.text.DateFormat;  
  import java.text.SimpleDateFormat;  
  import java.util.Date;  
  import sailpoint.object.QueryOptions;
  import java.util.Calendar;  
  import java.util.Date;
  import java.util.Date;
  import java.util.List;
  import java.util.Iterator;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.NotificationConfig;
  import sailpoint.object.WorkItem;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import org.apache.log4j.Logger;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  import java.text.*;
  import java.util.Calendar;
  import java.util.Date;
  import java.time.LocalDateTime;
  import java.time.format.DateTimeFormatter;
  import java.time.temporal.ChronoUnit;

  //Logger log = Logger.getLogger("com.carefirst.UpdateDirectorRule");

  //log.info("identity value = "+identity);
  System.out.println("identity value = "+identity);
  System.out.println("***************Old Value of company:*********************"+oldValue);
  try{

    if(null != identity){
      //String strAction = newIdentity.getAttribute(ATR_ACTION) != null ? newIdentity.getAttribute(ATR_ACTION) : "";
      String effDate = identity.getAttribute("effdt") != null ? identity.getAttribute("effdt") : "";
      String strAction = identity.getAttribute(ATR_ACTION) != null ? identity.getAttribute(ATR_ACTION) : "";  
      //log.info("Starting Carefirst Update Company Rule Action is "+effDate);

      if(identity != null &amp;&amp;  Util.isNotNullOrEmpty(effDate)) {

        Date actDate = new SimpleDateFormat("dd-MMM-yy").parse(effDate);
        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-dd-MM");
        System.out.println("************Effective Date***********"+sdf1.format(actDate));
        Date date = new Date(System.currentTimeMillis());
        System.out.println("************Effective Date***********"+sdf1.format(date));
        if(sdf1.format(date).compareTo(sdf1.format(actDate))>=0){

          String company = link.getAttribute("COMPANY");
          System.out.println("************attributeValue***********"+company);
          if(company!=null){
            System.out.println("************attributeValue***********"+company);
            return company;
          }
        }
        else{
          /*String company = identity.getAttribute("company");
		System.out.println("************Inside else Company is empty***********");
    //identity.setAttribute("company",company);
    System.out.println("************attributeValue***********"+company);
		//context.saveObject(identity);
		//context.commitTransaction();*/
          if(oldValue == null){
            String company = link.getAttribute("COMPANY");
            System.out.println("************attributeValue inside else***********"+company);
            if(company!=null){
              System.out.println("************attributeValue inside else***********"+company);
              return company;
            }
          }
          else{
            System.out.println("************oldValue in else***********"+oldValue);
            return oldValue;
          }
        }
      }
      /*else{
      String company = link.getAttribute("COMPANY");
      System.out.println("************attributeValue***********"+company);
      if(company!=null){
      System.out.println("************attributeValue***********"+company);
      return company;
    }*/
    }
  }
  catch(Exception e){
  }</Source>
  </Rule>
  <Rule created="1616696304022" id="0a111e5c785d172f81786a9be19636a6" language="beanshell" name="CF-LDAPDepartment-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <Signature returnType="Object">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="value" type="Object">
          <Description>
           The value of the identity attribute.  Note that this could be single value or a list of values.
        </Description>
        </Argument>
        <Argument name="sourceIdentityAttribute">
          <Description>
           The sailpoint.object.ObjectAttribute for this target.
        </Description>
        </Argument>
        <Argument name="sourceIdentityAttributeName">
          <Description>
           The name of the identity attribute for this target.
        </Description>
        </Argument>
        <Argument name="sourceAttributeRequest">
          <Description>
           The sailpoint.object.ProvisioningPlan.AttributeRequest that is
           setting the attribute on the identity.
        </Description>
        </Argument>
        <Argument name="target">
          <Description>
           The sailpoint.object.AttributeTarget that is being processed.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The sailpoint.object.Link that is being processed.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The sailpoint.object.Identity that is being processed.
        </Description>
        </Argument>
        <Argument name="project">
          <Description>
           The sailpoint.object.ProvisioningProject that has the changes that
           are being requested.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The transformed value that will be pushed to the target.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
String bucode = "";
String departmentName = "";
if (identity != null) {
    try {
		if (identity.getAttribute("businessunit") != null) {
			bucode = identity.getAttribute("businessunit");
		}
		if (identity.getAttribute("departmentName") != null) {
			departmentName = identity.getAttribute("departmentName");
		}
		String deptID = bucode + " " + "-" + " " + departmentName;
		return deptID;
	} catch (Exception e) {
		//logger.error("got the error in departmentName update rule");
	}
}</Source>
  </Rule>
  <Rule created="1616743660001" id="0a111e5c786b1a9981786d6e79e104f4" language="beanshell" name="CF-DeptID-TargetMapping-Rule" type="IdentityAttributeTarget">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="identity" type="Identity">
          <Description>
          The Identity object that represents the user needing the field value.
        </Description>
        </Argument>
        <Argument name="link" type="Link">
          <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
        </Argument>
        <Argument name="group" type="ManagedAttribute">
          <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="project" type="ProvisioningProject">
          <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
        </Argument>
        <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
          <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
          <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="role" type="Bundle">
          <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="application" type="Application">
          <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
        </Argument>
        <Argument name="template" type="Template">
          <Description>
          The Template that contains this field.
        </Description>
        </Argument>
        <Argument name="field" type="Field">
          <Description>
          The current field being computed.
        </Description>
        </Argument>
        <Argument name="current" type="Object">
          <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
        </Argument>
        <Argument name="operation" type="ProvisioningPlan.Operation">
          <Description>
          The operation being performed.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="value">
          <Description>
          The string value created.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
String bucode = "";
String departmentName = "";
if (identity.getAttribute("businessunit") != null) {
    bucode = identity.getAttribute("businessunit");
}
if (identity.getAttribute("departmentName") != null) {
    departmentName = identity.getAttribute("departmentName");
}
String deptID = bucode + " " + "-" + " " + departmentName;
return deptID;</Source>
  </Rule>
  <Rule created="1616744113059" id="0a111e5c786b1a9981786d7563a20500" language="beanshell" name="CF-ManagerDN-TargetMapping-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="Object"/>
    <Source>
	import sailpoint.object.Identity;
	import sailpoint.object.Application;
	import sailpoint.api.IdentityService;
	import java.util.List;
	import sailpoint.object.*;
if(null !=identity){
	try{
		String managerDN=null;

		Application adApp = context.getObjectByName(Application.class,STR_ACTIVE_DIRECTORY);
		IdentityService identityServ=new IdentityService(context);
		if(null != identity.getManager()){
			Identity managerObj=identity.getManager();
			//logger.debug("Getting Manager Object from the Identity");
			List adLinks=identityServ.getLinks(managerObj,adApp);
			if(null != adLinks){
				Link adLink=adLinks.get(0);
				//logger.debug("Getting the manager DN from AD link");
				managerDN=adLink.getNativeIdentity();
				return managerDN;
			}

		}

	}
	catch(Exception e){
	//logger.error("got the error in manager update rule");
	//logger.error(e);
	}
}


</Source>
  </Rule>
  <Rule created="1616747011579" id="0a111e5c786b1a9981786da19dfb0594" language="beanshell" name="CF-BizAppADDisplayName-TargetMapping-Rule" type="IdentityAttributeTarget">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String firstname ="";
 String displayName = "";

firstname =  identity.getFirstname();

String lastname =  identity.getLastname();
 
 
   displayName = lastname+", "+firstname ;
  
return displayName;</Source>
  </Rule>
  <Rule created="1616747043068" id="0a111e5c786b1a9981786da218fc0596" language="beanshell" name="CF-BizAppADDisplayName-Rule" type="FieldValue">
    <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

String firstname ="";
 String displayName = "";

firstname =  identity.getFirstname();

String lastname =  identity.getLastname();
 
 
   displayName = lastname+", "+firstname ;
  
return displayName;</Source>
  </Rule>
  <Rule created="1616747950635" id="0a111e5c786b1a9981786daff22b0624" language="beanshell" name="CF-ISAMLDAPCN-TargetMapping-Rule" type="IdentityAttributeTarget">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
    </ReferencedRules>
    <Signature returnType="String"/>
    <Source>import sailpoint.object.*;

  
  String userFN = identity.getAttribute(ATR_FIRSTNAME);
  String userLN = identity.getAttribute(ATR_IDEN_LASTNAME);

  String isamLdapCn=userFN + " " + userLN;
System.out.println("isamLdapCn...."+isamLdapCn);
System.out.println("userFN ...."+userFN );
System.out.println("userLN ...."+userLN );




  return isamLdapCn;</Source>
  </Rule>
  <Rule created="1616899794486" id="0a111e5c786b1a99817876bce636504b" language="beanshell" modified="1617958416738" name="CF-FEPOCSamAccountName-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String"/>
    <Source>if (null != identity) {
  try {
    if (identity.getAttribute("company") != null) {
        
      if (identity.getAttribute("company").equalsIgnoreCase("SBP")) {
        String userFepocADSamaccountName = link.getAttribute("sAMAccountName");
        
        return userFepocADSamaccountName;
      }
    }
  } catch (Exception e){
    System.out.println("Exception Occured: " + e.printStackTrace());
  }
}</Source>
  </Rule>
  <Rule created="1617123534146" id="0a111e5c786b1a9981788412e5426cc0" language="beanshell" modified="1617133040620" name="CF-ADDisplayNameSource-Rule" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
import java.lang.Character;

String displayName = "";
String firstname = identity.getFirstname();
String middlename = identity.getAttribute("middleName");
String lastname =  identity.getLastname();
String prefName =  identity.getAttribute("prefFirstName");
String userEmail = identity.getAttribute("email");
int userEmailDotCount = 0;
if(null != prefName){
    firstname = prefName;
}
if(null != userEmail){
    for (int i = 0; i &lt; userEmail.length(); i++) {
        if (userEmail.charAt(i) == '.')
        userEmailDotCount++;
    }
    if (userEmailDotCount > 2) {
        if(null != middlename){
            middlename=Character.toString(middlename.charAt(0));
            displayName = lastname+", "+firstname+" "+middlename;
        } else {
        displayName = lastname+", "+firstname;
        }    
    } else {
        displayName = lastname+", "+firstname;
    }
} else {
    displayName = lastname+", "+firstname;
}
return displayName;</Source>
  </Rule>
  <Rule created="1617123582049" id="0a111e5c786b1a9981788413a0616cc2" language="beanshell" modified="1617133023459" name="CF-ADDisplayNameChange-Rule" type="IdentityAttributeTarget">
    <Description>Identity attribute target rules are used to transform identity attribute values that are being pushed to targets.</Description>
    <Signature returnType="Object">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="value" type="Object">
          <Description>
           The value of the identity attribute.  Note that this could be single value or a list of values.
        </Description>
        </Argument>
        <Argument name="sourceIdentityAttribute">
          <Description>
           The sailpoint.object.ObjectAttribute for this target.
        </Description>
        </Argument>
        <Argument name="sourceIdentityAttributeName">
          <Description>
           The name of the identity attribute for this target.
        </Description>
        </Argument>
        <Argument name="sourceAttributeRequest">
          <Description>
           The sailpoint.object.ProvisioningPlan.AttributeRequest that is
           setting the attribute on the identity.
        </Description>
        </Argument>
        <Argument name="target">
          <Description>
           The sailpoint.object.AttributeTarget that is being processed.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The sailpoint.object.Link that is being processed.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The sailpoint.object.Identity that is being processed.
        </Description>
        </Argument>
        <Argument name="project">
          <Description>
           The sailpoint.object.ProvisioningProject that has the changes that
           are being requested.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The transformed value that will be pushed to the target.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>import sailpoint.object.*;
import java.lang.Character;

String displayName = "";
String firstname = identity.getFirstname();
String middlename = identity.getAttribute("middleName");
String lastname =  identity.getLastname();
String prefName =  identity.getAttribute("prefFirstName");
String userEmail = identity.getAttribute("email");
int userEmailDotCount = 0;
if(null != prefName){
    firstname = prefName;
}
if(null != userEmail){
    for (int i = 0; i &lt; userEmail.length(); i++) {
        if (userEmail.charAt(i) == '.')
        userEmailDotCount++;
    }
    if (userEmailDotCount > 2) {
        if(null != middlename){
            middlename=Character.toString(middlename.charAt(0));
            displayName = lastname+", "+firstname+" "+middlename;
        } else {
        displayName = lastname+", "+firstname;
        }    
    } else {
        displayName = lastname+", "+firstname;
    }
} else {
    displayName = lastname+", "+firstname;
}
return displayName;</Source>
  </Rule>
  <Rule created="1617370378984" id="0a111e5c786b1a99817892c972e8108c" language="beanshell" modified="1617370393454" name="testGenerateNextuserID">
    <ReferencedRules>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590d99426ac" name="CF-Constants-Rule"/>
      <Reference class="sailpoint.object.Rule" id="0a111e5875691e4f81758590e45726cf" name="CF-CIAM-CommonWebServiceRuleLibrary-Rule"/>
    </ReferencedRules>
    <Source>
  
   
  return updatedUserName = generateNextUserID();
  
  
    </Source>
  </Rule>
  <Rule created="1617961883159" id="0a111e5c78b214e08178b60b16170cde" language="beanshell" modified="1618138429984" name="cf-isLeaverProcessedValue-boolean" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String">
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
        <Argument name="environment" type="Map">
          <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
        </Argument>
        <Argument name="identity">
          <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
        </Argument>
        <Argument name="attributeDefinition">
          <Description>
           The AttributeDefinition object for this attribute.
        </Description>
        </Argument>
        <Argument name="link">
          <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
        </Argument>
        <Argument name="attributeSource">
          <Description>
          The AttributeSource object.
        </Description>
        </Argument>
        <Argument name="oldValue">
          <Description>
          The original value of the application account attribute.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="attributeValue">
          <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
        </Argument>
      </Returns>
    </Signature>
    <Source>return "false";</Source>
  </Rule>
  <Rule created="1613140918873" id="c0a8016477961bd0817796b1025900ba" language="beanshell" modified="1613404168723" name="CF-LOADCIAMUserRoleData-Rule">
    <Description>This rule is used to load user into CIAM table</Description>
    <Signature>
      <Inputs>
        <Argument name="log">
          <Description>
          The log object associated with the SailPointContext.
        </Description>
        </Argument>
        <Argument name="context">
          <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
        </Argument>
      </Inputs>
      <Returns>
        <Argument name="count"/>
      </Returns>
    </Signature>
    <Source>
import java.io.File;
  import java.util.List;
  import java.util.HashMap;
  import sailpoint.tools.Util;
  import sailpoint.object.Application;
  import sailpoint.object.Bundle;
  import sailpoint.object.Custom;
  import sailpoint.object.Classification;
  import sailpoint.object.ObjectClassification;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentitySelector;
  import sailpoint.object.IdentitySelector.MatchExpression;
  import sailpoint.object.IdentitySelector.MatchTerm;
  import sailpoint.object.IdentitySelector.MatchTerm.Type;
  import sailpoint.object.Link;
  import sailpoint.object.Profile;
  import sailpoint.object.Filter;
  import sailpoint.object.Filter.LeafFilter;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Schema;
  import sailpoint.object.ManagedAttribute;
  import sailpoint.tools.RFC4180LineIterator;
  import sailpoint.tools.RFC4180LineParser;
  import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.*;
import sailpoint.object.TaskDefinition;
import sailpoint.object.TaskResult;
  public dbInsert(HashMap m){
String username = "identityiqdev";
    String password = "Identityiq123$";
    String url = "jdbc:sqlserver://sv-spidsql-d1.carefirst.com";
    Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
    Connection connection = DriverManager.getConnection(url, username, password);
  System.out.println("connection............................"+connection);
   PreparedStatement statement = null;
   //statement = connection.prepareStatement(sqlQuery);

    String sqlQuery = "INSERT INTO [identityiqdev].[CIAM_ROLESYNC_TABLE](Native_Identity,Requestor_Networkid,Role_name) values(?,?,?)";
    statement = connection.prepareStatement(sqlQuery);
    if(m.get("EMP_ID")!=null){
      statement.setString(1, m.get("EMP_ID"));
    }else {
      statement.setString(1, "");
    }
    if(m.get("USERID")!=null){
      statement.setString(2, m.get("USERID"));
    }else {
      statement.setString(2, "");
    }
    if(m.get("ROLE_NM")!=null){
      statement.setString(3, m.get("ROLE_NM"));
    }else {
      statement.setString(3, "");
    }
    

    statement.executeUpdate();



    statement.close();
              connection.close();
      
  }
      

  String dlm = ",";

  
  String csvFileName ="/home/iqadmin/Data//CIAM-UserRoleMapping_01122021_v2_csv.csv";
File testFile = new File(csvFileName);
  if ((!testFile.exists()) || (testFile.isDirectory())) {
    System.out.println("Unable to find file: " + csvFileName);
    return;
  }

  System.out.println("Importing Roles from: '" + csvFileName + "' ...");

  // Open the CSV file for reading.
  BufferedReader fileIn = new BufferedReader(new FileReader(csvFileName));

  RFC4180LineParser parser = new RFC4180LineParser(dlm);
  System.out.println(" After RFC418 ");
  int lineCounter = 0;
  int userCount = 0;
  ArrayList headerStrings = new ArrayList();
  String thisLine = null;
  System.out.println(" Before while ");
  while (null != (thisLine = fileIn.readLine())) {
    System.out.println("Inside while ");

    List tokens = parser.parseLine(thisLine);
    System.out.println(" tokens: " + tokens);

    if (lineCounter == 0) {
      System.out.println(" Inside IF condition: ");
      // Header Line.
      // Assign indexes to each position.
      for (int i=0; i &lt; tokens.size(); i++) {
        headerStrings.add(tokens.get(i).trim());
      }         
    } else {
      // Data Line.  Read the data elements out.
      HashMap lineHash = new HashMap();
      System.out.println(" Inside else condition: ");
      for (int i=0; i &lt; tokens.size(); i++) {
        String headerString = headerStrings.get(i);
        String valueString = tokens.get(i);
        if (null != valueString) { valueString = valueString.trim(); }
        System.out.println ("header " + headerString + " == " + valueString);
        lineHash.put(headerString, valueString);
                             
      }       
      //return lineHash;
      System.out.println(" Before calling buildRole: " );
       dbInsert(lineHash);
      userCount++;
      System.out.println(" Processing user number::: "+userCount);

    }

    lineCounter++;

    // Don't let objects accrue in memory, flush them out every so often.
    if ((lineCounter % 20) == 0) { context.decache(); }

  } 

  fileIn.close();

  System.out.println("taskResult:::."+taskResult);
  if(null != taskResult){
taskResult.setAttribute("count",userCount);
    context.saveObject(taskResult);
    context.commitTransaction();
  }
    System.out.println("User Count is:::"+userCount);


  //return "Success";
  //return "Success";


  </Source>
  </Rule>
</sailpoint>